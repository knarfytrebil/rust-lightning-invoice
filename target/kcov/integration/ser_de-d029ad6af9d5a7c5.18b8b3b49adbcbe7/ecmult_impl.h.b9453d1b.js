var data = {lines:[
{"lineNum":"    1","line":"/*****************************************************************************"},
{"lineNum":"    2","line":" * Copyright (c) 2013, 2014, 2017 Pieter Wuille, Andrew Poelstra, Jonas Nick *"},
{"lineNum":"    3","line":" * Distributed under the MIT software license, see the accompanying          *"},
{"lineNum":"    4","line":" * file COPYING or http://www.opensource.org/licenses/mit-license.php.       *"},
{"lineNum":"    5","line":" *****************************************************************************/"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"#ifndef SECP256K1_ECMULT_IMPL_H"},
{"lineNum":"    8","line":"#define SECP256K1_ECMULT_IMPL_H"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"#include <string.h>"},
{"lineNum":"   11","line":"#include <stdint.h>"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"#include \"util.h\""},
{"lineNum":"   14","line":"#include \"group.h\""},
{"lineNum":"   15","line":"#include \"scalar.h\""},
{"lineNum":"   16","line":"#include \"ecmult.h\""},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"#if defined(EXHAUSTIVE_TEST_ORDER)"},
{"lineNum":"   19","line":"/* We need to lower these values for exhaustive tests because"},
{"lineNum":"   20","line":" * the tables cannot have infinities in them (this breaks the"},
{"lineNum":"   21","line":" * affine-isomorphism stuff which tracks z-ratios) */"},
{"lineNum":"   22","line":"#  if EXHAUSTIVE_TEST_ORDER > 128"},
{"lineNum":"   23","line":"#    define WINDOW_A 5"},
{"lineNum":"   24","line":"#    define WINDOW_G 8"},
{"lineNum":"   25","line":"#  elif EXHAUSTIVE_TEST_ORDER > 8"},
{"lineNum":"   26","line":"#    define WINDOW_A 4"},
{"lineNum":"   27","line":"#    define WINDOW_G 4"},
{"lineNum":"   28","line":"#  else"},
{"lineNum":"   29","line":"#    define WINDOW_A 2"},
{"lineNum":"   30","line":"#    define WINDOW_G 2"},
{"lineNum":"   31","line":"#  endif"},
{"lineNum":"   32","line":"#else"},
{"lineNum":"   33","line":"/* optimal for 128-bit and 256-bit exponents. */"},
{"lineNum":"   34","line":"#  define WINDOW_A 5"},
{"lineNum":"   35","line":"/** Larger values for ECMULT_WINDOW_SIZE result in possibly better"},
{"lineNum":"   36","line":" *  performance at the cost of an exponentially larger precomputed"},
{"lineNum":"   37","line":" *  table. The exact table size is"},
{"lineNum":"   38","line":" *      (1 << (WINDOW_G - 2)) * sizeof(secp256k1_ge_storage)  bytes,"},
{"lineNum":"   39","line":" *  where sizeof(secp256k1_ge_storage) is typically 64 bytes but can"},
{"lineNum":"   40","line":" *  be larger due to platform-specific padding and alignment."},
{"lineNum":"   41","line":" *  If the endomorphism optimization is enabled (USE_ENDOMORMPHSIM)"},
{"lineNum":"   42","line":" *  two tables of this size are used instead of only one."},
{"lineNum":"   43","line":" */"},
{"lineNum":"   44","line":"#  define WINDOW_G ECMULT_WINDOW_SIZE"},
{"lineNum":"   45","line":"#endif"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"/* Noone will ever need more than a window size of 24. The code might"},
{"lineNum":"   48","line":" * be correct for larger values of ECMULT_WINDOW_SIZE but this is not"},
{"lineNum":"   49","line":" * not tested."},
{"lineNum":"   50","line":" *"},
{"lineNum":"   51","line":" * The following limitations are known, and there are probably more:"},
{"lineNum":"   52","line":" * If WINDOW_G > 27 and size_t has 32 bits, then the code is incorrect"},
{"lineNum":"   53","line":" * because the size of the memory object that we allocate (in bytes)"},
{"lineNum":"   54","line":" * will not fit in a size_t."},
{"lineNum":"   55","line":" * If WINDOW_G > 31 and int has 32 bits, then the code is incorrect"},
{"lineNum":"   56","line":" * because certain expressions will overflow."},
{"lineNum":"   57","line":" */"},
{"lineNum":"   58","line":"#if ECMULT_WINDOW_SIZE < 2 || ECMULT_WINDOW_SIZE > 24"},
{"lineNum":"   59","line":"#  error Set ECMULT_WINDOW_SIZE to an integer in range [2..24]."},
{"lineNum":"   60","line":"#endif"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"   63","line":"    #define WNAF_BITS 128"},
{"lineNum":"   64","line":"#else"},
{"lineNum":"   65","line":"    #define WNAF_BITS 256"},
{"lineNum":"   66","line":"#endif"},
{"lineNum":"   67","line":"#define WNAF_SIZE_BITS(bits, w) (((bits) + (w) - 1) / (w))"},
{"lineNum":"   68","line":"#define WNAF_SIZE(w) WNAF_SIZE_BITS(WNAF_BITS, w)"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"/** The number of entries a table with precomputed multiples needs to have. */"},
{"lineNum":"   71","line":"#define ECMULT_TABLE_SIZE(w) (1 << ((w)-2))"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"/* The number of objects allocated on the scratch space for ecmult_multi algorithms */"},
{"lineNum":"   74","line":"#define PIPPENGER_SCRATCH_OBJECTS 6"},
{"lineNum":"   75","line":"#define STRAUSS_SCRATCH_OBJECTS 6"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"#define PIPPENGER_MAX_BUCKET_WINDOW 12"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"/* Minimum number of points for which pippenger_wnaf is faster than strauss wnaf */"},
{"lineNum":"   80","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"   81","line":"    #define ECMULT_PIPPENGER_THRESHOLD 88"},
{"lineNum":"   82","line":"#else"},
{"lineNum":"   83","line":"    #define ECMULT_PIPPENGER_THRESHOLD 160"},
{"lineNum":"   84","line":"#endif"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"   87","line":"    #define ECMULT_MAX_POINTS_PER_BATCH 5000000"},
{"lineNum":"   88","line":"#else"},
{"lineNum":"   89","line":"    #define ECMULT_MAX_POINTS_PER_BATCH 10000000"},
{"lineNum":"   90","line":"#endif"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"/** Fill a table \'prej\' with precomputed odd multiples of a. Prej will contain"},
{"lineNum":"   93","line":" *  the values [1*a,3*a,...,(2*n-1)*a], so it space for n values. zr[0] will"},
{"lineNum":"   94","line":" *  contain prej[0].z / a.z. The other zr[i] values = prej[i].z / prej[i-1].z."},
{"lineNum":"   95","line":" *  Prej\'s Z values are undefined, except for the last value."},
{"lineNum":"   96","line":" */"},
{"lineNum":"   97","line":"static void secp256k1_ecmult_odd_multiples_table(int n, secp256k1_gej *prej, secp256k1_fe *zr, const secp256k1_gej *a) {","class":"lineCov","hits":"2","order":"5136","possible_hits":"2",},
{"lineNum":"   98","line":"    secp256k1_gej d;"},
{"lineNum":"   99","line":"    secp256k1_ge a_ge, d_ge;"},
{"lineNum":"  100","line":"    int i;"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    VERIFY_CHECK(!a->infinity);"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"    secp256k1_gej_double_var(&d, a, NULL);","class":"lineCov","hits":"1","order":"5137","possible_hits":"1",},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    /*"},
{"lineNum":"  107","line":"     * Perform the additions on an isomorphism where \'d\' is affine: drop the z coordinate"},
{"lineNum":"  108","line":"     * of \'d\', and scale the 1P starting value\'s x/y coordinates without changing its z."},
{"lineNum":"  109","line":"     */"},
{"lineNum":"  110","line":"    d_ge.x = d.x;","class":"lineCov","hits":"1","order":"5138","possible_hits":"1",},
{"lineNum":"  111","line":"    d_ge.y = d.y;","class":"lineCov","hits":"1","order":"5139","possible_hits":"1",},
{"lineNum":"  112","line":"    d_ge.infinity = 0;","class":"lineCov","hits":"1","order":"5140","possible_hits":"1",},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"    secp256k1_ge_set_gej_zinv(&a_ge, a, &d.z);","class":"lineCov","hits":"1","order":"5141","possible_hits":"1",},
{"lineNum":"  115","line":"    prej[0].x = a_ge.x;","class":"lineCov","hits":"1","order":"5142","possible_hits":"1",},
{"lineNum":"  116","line":"    prej[0].y = a_ge.y;","class":"lineCov","hits":"1","order":"5143","possible_hits":"1",},
{"lineNum":"  117","line":"    prej[0].z = a->z;","class":"lineCov","hits":"1","order":"5144","possible_hits":"1",},
{"lineNum":"  118","line":"    prej[0].infinity = 0;","class":"lineCov","hits":"1","order":"5145","possible_hits":"1",},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"    zr[0] = d.z;","class":"lineCov","hits":"1","order":"5146","possible_hits":"1",},
{"lineNum":"  121","line":"    for (i = 1; i < n; i++) {","class":"lineCov","hits":"2","order":"5147","possible_hits":"2",},
{"lineNum":"  122","line":"        secp256k1_gej_add_ge_var(&prej[i], &prej[i-1], &d_ge, &zr[i]);","class":"lineCov","hits":"1","order":"5148","possible_hits":"1",},
{"lineNum":"  123","line":"    }"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    /*"},
{"lineNum":"  126","line":"     * Each point in \'prej\' has a z coordinate too small by a factor of \'d.z\'. Only"},
{"lineNum":"  127","line":"     * the final point\'s z coordinate is actually used though, so just update that."},
{"lineNum":"  128","line":"     */"},
{"lineNum":"  129","line":"    secp256k1_fe_mul(&prej[n-1].z, &prej[n-1].z, &d.z);","class":"lineCov","hits":"1","order":"5149","possible_hits":"1",},
{"lineNum":"  130","line":"}","class":"linePartCov","hits":"1","order":"5150","possible_hits":"2",},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"/** Fill a table \'pre\' with precomputed odd multiples of a."},
{"lineNum":"  133","line":" *"},
{"lineNum":"  134","line":" *  There are two versions of this function:"},
{"lineNum":"  135","line":" *  - secp256k1_ecmult_odd_multiples_table_globalz_windowa which brings its"},
{"lineNum":"  136","line":" *    resulting point set to a single constant Z denominator, stores the X and Y"},
{"lineNum":"  137","line":" *    coordinates as ge_storage points in pre, and stores the global Z in rz."},
{"lineNum":"  138","line":" *    It only operates on tables sized for WINDOW_A wnaf multiples."},
{"lineNum":"  139","line":" *  - secp256k1_ecmult_odd_multiples_table_storage_var, which converts its"},
{"lineNum":"  140","line":" *    resulting point set to actually affine points, and stores those in pre."},
{"lineNum":"  141","line":" *    It operates on tables of any size, but uses heap-allocated temporaries."},
{"lineNum":"  142","line":" *"},
{"lineNum":"  143","line":" *  To compute a*P + b*G, we compute a table for P using the first function,"},
{"lineNum":"  144","line":" *  and for G using the second (which requires an inverse, but it only needs to"},
{"lineNum":"  145","line":" *  happen once)."},
{"lineNum":"  146","line":" */"},
{"lineNum":"  147","line":"static void secp256k1_ecmult_odd_multiples_table_globalz_windowa(secp256k1_ge *pre, secp256k1_fe *globalz, const secp256k1_gej *a) {"},
{"lineNum":"  148","line":"    secp256k1_gej prej[ECMULT_TABLE_SIZE(WINDOW_A)];"},
{"lineNum":"  149","line":"    secp256k1_fe zr[ECMULT_TABLE_SIZE(WINDOW_A)];"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"    /* Compute the odd multiples in Jacobian form. */"},
{"lineNum":"  152","line":"    secp256k1_ecmult_odd_multiples_table(ECMULT_TABLE_SIZE(WINDOW_A), prej, zr, a);"},
{"lineNum":"  153","line":"    /* Bring them to the same Z denominator. */"},
{"lineNum":"  154","line":"    secp256k1_ge_globalz_set_table_gej(ECMULT_TABLE_SIZE(WINDOW_A), pre, globalz, prej, zr);"},
{"lineNum":"  155","line":"}"},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"static void secp256k1_ecmult_odd_multiples_table_storage_var(const int n, secp256k1_ge_storage *pre, const secp256k1_gej *a) {","class":"lineCov","hits":"2","order":"4781","possible_hits":"2",},
{"lineNum":"  158","line":"    secp256k1_gej d;"},
{"lineNum":"  159","line":"    secp256k1_ge d_ge, p_ge;"},
{"lineNum":"  160","line":"    secp256k1_gej pj;"},
{"lineNum":"  161","line":"    secp256k1_fe zi;"},
{"lineNum":"  162","line":"    secp256k1_fe zr;"},
{"lineNum":"  163","line":"    secp256k1_fe dx_over_dz_squared;"},
{"lineNum":"  164","line":"    int i;"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"    VERIFY_CHECK(!a->infinity);"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    secp256k1_gej_double_var(&d, a, NULL);","class":"lineCov","hits":"1","order":"4782","possible_hits":"1",},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"    /* First, we perform all the additions in an isomorphic curve obtained by multiplying"},
{"lineNum":"  171","line":"     * all `z` coordinates by 1/`d.z`. In these coordinates `d` is affine so we can use"},
{"lineNum":"  172","line":"     * `secp256k1_gej_add_ge_var` to perform the additions. For each addition, we store"},
{"lineNum":"  173","line":"     * the resulting y-coordinate and the z-ratio, since we only have enough memory to"},
{"lineNum":"  174","line":"     * store two field elements. These are sufficient to efficiently undo the isomorphism"},
{"lineNum":"  175","line":"     * and recompute all the `x`s."},
{"lineNum":"  176","line":"     */"},
{"lineNum":"  177","line":"    d_ge.x = d.x;","class":"lineCov","hits":"1","order":"4783","possible_hits":"1",},
{"lineNum":"  178","line":"    d_ge.y = d.y;","class":"lineCov","hits":"1","order":"4784","possible_hits":"1",},
{"lineNum":"  179","line":"    d_ge.infinity = 0;","class":"lineCov","hits":"1","order":"4785","possible_hits":"1",},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"    secp256k1_ge_set_gej_zinv(&p_ge, a, &d.z);","class":"lineCov","hits":"1","order":"4786","possible_hits":"1",},
{"lineNum":"  182","line":"    pj.x = p_ge.x;","class":"lineCov","hits":"1","order":"4787","possible_hits":"1",},
{"lineNum":"  183","line":"    pj.y = p_ge.y;","class":"lineCov","hits":"1","order":"4788","possible_hits":"1",},
{"lineNum":"  184","line":"    pj.z = a->z;","class":"lineCov","hits":"1","order":"4789","possible_hits":"1",},
{"lineNum":"  185","line":"    pj.infinity = 0;","class":"lineCov","hits":"1","order":"4790","possible_hits":"1",},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"    for (i = 0; i < (n - 1); i++) {","class":"lineCov","hits":"2","order":"4791","possible_hits":"2",},
{"lineNum":"  188","line":"        secp256k1_fe_normalize_var(&pj.y);","class":"lineCov","hits":"1","order":"4792","possible_hits":"1",},
{"lineNum":"  189","line":"        secp256k1_fe_to_storage(&pre[i].y, &pj.y);","class":"lineCov","hits":"1","order":"4793","possible_hits":"1",},
{"lineNum":"  190","line":"        secp256k1_gej_add_ge_var(&pj, &pj, &d_ge, &zr);","class":"lineCov","hits":"1","order":"4794","possible_hits":"1",},
{"lineNum":"  191","line":"        secp256k1_fe_normalize_var(&zr);","class":"lineCov","hits":"1","order":"4796","possible_hits":"1",},
{"lineNum":"  192","line":"        secp256k1_fe_to_storage(&pre[i].x, &zr);","class":"lineCov","hits":"1","order":"4797","possible_hits":"1",},
{"lineNum":"  193","line":"    }"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"    /* Invert d.z in the same batch, preserving pj.z so we can extract 1/d.z */"},
{"lineNum":"  196","line":"    secp256k1_fe_mul(&zi, &pj.z, &d.z);","class":"lineCov","hits":"1","order":"4798","possible_hits":"1",},
{"lineNum":"  197","line":"    secp256k1_fe_inv_var(&zi, &zi);","class":"lineCov","hits":"1","order":"4799","possible_hits":"1",},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"    /* Directly set `pre[n - 1]` to `pj`, saving the inverted z-coordinate so"},
{"lineNum":"  200","line":"     * that we can combine it with the saved z-ratios to compute the other zs"},
{"lineNum":"  201","line":"     * without any more inversions. */"},
{"lineNum":"  202","line":"    secp256k1_ge_set_gej_zinv(&p_ge, &pj, &zi);","class":"lineCov","hits":"1","order":"4800","possible_hits":"1",},
{"lineNum":"  203","line":"    secp256k1_ge_to_storage(&pre[n - 1], &p_ge);","class":"lineCov","hits":"1","order":"4801","possible_hits":"1",},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"    /* Compute the actual x-coordinate of D, which will be needed below. */"},
{"lineNum":"  206","line":"    secp256k1_fe_mul(&d.z, &zi, &pj.z);  /* d.z = 1/d.z */","class":"lineCov","hits":"1","order":"4802","possible_hits":"1",},
{"lineNum":"  207","line":"    secp256k1_fe_sqr(&dx_over_dz_squared, &d.z);","class":"lineCov","hits":"1","order":"4803","possible_hits":"1",},
{"lineNum":"  208","line":"    secp256k1_fe_mul(&dx_over_dz_squared, &dx_over_dz_squared, &d.x);","class":"lineCov","hits":"1","order":"4804","possible_hits":"1",},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"    /* Going into the second loop, we have set `pre[n-1]` to its final affine"},
{"lineNum":"  211","line":"     * form, but still need to set `pre[i]` for `i` in 0 through `n-2`. We"},
{"lineNum":"  212","line":"     * have `zi = (p.z * d.z)^-1`, where"},
{"lineNum":"  213","line":"     *"},
{"lineNum":"  214","line":"     *     `p.z` is the z-coordinate of the point on the isomorphic curve"},
{"lineNum":"  215","line":"     *           which was ultimately assigned to `pre[n-1]`."},
{"lineNum":"  216","line":"     *     `d.z` is the multiplier that must be applied to all z-coordinates"},
{"lineNum":"  217","line":"     *           to move from our isomorphic curve back to secp256k1; so the"},
{"lineNum":"  218","line":"     *           product `p.z * d.z` is the z-coordinate of the secp256k1"},
{"lineNum":"  219","line":"     *           point assigned to `pre[n-1]`."},
{"lineNum":"  220","line":"     *"},
{"lineNum":"  221","line":"     * All subsequent inverse-z-coordinates can be obtained by multiplying this"},
{"lineNum":"  222","line":"     * factor by successive z-ratios, which is much more efficient than directly"},
{"lineNum":"  223","line":"     * computing each one."},
{"lineNum":"  224","line":"     *"},
{"lineNum":"  225","line":"     * Importantly, these inverse-zs will be coordinates of points on secp256k1,"},
{"lineNum":"  226","line":"     * while our other stored values come from computations on the isomorphic"},
{"lineNum":"  227","line":"     * curve. So in the below loop, we will take care not to actually use `zi`"},
{"lineNum":"  228","line":"     * or any derived values until we\'re back on secp256k1."},
{"lineNum":"  229","line":"     */"},
{"lineNum":"  230","line":"    i = n - 1;","class":"lineCov","hits":"1","order":"4805","possible_hits":"1",},
{"lineNum":"  231","line":"    while (i > 0) {","class":"lineCov","hits":"2","order":"4806","possible_hits":"2",},
{"lineNum":"  232","line":"        secp256k1_fe zi2, zi3;"},
{"lineNum":"  233","line":"        const secp256k1_fe *rzr;"},
{"lineNum":"  234","line":"        i--;","class":"lineCov","hits":"1","order":"4807","possible_hits":"1",},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"        secp256k1_ge_from_storage(&p_ge, &pre[i]);","class":"lineCov","hits":"1","order":"4808","possible_hits":"1",},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"        /* For each remaining point, we extract the z-ratio from the stored"},
{"lineNum":"  239","line":"         * x-coordinate, compute its z^-1 from that, and compute the full"},
{"lineNum":"  240","line":"         * point from that. */"},
{"lineNum":"  241","line":"        rzr = &p_ge.x;","class":"lineCov","hits":"1","order":"4809","possible_hits":"1",},
{"lineNum":"  242","line":"        secp256k1_fe_mul(&zi, &zi, rzr);","class":"lineCov","hits":"1","order":"4810","possible_hits":"1",},
{"lineNum":"  243","line":"        secp256k1_fe_sqr(&zi2, &zi);","class":"lineCov","hits":"1","order":"4811","possible_hits":"1",},
{"lineNum":"  244","line":"        secp256k1_fe_mul(&zi3, &zi2, &zi);","class":"lineCov","hits":"1","order":"4812","possible_hits":"1",},
{"lineNum":"  245","line":"        /* To compute the actual x-coordinate, we use the stored z ratio and"},
{"lineNum":"  246","line":"         * y-coordinate, which we obtained from `secp256k1_gej_add_ge_var`"},
{"lineNum":"  247","line":"         * in the loop above, as well as the inverse of the square of its"},
{"lineNum":"  248","line":"         * z-coordinate. We store the latter in the `zi2` variable, which is"},
{"lineNum":"  249","line":"         * computed iteratively starting from the overall Z inverse then"},
{"lineNum":"  250","line":"         * multiplying by each z-ratio in turn."},
{"lineNum":"  251","line":"         *"},
{"lineNum":"  252","line":"         * Denoting the z-ratio as `rzr`, we observe that it is equal to `h`"},
{"lineNum":"  253","line":"         * from the inside of the above `gej_add_ge_var` call. This satisfies"},
{"lineNum":"  254","line":"         *"},
{"lineNum":"  255","line":"         *    rzr = d_x * z^2 - x * d_z^2"},
{"lineNum":"  256","line":"         *"},
{"lineNum":"  257","line":"         * where (`d_x`, `d_z`) are Jacobian coordinates of `D` and `(x, z)`"},
{"lineNum":"  258","line":"         * are Jacobian coordinates of our desired point -- except both are on"},
{"lineNum":"  259","line":"         * the isomorphic curve that we were using when we called `gej_add_ge_var`."},
{"lineNum":"  260","line":"         * To get back to secp256k1, we must multiply both `z`s by `d_z`, or"},
{"lineNum":"  261","line":"         * equivalently divide both `x`s by `d_z^2`. Our equation then becomes"},
{"lineNum":"  262","line":"         *"},
{"lineNum":"  263","line":"         *    rzr = d_x * z^2 / d_z^2 - x"},
{"lineNum":"  264","line":"         *"},
{"lineNum":"  265","line":"         * (The left-hand-side, being a ratio of z-coordinates, is unaffected"},
{"lineNum":"  266","line":"         * by the isomorphism.)"},
{"lineNum":"  267","line":"         *"},
{"lineNum":"  268","line":"         * Rearranging to solve for `x`, we have"},
{"lineNum":"  269","line":"         *"},
{"lineNum":"  270","line":"         *     x = d_x * z^2 / d_z^2 - rzr"},
{"lineNum":"  271","line":"         *"},
{"lineNum":"  272","line":"         * But what we actually want is the affine coordinate `X = x/z^2`,"},
{"lineNum":"  273","line":"         * which will satisfy"},
{"lineNum":"  274","line":"         *"},
{"lineNum":"  275","line":"         *     X = d_x / d_z^2 - rzr / z^2"},
{"lineNum":"  276","line":"         *       = dx_over_dz_squared - rzr * zi2"},
{"lineNum":"  277","line":"         */"},
{"lineNum":"  278","line":"        secp256k1_fe_mul(&p_ge.x, rzr, &zi2);","class":"lineCov","hits":"1","order":"4813","possible_hits":"1",},
{"lineNum":"  279","line":"        secp256k1_fe_negate(&p_ge.x, &p_ge.x, 1);","class":"lineCov","hits":"1","order":"4814","possible_hits":"1",},
{"lineNum":"  280","line":"        secp256k1_fe_add(&p_ge.x, &dx_over_dz_squared);","class":"lineCov","hits":"1","order":"4815","possible_hits":"1",},
{"lineNum":"  281","line":"        /* y is stored_y/z^3, as we expect */"},
{"lineNum":"  282","line":"        secp256k1_fe_mul(&p_ge.y, &p_ge.y, &zi3);","class":"lineCov","hits":"1","order":"4816","possible_hits":"1",},
{"lineNum":"  283","line":"        /* Store */"},
{"lineNum":"  284","line":"        secp256k1_ge_to_storage(&pre[i], &p_ge);","class":"lineCov","hits":"1","order":"4817","possible_hits":"1",},
{"lineNum":"  285","line":"    }"},
{"lineNum":"  286","line":"}","class":"linePartCov","hits":"1","order":"4818","possible_hits":"2",},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"/** The following two macro retrieves a particular odd multiple from a table"},
{"lineNum":"  289","line":" *  of precomputed multiples. */"},
{"lineNum":"  290","line":"#define ECMULT_TABLE_GET_GE(r,pre,n,w) do { \\"},
{"lineNum":"  291","line":"    VERIFY_CHECK(((n) & 1) == 1); \\"},
{"lineNum":"  292","line":"    VERIFY_CHECK((n) >= -((1 << ((w)-1)) - 1)); \\"},
{"lineNum":"  293","line":"    VERIFY_CHECK((n) <=  ((1 << ((w)-1)) - 1)); \\"},
{"lineNum":"  294","line":"    if ((n) > 0) { \\"},
{"lineNum":"  295","line":"        *(r) = (pre)[((n)-1)/2]; \\"},
{"lineNum":"  296","line":"    } else { \\"},
{"lineNum":"  297","line":"        *(r) = (pre)[(-(n)-1)/2]; \\"},
{"lineNum":"  298","line":"        secp256k1_fe_negate(&((r)->y), &((r)->y), 1); \\"},
{"lineNum":"  299","line":"    } \\"},
{"lineNum":"  300","line":"} while(0)"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"#define ECMULT_TABLE_GET_GE_STORAGE(r,pre,n,w) do { \\"},
{"lineNum":"  303","line":"    VERIFY_CHECK(((n) & 1) == 1); \\"},
{"lineNum":"  304","line":"    VERIFY_CHECK((n) >= -((1 << ((w)-1)) - 1)); \\"},
{"lineNum":"  305","line":"    VERIFY_CHECK((n) <=  ((1 << ((w)-1)) - 1)); \\"},
{"lineNum":"  306","line":"    if ((n) > 0) { \\"},
{"lineNum":"  307","line":"        secp256k1_ge_from_storage((r), &(pre)[((n)-1)/2]); \\"},
{"lineNum":"  308","line":"    } else { \\"},
{"lineNum":"  309","line":"        secp256k1_ge_from_storage((r), &(pre)[(-(n)-1)/2]); \\"},
{"lineNum":"  310","line":"        secp256k1_fe_negate(&((r)->y), &((r)->y), 1); \\"},
{"lineNum":"  311","line":"    } \\"},
{"lineNum":"  312","line":"} while(0)"},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"static const size_t SECP256K1_ECMULT_CONTEXT_PREALLOCATED_SIZE ="},
{"lineNum":"  315","line":"    ROUND_TO_ALIGN(sizeof((*((secp256k1_ecmult_context*) NULL)->pre_g)[0]) * ECMULT_TABLE_SIZE(WINDOW_G))"},
{"lineNum":"  316","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  317","line":"    + ROUND_TO_ALIGN(sizeof((*((secp256k1_ecmult_context*) NULL)->pre_g_128)[0]) * ECMULT_TABLE_SIZE(WINDOW_G))"},
{"lineNum":"  318","line":"#endif"},
{"lineNum":"  319","line":"    ;"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"static void secp256k1_ecmult_context_init(secp256k1_ecmult_context *ctx) {","class":"lineCov","hits":"1","order":"3881","possible_hits":"1",},
{"lineNum":"  322","line":"    ctx->pre_g = NULL;","class":"lineCov","hits":"1","order":"3882","possible_hits":"1",},
{"lineNum":"  323","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  324","line":"    ctx->pre_g_128 = NULL;"},
{"lineNum":"  325","line":"#endif"},
{"lineNum":"  326","line":"}","class":"linePartCov","hits":"1","order":"3883","possible_hits":"2",},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"static void secp256k1_ecmult_context_build(secp256k1_ecmult_context *ctx, void **prealloc) {","class":"lineCov","hits":"2","order":"4773","possible_hits":"2",},
{"lineNum":"  329","line":"    secp256k1_gej gj;"},
{"lineNum":"  330","line":"    void* const base = *prealloc;","class":"lineCov","hits":"1","order":"4774","possible_hits":"1",},
{"lineNum":"  331","line":"    size_t const prealloc_size = SECP256K1_ECMULT_CONTEXT_PREALLOCATED_SIZE;","class":"lineCov","hits":"1","order":"4775","possible_hits":"1",},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"    if (ctx->pre_g != NULL) {","class":"lineCov","hits":"1","order":"4776","possible_hits":"1",},
{"lineNum":"  334","line":"        return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  335","line":"    }"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"    /* get the generator */"},
{"lineNum":"  338","line":"    secp256k1_gej_set_ge(&gj, &secp256k1_ge_const_g);","class":"lineCov","hits":"1","order":"4777","possible_hits":"1",},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"    {"},
{"lineNum":"  341","line":"        size_t size = sizeof((*ctx->pre_g)[0]) * ((size_t)ECMULT_TABLE_SIZE(WINDOW_G));","class":"lineCov","hits":"1","order":"4778","possible_hits":"1",},
{"lineNum":"  342","line":"        /* check for overflow */"},
{"lineNum":"  343","line":"        VERIFY_CHECK(size / sizeof((*ctx->pre_g)[0]) == ((size_t)ECMULT_TABLE_SIZE(WINDOW_G)));"},
{"lineNum":"  344","line":"        ctx->pre_g = (secp256k1_ge_storage (*)[])manual_alloc(prealloc, sizeof((*ctx->pre_g)[0]) * ECMULT_TABLE_SIZE(WINDOW_G), base, prealloc_size);","class":"lineCov","hits":"1","order":"4779","possible_hits":"1",},
{"lineNum":"  345","line":"    }"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"    /* precompute the tables with odd multiples */"},
{"lineNum":"  348","line":"    secp256k1_ecmult_odd_multiples_table_storage_var(ECMULT_TABLE_SIZE(WINDOW_G), *ctx->pre_g, &gj);","class":"lineCov","hits":"1","order":"4780","possible_hits":"1",},
{"lineNum":"  349","line":""},
{"lineNum":"  350","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  351","line":"    {"},
{"lineNum":"  352","line":"        secp256k1_gej g_128j;"},
{"lineNum":"  353","line":"        int i;"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"        size_t size = sizeof((*ctx->pre_g_128)[0]) * ((size_t) ECMULT_TABLE_SIZE(WINDOW_G));"},
{"lineNum":"  356","line":"        /* check for overflow */"},
{"lineNum":"  357","line":"        VERIFY_CHECK(size / sizeof((*ctx->pre_g_128)[0]) == ((size_t)ECMULT_TABLE_SIZE(WINDOW_G)));"},
{"lineNum":"  358","line":"        ctx->pre_g_128 = (secp256k1_ge_storage (*)[])manual_alloc(prealloc, sizeof((*ctx->pre_g_128)[0]) * ECMULT_TABLE_SIZE(WINDOW_G), base, prealloc_size);"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"        /* calculate 2^128*generator */"},
{"lineNum":"  361","line":"        g_128j = gj;"},
{"lineNum":"  362","line":"        for (i = 0; i < 128; i++) {"},
{"lineNum":"  363","line":"            secp256k1_gej_double_var(&g_128j, &g_128j, NULL);"},
{"lineNum":"  364","line":"        }"},
{"lineNum":"  365","line":"        secp256k1_ecmult_odd_multiples_table_storage_var(ECMULT_TABLE_SIZE(WINDOW_G), *ctx->pre_g_128, &g_128j);"},
{"lineNum":"  366","line":"    }"},
{"lineNum":"  367","line":"#endif"},
{"lineNum":"  368","line":"}","class":"linePartCov","hits":"1","order":"4819","possible_hits":"2",},
{"lineNum":"  369","line":""},
{"lineNum":"  370","line":"static void secp256k1_ecmult_context_finalize_memcpy(secp256k1_ecmult_context *dst, const secp256k1_ecmult_context *src) {"},
{"lineNum":"  371","line":"    if (src->pre_g != NULL) {"},
{"lineNum":"  372","line":"        /* We cast to void* first to suppress a -Wcast-align warning. */"},
{"lineNum":"  373","line":"        dst->pre_g = (secp256k1_ge_storage (*)[])(void*)((unsigned char*)dst + ((unsigned char*)(src->pre_g) - (unsigned char*)src));"},
{"lineNum":"  374","line":"    }"},
{"lineNum":"  375","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  376","line":"    if (src->pre_g_128 != NULL) {"},
{"lineNum":"  377","line":"        dst->pre_g_128 = (secp256k1_ge_storage (*)[])(void*)((unsigned char*)dst + ((unsigned char*)(src->pre_g_128) - (unsigned char*)src));"},
{"lineNum":"  378","line":"    }"},
{"lineNum":"  379","line":"#endif"},
{"lineNum":"  380","line":"}"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"static int secp256k1_ecmult_context_is_built(const secp256k1_ecmult_context *ctx) {","class":"lineCov","hits":"1","order":"4838","possible_hits":"1",},
{"lineNum":"  383","line":"    return ctx->pre_g != NULL;","class":"lineCov","hits":"1","order":"4839","possible_hits":"1",},
{"lineNum":"  384","line":"}","class":"linePartCov","hits":"1","order":"4840","possible_hits":"2",},
{"lineNum":"  385","line":""},
{"lineNum":"  386","line":"static void secp256k1_ecmult_context_clear(secp256k1_ecmult_context *ctx) {","class":"lineCov","hits":"1","order":"5253","possible_hits":"1",},
{"lineNum":"  387","line":"    secp256k1_ecmult_context_init(ctx);","class":"lineCov","hits":"1","order":"5254","possible_hits":"1",},
{"lineNum":"  388","line":"}","class":"linePartCov","hits":"1","order":"5255","possible_hits":"2",},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"/** Convert a number to WNAF notation. The number becomes represented by sum(2^i * wnaf[i], i=0..bits),"},
{"lineNum":"  391","line":" *  with the following guarantees:"},
{"lineNum":"  392","line":" *  - each wnaf[i] is either 0, or an odd integer between -(1<<(w-1) - 1) and (1<<(w-1) - 1)"},
{"lineNum":"  393","line":" *  - two non-zero entries in wnaf are separated by at least w-1 zeroes."},
{"lineNum":"  394","line":" *  - the number of set values in wnaf is returned. This number is at most 256, and at most one more"},
{"lineNum":"  395","line":" *    than the number of bits in the (absolute value) of the input."},
{"lineNum":"  396","line":" */"},
{"lineNum":"  397","line":"static int secp256k1_ecmult_wnaf(int *wnaf, int len, const secp256k1_scalar *a, int w) {","class":"lineCov","hits":"2","order":"5099","possible_hits":"2",},
{"lineNum":"  398","line":"    secp256k1_scalar s = *a;","class":"lineCov","hits":"1","order":"5100","possible_hits":"1",},
{"lineNum":"  399","line":"    int last_set_bit = -1;","class":"lineCov","hits":"1","order":"5101","possible_hits":"1",},
{"lineNum":"  400","line":"    int bit = 0;","class":"lineCov","hits":"1","order":"5102","possible_hits":"1",},
{"lineNum":"  401","line":"    int sign = 1;","class":"lineCov","hits":"1","order":"5103","possible_hits":"1",},
{"lineNum":"  402","line":"    int carry = 0;","class":"lineCov","hits":"1","order":"5104","possible_hits":"1",},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"    VERIFY_CHECK(wnaf != NULL);"},
{"lineNum":"  405","line":"    VERIFY_CHECK(0 <= len && len <= 256);","class":"lineCov","hits":"1","order":"5105","possible_hits":"1",},
{"lineNum":"  406","line":"    VERIFY_CHECK(a != NULL);"},
{"lineNum":"  407","line":"    VERIFY_CHECK(2 <= w && w <= 31);","class":"lineCov","hits":"1","order":"5106","possible_hits":"1",},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"    memset(wnaf, 0, len * sizeof(wnaf[0]));","class":"lineCov","hits":"1","order":"5107","possible_hits":"1",},
{"lineNum":"  410","line":""},
{"lineNum":"  411","line":"    if (secp256k1_scalar_get_bits(&s, 255, 1)) {","class":"lineCov","hits":"1","order":"5108","possible_hits":"1",},
{"lineNum":"  412","line":"        secp256k1_scalar_negate(&s, &s);","class":"lineCov","hits":"1","order":"5109","possible_hits":"1",},
{"lineNum":"  413","line":"        sign = -1;","class":"lineCov","hits":"1","order":"5110","possible_hits":"1",},
{"lineNum":"  414","line":"    }"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"    while (bit < len) {","class":"lineCov","hits":"2","order":"5111","possible_hits":"2",},
{"lineNum":"  417","line":"        int now;"},
{"lineNum":"  418","line":"        int word;"},
{"lineNum":"  419","line":"        if (secp256k1_scalar_get_bits(&s, bit, 1) == (unsigned int)carry) {","class":"lineCov","hits":"1","order":"5112","possible_hits":"1",},
{"lineNum":"  420","line":"            bit++;","class":"lineCov","hits":"1","order":"5125","possible_hits":"1",},
{"lineNum":"  421","line":"            continue;","class":"lineCov","hits":"1","order":"5126","possible_hits":"1",},
{"lineNum":"  422","line":"        }"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"        now = w;","class":"lineCov","hits":"1","order":"5113","possible_hits":"1",},
{"lineNum":"  425","line":"        if (now > len - bit) {","class":"lineCov","hits":"1","order":"5114","possible_hits":"1",},
{"lineNum":"  426","line":"            now = len - bit;","class":"lineCov","hits":"1","order":"5128","possible_hits":"1",},
{"lineNum":"  427","line":"        }"},
{"lineNum":"  428","line":""},
{"lineNum":"  429","line":"        word = secp256k1_scalar_get_bits_var(&s, bit, now) + carry;","class":"lineCov","hits":"1","order":"5115","possible_hits":"1",},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"        carry = (word >> (w-1)) & 1;","class":"lineCov","hits":"1","order":"5120","possible_hits":"1",},
{"lineNum":"  432","line":"        word -= carry << w;","class":"lineCov","hits":"1","order":"5121","possible_hits":"1",},
{"lineNum":"  433","line":""},
{"lineNum":"  434","line":"        wnaf[bit] = sign * word;","class":"lineCov","hits":"1","order":"5122","possible_hits":"1",},
{"lineNum":"  435","line":"        last_set_bit = bit;","class":"lineCov","hits":"1","order":"5123","possible_hits":"1",},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"        bit += now;","class":"lineCov","hits":"1","order":"5124","possible_hits":"1",},
{"lineNum":"  438","line":"    }"},
{"lineNum":"  439","line":"#ifdef VERIFY"},
{"lineNum":"  440","line":"    CHECK(carry == 0);"},
{"lineNum":"  441","line":"    while (bit < 256) {"},
{"lineNum":"  442","line":"        CHECK(secp256k1_scalar_get_bits(&s, bit++, 1) == 0);"},
{"lineNum":"  443","line":"    }"},
{"lineNum":"  444","line":"#endif"},
{"lineNum":"  445","line":"    return last_set_bit + 1;","class":"lineCov","hits":"1","order":"5129","possible_hits":"1",},
{"lineNum":"  446","line":"}","class":"linePartCov","hits":"1","order":"5130","possible_hits":"2",},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"struct secp256k1_strauss_point_state {"},
{"lineNum":"  449","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  450","line":"    secp256k1_scalar na_1, na_lam;"},
{"lineNum":"  451","line":"    int wnaf_na_1[130];"},
{"lineNum":"  452","line":"    int wnaf_na_lam[130];"},
{"lineNum":"  453","line":"    int bits_na_1;"},
{"lineNum":"  454","line":"    int bits_na_lam;"},
{"lineNum":"  455","line":"#else"},
{"lineNum":"  456","line":"    int wnaf_na[256];"},
{"lineNum":"  457","line":"    int bits_na;"},
{"lineNum":"  458","line":"#endif"},
{"lineNum":"  459","line":"    size_t input_pos;"},
{"lineNum":"  460","line":"};"},
{"lineNum":"  461","line":""},
{"lineNum":"  462","line":"struct secp256k1_strauss_state {"},
{"lineNum":"  463","line":"    secp256k1_gej* prej;"},
{"lineNum":"  464","line":"    secp256k1_fe* zr;"},
{"lineNum":"  465","line":"    secp256k1_ge* pre_a;"},
{"lineNum":"  466","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  467","line":"    secp256k1_ge* pre_a_lam;"},
{"lineNum":"  468","line":"#endif"},
{"lineNum":"  469","line":"    struct secp256k1_strauss_point_state* ps;"},
{"lineNum":"  470","line":"};"},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"static void secp256k1_ecmult_strauss_wnaf(const secp256k1_ecmult_context *ctx, const struct secp256k1_strauss_state *state, secp256k1_gej *r, int num, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng) {","class":"lineCov","hits":"2","order":"5088","possible_hits":"2",},
{"lineNum":"  473","line":"    secp256k1_ge tmpa;"},
{"lineNum":"  474","line":"    secp256k1_fe Z;"},
{"lineNum":"  475","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  476","line":"    /* Splitted G factors. */"},
{"lineNum":"  477","line":"    secp256k1_scalar ng_1, ng_128;"},
{"lineNum":"  478","line":"    int wnaf_ng_1[129];"},
{"lineNum":"  479","line":"    int bits_ng_1 = 0;"},
{"lineNum":"  480","line":"    int wnaf_ng_128[129];"},
{"lineNum":"  481","line":"    int bits_ng_128 = 0;"},
{"lineNum":"  482","line":"#else"},
{"lineNum":"  483","line":"    int wnaf_ng[256];"},
{"lineNum":"  484","line":"    int bits_ng = 0;","class":"lineCov","hits":"1","order":"5089","possible_hits":"1",},
{"lineNum":"  485","line":"#endif"},
{"lineNum":"  486","line":"    int i;"},
{"lineNum":"  487","line":"    int bits = 0;","class":"lineCov","hits":"1","order":"5090","possible_hits":"1",},
{"lineNum":"  488","line":"    int np;"},
{"lineNum":"  489","line":"    int no = 0;","class":"lineCov","hits":"1","order":"5091","possible_hits":"1",},
{"lineNum":"  490","line":""},
{"lineNum":"  491","line":"    for (np = 0; np < num; ++np) {","class":"lineCov","hits":"2","order":"5092","possible_hits":"2",},
{"lineNum":"  492","line":"        if (secp256k1_scalar_is_zero(&na[np]) || secp256k1_gej_is_infinity(&a[np])) {","class":"lineCov","hits":"1","order":"5093","possible_hits":"1",},
{"lineNum":"  493","line":"            continue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  494","line":"        }"},
{"lineNum":"  495","line":"        state->ps[no].input_pos = np;","class":"lineCov","hits":"1","order":"5097","possible_hits":"1",},
{"lineNum":"  496","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  497","line":"        /* split na into na_1 and na_lam (where na = na_1 + na_lam*lambda, and na_1 and na_lam are ~128 bit) */"},
{"lineNum":"  498","line":"        secp256k1_scalar_split_lambda(&state->ps[no].na_1, &state->ps[no].na_lam, &na[np]);"},
{"lineNum":"  499","line":""},
{"lineNum":"  500","line":"        /* build wnaf representation for na_1 and na_lam. */"},
{"lineNum":"  501","line":"        state->ps[no].bits_na_1   = secp256k1_ecmult_wnaf(state->ps[no].wnaf_na_1,   130, &state->ps[no].na_1,   WINDOW_A);"},
{"lineNum":"  502","line":"        state->ps[no].bits_na_lam = secp256k1_ecmult_wnaf(state->ps[no].wnaf_na_lam, 130, &state->ps[no].na_lam, WINDOW_A);"},
{"lineNum":"  503","line":"        VERIFY_CHECK(state->ps[no].bits_na_1 <= 130);"},
{"lineNum":"  504","line":"        VERIFY_CHECK(state->ps[no].bits_na_lam <= 130);"},
{"lineNum":"  505","line":"        if (state->ps[no].bits_na_1 > bits) {"},
{"lineNum":"  506","line":"            bits = state->ps[no].bits_na_1;"},
{"lineNum":"  507","line":"        }"},
{"lineNum":"  508","line":"        if (state->ps[no].bits_na_lam > bits) {"},
{"lineNum":"  509","line":"            bits = state->ps[no].bits_na_lam;"},
{"lineNum":"  510","line":"        }"},
{"lineNum":"  511","line":"#else"},
{"lineNum":"  512","line":"        /* build wnaf representation for na. */"},
{"lineNum":"  513","line":"        state->ps[no].bits_na     = secp256k1_ecmult_wnaf(state->ps[no].wnaf_na,     256, &na[np],      WINDOW_A);","class":"lineCov","hits":"1","order":"5098","possible_hits":"1",},
{"lineNum":"  514","line":"        if (state->ps[no].bits_na > bits) {","class":"lineCov","hits":"1","order":"5131","possible_hits":"1",},
{"lineNum":"  515","line":"            bits = state->ps[no].bits_na;","class":"lineCov","hits":"1","order":"5132","possible_hits":"1",},
{"lineNum":"  516","line":"        }"},
{"lineNum":"  517","line":"#endif"},
{"lineNum":"  518","line":"        ++no;","class":"lineCov","hits":"1","order":"5133","possible_hits":"1",},
{"lineNum":"  519","line":"    }"},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"    /* Calculate odd multiples of a."},
{"lineNum":"  522","line":"     * All multiples are brought to the same Z \'denominator\', which is stored"},
{"lineNum":"  523","line":"     * in Z. Due to secp256k1\' isomorphism we can do all operations pretending"},
{"lineNum":"  524","line":"     * that the Z coordinate was 1, use affine addition formulae, and correct"},
{"lineNum":"  525","line":"     * the Z coordinate of the result once at the end."},
{"lineNum":"  526","line":"     * The exception is the precomputed G table points, which are actually"},
{"lineNum":"  527","line":"     * affine. Compared to the base used for other points, they have a Z ratio"},
{"lineNum":"  528","line":"     * of 1/Z, so we can use secp256k1_gej_add_zinv_var, which uses the same"},
{"lineNum":"  529","line":"     * isomorphism to efficiently add with a known Z inverse."},
{"lineNum":"  530","line":"     */"},
{"lineNum":"  531","line":"    if (no > 0) {","class":"lineCov","hits":"1","order":"5134","possible_hits":"1",},
{"lineNum":"  532","line":"        /* Compute the odd multiples in Jacobian form. */"},
{"lineNum":"  533","line":"        secp256k1_ecmult_odd_multiples_table(ECMULT_TABLE_SIZE(WINDOW_A), state->prej, state->zr, &a[state->ps[0].input_pos]);","class":"lineCov","hits":"1","order":"5135","possible_hits":"1",},
{"lineNum":"  534","line":"        for (np = 1; np < no; ++np) {","class":"linePartCov","hits":"1","order":"5151","possible_hits":"2",},
{"lineNum":"  535","line":"            secp256k1_gej tmp = a[state->ps[np].input_pos];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  536","line":"#ifdef VERIFY"},
{"lineNum":"  537","line":"            secp256k1_fe_normalize_var(&(state->prej[(np - 1) * ECMULT_TABLE_SIZE(WINDOW_A) + ECMULT_TABLE_SIZE(WINDOW_A) - 1].z));"},
{"lineNum":"  538","line":"#endif"},
{"lineNum":"  539","line":"            secp256k1_gej_rescale(&tmp, &(state->prej[(np - 1) * ECMULT_TABLE_SIZE(WINDOW_A) + ECMULT_TABLE_SIZE(WINDOW_A) - 1].z));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  540","line":"            secp256k1_ecmult_odd_multiples_table(ECMULT_TABLE_SIZE(WINDOW_A), state->prej + np * ECMULT_TABLE_SIZE(WINDOW_A), state->zr + np * ECMULT_TABLE_SIZE(WINDOW_A), &tmp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  541","line":"            secp256k1_fe_mul(state->zr + np * ECMULT_TABLE_SIZE(WINDOW_A), state->zr + np * ECMULT_TABLE_SIZE(WINDOW_A), &(a[state->ps[np].input_pos].z));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  542","line":"        }"},
{"lineNum":"  543","line":"        /* Bring them to the same Z denominator. */"},
{"lineNum":"  544","line":"        secp256k1_ge_globalz_set_table_gej(ECMULT_TABLE_SIZE(WINDOW_A) * no, state->pre_a, &Z, state->prej, state->zr);","class":"lineCov","hits":"1","order":"5152","possible_hits":"1",},
{"lineNum":"  545","line":"    } else {"},
{"lineNum":"  546","line":"        secp256k1_fe_set_int(&Z, 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  547","line":"    }"},
{"lineNum":"  548","line":""},
{"lineNum":"  549","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  550","line":"    for (np = 0; np < no; ++np) {"},
{"lineNum":"  551","line":"        for (i = 0; i < ECMULT_TABLE_SIZE(WINDOW_A); i++) {"},
{"lineNum":"  552","line":"            secp256k1_ge_mul_lambda(&state->pre_a_lam[np * ECMULT_TABLE_SIZE(WINDOW_A) + i], &state->pre_a[np * ECMULT_TABLE_SIZE(WINDOW_A) + i]);"},
{"lineNum":"  553","line":"        }"},
{"lineNum":"  554","line":"    }"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"    if (ng) {"},
{"lineNum":"  557","line":"        /* split ng into ng_1 and ng_128 (where gn = gn_1 + gn_128*2^128, and gn_1 and gn_128 are ~128 bit) */"},
{"lineNum":"  558","line":"        secp256k1_scalar_split_128(&ng_1, &ng_128, ng);"},
{"lineNum":"  559","line":""},
{"lineNum":"  560","line":"        /* Build wnaf representation for ng_1 and ng_128 */"},
{"lineNum":"  561","line":"        bits_ng_1   = secp256k1_ecmult_wnaf(wnaf_ng_1,   129, &ng_1,   WINDOW_G);"},
{"lineNum":"  562","line":"        bits_ng_128 = secp256k1_ecmult_wnaf(wnaf_ng_128, 129, &ng_128, WINDOW_G);"},
{"lineNum":"  563","line":"        if (bits_ng_1 > bits) {"},
{"lineNum":"  564","line":"            bits = bits_ng_1;"},
{"lineNum":"  565","line":"        }"},
{"lineNum":"  566","line":"        if (bits_ng_128 > bits) {"},
{"lineNum":"  567","line":"            bits = bits_ng_128;"},
{"lineNum":"  568","line":"        }"},
{"lineNum":"  569","line":"    }"},
{"lineNum":"  570","line":"#else"},
{"lineNum":"  571","line":"    if (ng) {","class":"lineCov","hits":"1","order":"5168","possible_hits":"1",},
{"lineNum":"  572","line":"        bits_ng     = secp256k1_ecmult_wnaf(wnaf_ng,     256, ng,      WINDOW_G);","class":"lineCov","hits":"1","order":"5169","possible_hits":"1",},
{"lineNum":"  573","line":"        if (bits_ng > bits) {","class":"lineCov","hits":"1","order":"5170","possible_hits":"1",},
{"lineNum":"  574","line":"            bits = bits_ng;","class":"lineCov","hits":"1","order":"5384","possible_hits":"1",},
{"lineNum":"  575","line":"        }"},
{"lineNum":"  576","line":"    }"},
{"lineNum":"  577","line":"#endif"},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"    secp256k1_gej_set_infinity(r);","class":"lineCov","hits":"1","order":"5171","possible_hits":"1",},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"    for (i = bits - 1; i >= 0; i--) {","class":"lineCov","hits":"2","order":"5178","possible_hits":"2",},
{"lineNum":"  582","line":"        int n;"},
{"lineNum":"  583","line":"        secp256k1_gej_double_var(r, r, NULL);","class":"lineCov","hits":"1","order":"5179","possible_hits":"1",},
{"lineNum":"  584","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  585","line":"        for (np = 0; np < no; ++np) {"},
{"lineNum":"  586","line":"            if (i < state->ps[np].bits_na_1 && (n = state->ps[np].wnaf_na_1[i])) {"},
{"lineNum":"  587","line":"                ECMULT_TABLE_GET_GE(&tmpa, state->pre_a + np * ECMULT_TABLE_SIZE(WINDOW_A), n, WINDOW_A);"},
{"lineNum":"  588","line":"                secp256k1_gej_add_ge_var(r, r, &tmpa, NULL);"},
{"lineNum":"  589","line":"            }"},
{"lineNum":"  590","line":"            if (i < state->ps[np].bits_na_lam && (n = state->ps[np].wnaf_na_lam[i])) {"},
{"lineNum":"  591","line":"                ECMULT_TABLE_GET_GE(&tmpa, state->pre_a_lam + np * ECMULT_TABLE_SIZE(WINDOW_A), n, WINDOW_A);"},
{"lineNum":"  592","line":"                secp256k1_gej_add_ge_var(r, r, &tmpa, NULL);"},
{"lineNum":"  593","line":"            }"},
{"lineNum":"  594","line":"        }"},
{"lineNum":"  595","line":"        if (i < bits_ng_1 && (n = wnaf_ng_1[i])) {"},
{"lineNum":"  596","line":"            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, *ctx->pre_g, n, WINDOW_G);"},
{"lineNum":"  597","line":"            secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);"},
{"lineNum":"  598","line":"        }"},
{"lineNum":"  599","line":"        if (i < bits_ng_128 && (n = wnaf_ng_128[i])) {"},
{"lineNum":"  600","line":"            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, *ctx->pre_g_128, n, WINDOW_G);"},
{"lineNum":"  601","line":"            secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);"},
{"lineNum":"  602","line":"        }"},
{"lineNum":"  603","line":"#else"},
{"lineNum":"  604","line":"        for (np = 0; np < no; ++np) {","class":"lineCov","hits":"2","order":"5182","possible_hits":"2",},
{"lineNum":"  605","line":"            if (i < state->ps[np].bits_na && (n = state->ps[np].wnaf_na[i])) {","class":"lineCov","hits":"1","order":"5183","possible_hits":"1",},
{"lineNum":"  606","line":"                ECMULT_TABLE_GET_GE(&tmpa, state->pre_a + np * ECMULT_TABLE_SIZE(WINDOW_A), n, WINDOW_A);","class":"lineCov","hits":"1","order":"5184","possible_hits":"1",},
{"lineNum":"  607","line":"                secp256k1_gej_add_ge_var(r, r, &tmpa, NULL);","class":"lineCov","hits":"1","order":"5185","possible_hits":"1",},
{"lineNum":"  608","line":"            }"},
{"lineNum":"  609","line":"        }"},
{"lineNum":"  610","line":"        if (i < bits_ng && (n = wnaf_ng[i])) {","class":"lineCov","hits":"1","order":"5188","possible_hits":"1",},
{"lineNum":"  611","line":"            ECMULT_TABLE_GET_GE_STORAGE(&tmpa, *ctx->pre_g, n, WINDOW_G);","class":"lineCov","hits":"1","order":"5189","possible_hits":"1",},
{"lineNum":"  612","line":"            secp256k1_gej_add_zinv_var(r, r, &tmpa, &Z);","class":"lineCov","hits":"1","order":"5190","possible_hits":"1",},
{"lineNum":"  613","line":"        }"},
{"lineNum":"  614","line":"#endif"},
{"lineNum":"  615","line":"    }"},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"    if (!r->infinity) {","class":"lineCov","hits":"1","order":"5214","possible_hits":"1",},
{"lineNum":"  618","line":"        secp256k1_fe_mul(&r->z, &r->z, &Z);","class":"lineCov","hits":"1","order":"5215","possible_hits":"1",},
{"lineNum":"  619","line":"    }"},
{"lineNum":"  620","line":"}","class":"linePartCov","hits":"1","order":"5216","possible_hits":"2",},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"static void secp256k1_ecmult(const secp256k1_ecmult_context *ctx, secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng) {","class":"lineCov","hits":"2","order":"5082","possible_hits":"2",},
{"lineNum":"  623","line":"    secp256k1_gej prej[ECMULT_TABLE_SIZE(WINDOW_A)];"},
{"lineNum":"  624","line":"    secp256k1_fe zr[ECMULT_TABLE_SIZE(WINDOW_A)];"},
{"lineNum":"  625","line":"    secp256k1_ge pre_a[ECMULT_TABLE_SIZE(WINDOW_A)];"},
{"lineNum":"  626","line":"    struct secp256k1_strauss_point_state ps[1];"},
{"lineNum":"  627","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  628","line":"    secp256k1_ge pre_a_lam[ECMULT_TABLE_SIZE(WINDOW_A)];"},
{"lineNum":"  629","line":"#endif"},
{"lineNum":"  630","line":"    struct secp256k1_strauss_state state;"},
{"lineNum":"  631","line":""},
{"lineNum":"  632","line":"    state.prej = prej;","class":"lineCov","hits":"1","order":"5083","possible_hits":"1",},
{"lineNum":"  633","line":"    state.zr = zr;","class":"lineCov","hits":"1","order":"5084","possible_hits":"1",},
{"lineNum":"  634","line":"    state.pre_a = pre_a;","class":"lineCov","hits":"1","order":"5085","possible_hits":"1",},
{"lineNum":"  635","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  636","line":"    state.pre_a_lam = pre_a_lam;"},
{"lineNum":"  637","line":"#endif"},
{"lineNum":"  638","line":"    state.ps = ps;","class":"lineCov","hits":"1","order":"5086","possible_hits":"1",},
{"lineNum":"  639","line":"    secp256k1_ecmult_strauss_wnaf(ctx, &state, r, 1, a, na, ng);","class":"lineCov","hits":"1","order":"5087","possible_hits":"1",},
{"lineNum":"  640","line":"}","class":"linePartCov","hits":"1","order":"5217","possible_hits":"2",},
{"lineNum":"  641","line":""},
{"lineNum":"  642","line":"static size_t secp256k1_strauss_scratch_size(size_t n_points) {"},
{"lineNum":"  643","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  644","line":"    static const size_t point_size = (2 * sizeof(secp256k1_ge) + sizeof(secp256k1_gej) + sizeof(secp256k1_fe)) * ECMULT_TABLE_SIZE(WINDOW_A) + sizeof(struct secp256k1_strauss_point_state) + sizeof(secp256k1_gej) + sizeof(secp256k1_scalar);"},
{"lineNum":"  645","line":"#else"},
{"lineNum":"  646","line":"    static const size_t point_size = (sizeof(secp256k1_ge) + sizeof(secp256k1_gej) + sizeof(secp256k1_fe)) * ECMULT_TABLE_SIZE(WINDOW_A) + sizeof(struct secp256k1_strauss_point_state) + sizeof(secp256k1_gej) + sizeof(secp256k1_scalar);"},
{"lineNum":"  647","line":"#endif"},
{"lineNum":"  648","line":"    return n_points*point_size;"},
{"lineNum":"  649","line":"}"},
{"lineNum":"  650","line":""},
{"lineNum":"  651","line":"static int secp256k1_ecmult_strauss_batch(const secp256k1_callback* error_callback, const secp256k1_ecmult_context *ctx, secp256k1_scratch *scratch, secp256k1_gej *r, const secp256k1_scalar *inp_g_sc, secp256k1_ecmult_multi_callback cb, void *cbdata, size_t n_points, size_t cb_offset) {"},
{"lineNum":"  652","line":"    secp256k1_gej* points;"},
{"lineNum":"  653","line":"    secp256k1_scalar* scalars;"},
{"lineNum":"  654","line":"    struct secp256k1_strauss_state state;"},
{"lineNum":"  655","line":"    size_t i;"},
{"lineNum":"  656","line":"    const size_t scratch_checkpoint = secp256k1_scratch_checkpoint(error_callback, scratch);"},
{"lineNum":"  657","line":""},
{"lineNum":"  658","line":"    secp256k1_gej_set_infinity(r);"},
{"lineNum":"  659","line":"    if (inp_g_sc == NULL && n_points == 0) {"},
{"lineNum":"  660","line":"        return 1;"},
{"lineNum":"  661","line":"    }"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"    points = (secp256k1_gej*)secp256k1_scratch_alloc(error_callback, scratch, n_points * sizeof(secp256k1_gej));"},
{"lineNum":"  664","line":"    scalars = (secp256k1_scalar*)secp256k1_scratch_alloc(error_callback, scratch, n_points * sizeof(secp256k1_scalar));"},
{"lineNum":"  665","line":"    state.prej = (secp256k1_gej*)secp256k1_scratch_alloc(error_callback, scratch, n_points * ECMULT_TABLE_SIZE(WINDOW_A) * sizeof(secp256k1_gej));"},
{"lineNum":"  666","line":"    state.zr = (secp256k1_fe*)secp256k1_scratch_alloc(error_callback, scratch, n_points * ECMULT_TABLE_SIZE(WINDOW_A) * sizeof(secp256k1_fe));"},
{"lineNum":"  667","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  668","line":"    state.pre_a = (secp256k1_ge*)secp256k1_scratch_alloc(error_callback, scratch, n_points * 2 * ECMULT_TABLE_SIZE(WINDOW_A) * sizeof(secp256k1_ge));"},
{"lineNum":"  669","line":"    state.pre_a_lam = state.pre_a + n_points * ECMULT_TABLE_SIZE(WINDOW_A);"},
{"lineNum":"  670","line":"#else"},
{"lineNum":"  671","line":"    state.pre_a = (secp256k1_ge*)secp256k1_scratch_alloc(error_callback, scratch, n_points * ECMULT_TABLE_SIZE(WINDOW_A) * sizeof(secp256k1_ge));"},
{"lineNum":"  672","line":"#endif"},
{"lineNum":"  673","line":"    state.ps = (struct secp256k1_strauss_point_state*)secp256k1_scratch_alloc(error_callback, scratch, n_points * sizeof(struct secp256k1_strauss_point_state));"},
{"lineNum":"  674","line":""},
{"lineNum":"  675","line":"    if (points == NULL || scalars == NULL || state.prej == NULL || state.zr == NULL || state.pre_a == NULL) {"},
{"lineNum":"  676","line":"        secp256k1_scratch_apply_checkpoint(error_callback, scratch, scratch_checkpoint);"},
{"lineNum":"  677","line":"        return 0;"},
{"lineNum":"  678","line":"    }"},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"    for (i = 0; i < n_points; i++) {"},
{"lineNum":"  681","line":"        secp256k1_ge point;"},
{"lineNum":"  682","line":"        if (!cb(&scalars[i], &point, i+cb_offset, cbdata)) {"},
{"lineNum":"  683","line":"            secp256k1_scratch_apply_checkpoint(error_callback, scratch, scratch_checkpoint);"},
{"lineNum":"  684","line":"            return 0;"},
{"lineNum":"  685","line":"        }"},
{"lineNum":"  686","line":"        secp256k1_gej_set_ge(&points[i], &point);"},
{"lineNum":"  687","line":"    }"},
{"lineNum":"  688","line":"    secp256k1_ecmult_strauss_wnaf(ctx, &state, r, n_points, points, scalars, inp_g_sc);"},
{"lineNum":"  689","line":"    secp256k1_scratch_apply_checkpoint(error_callback, scratch, scratch_checkpoint);"},
{"lineNum":"  690","line":"    return 1;"},
{"lineNum":"  691","line":"}"},
{"lineNum":"  692","line":""},
{"lineNum":"  693","line":"/* Wrapper for secp256k1_ecmult_multi_func interface */"},
{"lineNum":"  694","line":"static int secp256k1_ecmult_strauss_batch_single(const secp256k1_callback* error_callback, const secp256k1_ecmult_context *actx, secp256k1_scratch *scratch, secp256k1_gej *r, const secp256k1_scalar *inp_g_sc, secp256k1_ecmult_multi_callback cb, void *cbdata, size_t n) {"},
{"lineNum":"  695","line":"    return secp256k1_ecmult_strauss_batch(error_callback, actx, scratch, r, inp_g_sc, cb, cbdata, n, 0);"},
{"lineNum":"  696","line":"}"},
{"lineNum":"  697","line":""},
{"lineNum":"  698","line":"static size_t secp256k1_strauss_max_points(const secp256k1_callback* error_callback, secp256k1_scratch *scratch) {"},
{"lineNum":"  699","line":"    return secp256k1_scratch_max_allocation(error_callback, scratch, STRAUSS_SCRATCH_OBJECTS) / secp256k1_strauss_scratch_size(1);"},
{"lineNum":"  700","line":"}"},
{"lineNum":"  701","line":""},
{"lineNum":"  702","line":"/** Convert a number to WNAF notation."},
{"lineNum":"  703","line":" *  The number becomes represented by sum(2^{wi} * wnaf[i], i=0..WNAF_SIZE(w)+1) - return_val."},
{"lineNum":"  704","line":" *  It has the following guarantees:"},
{"lineNum":"  705","line":" *  - each wnaf[i] is either 0 or an odd integer between -(1 << w) and (1 << w)"},
{"lineNum":"  706","line":" *  - the number of words set is always WNAF_SIZE(w)"},
{"lineNum":"  707","line":" *  - the returned skew is 0 or 1"},
{"lineNum":"  708","line":" */"},
{"lineNum":"  709","line":"static int secp256k1_wnaf_fixed(int *wnaf, const secp256k1_scalar *s, int w) {"},
{"lineNum":"  710","line":"    int skew = 0;"},
{"lineNum":"  711","line":"    int pos;"},
{"lineNum":"  712","line":"    int max_pos;"},
{"lineNum":"  713","line":"    int last_w;"},
{"lineNum":"  714","line":"    const secp256k1_scalar *work = s;"},
{"lineNum":"  715","line":""},
{"lineNum":"  716","line":"    if (secp256k1_scalar_is_zero(s)) {"},
{"lineNum":"  717","line":"        for (pos = 0; pos < WNAF_SIZE(w); pos++) {"},
{"lineNum":"  718","line":"            wnaf[pos] = 0;"},
{"lineNum":"  719","line":"        }"},
{"lineNum":"  720","line":"        return 0;"},
{"lineNum":"  721","line":"    }"},
{"lineNum":"  722","line":""},
{"lineNum":"  723","line":"    if (secp256k1_scalar_is_even(s)) {"},
{"lineNum":"  724","line":"        skew = 1;"},
{"lineNum":"  725","line":"    }"},
{"lineNum":"  726","line":""},
{"lineNum":"  727","line":"    wnaf[0] = secp256k1_scalar_get_bits_var(work, 0, w) + skew;"},
{"lineNum":"  728","line":"    /* Compute last window size. Relevant when window size doesn\'t divide the"},
{"lineNum":"  729","line":"     * number of bits in the scalar */"},
{"lineNum":"  730","line":"    last_w = WNAF_BITS - (WNAF_SIZE(w) - 1) * w;"},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"    /* Store the position of the first nonzero word in max_pos to allow"},
{"lineNum":"  733","line":"     * skipping leading zeros when calculating the wnaf. */"},
{"lineNum":"  734","line":"    for (pos = WNAF_SIZE(w) - 1; pos > 0; pos--) {"},
{"lineNum":"  735","line":"        int val = secp256k1_scalar_get_bits_var(work, pos * w, pos == WNAF_SIZE(w)-1 ? last_w : w);"},
{"lineNum":"  736","line":"        if(val != 0) {"},
{"lineNum":"  737","line":"            break;"},
{"lineNum":"  738","line":"        }"},
{"lineNum":"  739","line":"        wnaf[pos] = 0;"},
{"lineNum":"  740","line":"    }"},
{"lineNum":"  741","line":"    max_pos = pos;"},
{"lineNum":"  742","line":"    pos = 1;"},
{"lineNum":"  743","line":""},
{"lineNum":"  744","line":"    while (pos <= max_pos) {"},
{"lineNum":"  745","line":"        int val = secp256k1_scalar_get_bits_var(work, pos * w, pos == WNAF_SIZE(w)-1 ? last_w : w);"},
{"lineNum":"  746","line":"        if ((val & 1) == 0) {"},
{"lineNum":"  747","line":"            wnaf[pos - 1] -= (1 << w);"},
{"lineNum":"  748","line":"            wnaf[pos] = (val + 1);"},
{"lineNum":"  749","line":"        } else {"},
{"lineNum":"  750","line":"            wnaf[pos] = val;"},
{"lineNum":"  751","line":"        }"},
{"lineNum":"  752","line":"        /* Set a coefficient to zero if it is 1 or -1 and the proceeding digit"},
{"lineNum":"  753","line":"         * is strictly negative or strictly positive respectively. Only change"},
{"lineNum":"  754","line":"         * coefficients at previous positions because above code assumes that"},
{"lineNum":"  755","line":"         * wnaf[pos - 1] is odd."},
{"lineNum":"  756","line":"         */"},
{"lineNum":"  757","line":"        if (pos >= 2 && ((wnaf[pos - 1] == 1 && wnaf[pos - 2] < 0) || (wnaf[pos - 1] == -1 && wnaf[pos - 2] > 0))) {"},
{"lineNum":"  758","line":"            if (wnaf[pos - 1] == 1) {"},
{"lineNum":"  759","line":"                wnaf[pos - 2] += 1 << w;"},
{"lineNum":"  760","line":"            } else {"},
{"lineNum":"  761","line":"                wnaf[pos - 2] -= 1 << w;"},
{"lineNum":"  762","line":"            }"},
{"lineNum":"  763","line":"            wnaf[pos - 1] = 0;"},
{"lineNum":"  764","line":"        }"},
{"lineNum":"  765","line":"        ++pos;"},
{"lineNum":"  766","line":"    }"},
{"lineNum":"  767","line":""},
{"lineNum":"  768","line":"    return skew;"},
{"lineNum":"  769","line":"}"},
{"lineNum":"  770","line":""},
{"lineNum":"  771","line":"struct secp256k1_pippenger_point_state {"},
{"lineNum":"  772","line":"    int skew_na;"},
{"lineNum":"  773","line":"    size_t input_pos;"},
{"lineNum":"  774","line":"};"},
{"lineNum":"  775","line":""},
{"lineNum":"  776","line":"struct secp256k1_pippenger_state {"},
{"lineNum":"  777","line":"    int *wnaf_na;"},
{"lineNum":"  778","line":"    struct secp256k1_pippenger_point_state* ps;"},
{"lineNum":"  779","line":"};"},
{"lineNum":"  780","line":""},
{"lineNum":"  781","line":"/*"},
{"lineNum":"  782","line":" * pippenger_wnaf computes the result of a multi-point multiplication as"},
{"lineNum":"  783","line":" * follows: The scalars are brought into wnaf with n_wnaf elements each. Then"},
{"lineNum":"  784","line":" * for every i < n_wnaf, first each point is added to a \"bucket\" corresponding"},
{"lineNum":"  785","line":" * to the point\'s wnaf[i]. Second, the buckets are added together such that"},
{"lineNum":"  786","line":" * r += 1*bucket[0] + 3*bucket[1] + 5*bucket[2] + ..."},
{"lineNum":"  787","line":" */"},
{"lineNum":"  788","line":"static int secp256k1_ecmult_pippenger_wnaf(secp256k1_gej *buckets, int bucket_window, struct secp256k1_pippenger_state *state, secp256k1_gej *r, const secp256k1_scalar *sc, const secp256k1_ge *pt, size_t num) {"},
{"lineNum":"  789","line":"    size_t n_wnaf = WNAF_SIZE(bucket_window+1);"},
{"lineNum":"  790","line":"    size_t np;"},
{"lineNum":"  791","line":"    size_t no = 0;"},
{"lineNum":"  792","line":"    int i;"},
{"lineNum":"  793","line":"    int j;"},
{"lineNum":"  794","line":""},
{"lineNum":"  795","line":"    for (np = 0; np < num; ++np) {"},
{"lineNum":"  796","line":"        if (secp256k1_scalar_is_zero(&sc[np]) || secp256k1_ge_is_infinity(&pt[np])) {"},
{"lineNum":"  797","line":"            continue;"},
{"lineNum":"  798","line":"        }"},
{"lineNum":"  799","line":"        state->ps[no].input_pos = np;"},
{"lineNum":"  800","line":"        state->ps[no].skew_na = secp256k1_wnaf_fixed(&state->wnaf_na[no*n_wnaf], &sc[np], bucket_window+1);"},
{"lineNum":"  801","line":"        no++;"},
{"lineNum":"  802","line":"    }"},
{"lineNum":"  803","line":"    secp256k1_gej_set_infinity(r);"},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"    if (no == 0) {"},
{"lineNum":"  806","line":"        return 1;"},
{"lineNum":"  807","line":"    }"},
{"lineNum":"  808","line":""},
{"lineNum":"  809","line":"    for (i = n_wnaf - 1; i >= 0; i--) {"},
{"lineNum":"  810","line":"        secp256k1_gej running_sum;"},
{"lineNum":"  811","line":""},
{"lineNum":"  812","line":"        for(j = 0; j < ECMULT_TABLE_SIZE(bucket_window+2); j++) {"},
{"lineNum":"  813","line":"            secp256k1_gej_set_infinity(&buckets[j]);"},
{"lineNum":"  814","line":"        }"},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"        for (np = 0; np < no; ++np) {"},
{"lineNum":"  817","line":"            int n = state->wnaf_na[np*n_wnaf + i];"},
{"lineNum":"  818","line":"            struct secp256k1_pippenger_point_state point_state = state->ps[np];"},
{"lineNum":"  819","line":"            secp256k1_ge tmp;"},
{"lineNum":"  820","line":"            int idx;"},
{"lineNum":"  821","line":""},
{"lineNum":"  822","line":"            if (i == 0) {"},
{"lineNum":"  823","line":"                /* correct for wnaf skew */"},
{"lineNum":"  824","line":"                int skew = point_state.skew_na;"},
{"lineNum":"  825","line":"                if (skew) {"},
{"lineNum":"  826","line":"                    secp256k1_ge_neg(&tmp, &pt[point_state.input_pos]);"},
{"lineNum":"  827","line":"                    secp256k1_gej_add_ge_var(&buckets[0], &buckets[0], &tmp, NULL);"},
{"lineNum":"  828","line":"                }"},
{"lineNum":"  829","line":"            }"},
{"lineNum":"  830","line":"            if (n > 0) {"},
{"lineNum":"  831","line":"                idx = (n - 1)/2;"},
{"lineNum":"  832","line":"                secp256k1_gej_add_ge_var(&buckets[idx], &buckets[idx], &pt[point_state.input_pos], NULL);"},
{"lineNum":"  833","line":"            } else if (n < 0) {"},
{"lineNum":"  834","line":"                idx = -(n + 1)/2;"},
{"lineNum":"  835","line":"                secp256k1_ge_neg(&tmp, &pt[point_state.input_pos]);"},
{"lineNum":"  836","line":"                secp256k1_gej_add_ge_var(&buckets[idx], &buckets[idx], &tmp, NULL);"},
{"lineNum":"  837","line":"            }"},
{"lineNum":"  838","line":"        }"},
{"lineNum":"  839","line":""},
{"lineNum":"  840","line":"        for(j = 0; j < bucket_window; j++) {"},
{"lineNum":"  841","line":"            secp256k1_gej_double_var(r, r, NULL);"},
{"lineNum":"  842","line":"        }"},
{"lineNum":"  843","line":""},
{"lineNum":"  844","line":"        secp256k1_gej_set_infinity(&running_sum);"},
{"lineNum":"  845","line":"        /* Accumulate the sum: bucket[0] + 3*bucket[1] + 5*bucket[2] + 7*bucket[3] + ..."},
{"lineNum":"  846","line":"         *                   = bucket[0] +   bucket[1] +   bucket[2] +   bucket[3] + ..."},
{"lineNum":"  847","line":"         *                   +         2 *  (bucket[1] + 2*bucket[2] + 3*bucket[3] + ...)"},
{"lineNum":"  848","line":"         * using an intermediate running sum:"},
{"lineNum":"  849","line":"         * running_sum = bucket[0] +   bucket[1] +   bucket[2] + ..."},
{"lineNum":"  850","line":"         *"},
{"lineNum":"  851","line":"         * The doubling is done implicitly by deferring the final window doubling (of \'r\')."},
{"lineNum":"  852","line":"         */"},
{"lineNum":"  853","line":"        for(j = ECMULT_TABLE_SIZE(bucket_window+2) - 1; j > 0; j--) {"},
{"lineNum":"  854","line":"            secp256k1_gej_add_var(&running_sum, &running_sum, &buckets[j], NULL);"},
{"lineNum":"  855","line":"            secp256k1_gej_add_var(r, r, &running_sum, NULL);"},
{"lineNum":"  856","line":"        }"},
{"lineNum":"  857","line":""},
{"lineNum":"  858","line":"        secp256k1_gej_add_var(&running_sum, &running_sum, &buckets[0], NULL);"},
{"lineNum":"  859","line":"        secp256k1_gej_double_var(r, r, NULL);"},
{"lineNum":"  860","line":"        secp256k1_gej_add_var(r, r, &running_sum, NULL);"},
{"lineNum":"  861","line":"    }"},
{"lineNum":"  862","line":"    return 1;"},
{"lineNum":"  863","line":"}"},
{"lineNum":"  864","line":""},
{"lineNum":"  865","line":"/**"},
{"lineNum":"  866","line":" * Returns optimal bucket_window (number of bits of a scalar represented by a"},
{"lineNum":"  867","line":" * set of buckets) for a given number of points."},
{"lineNum":"  868","line":" */"},
{"lineNum":"  869","line":"static int secp256k1_pippenger_bucket_window(size_t n) {"},
{"lineNum":"  870","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  871","line":"    if (n <= 1) {"},
{"lineNum":"  872","line":"        return 1;"},
{"lineNum":"  873","line":"    } else if (n <= 4) {"},
{"lineNum":"  874","line":"        return 2;"},
{"lineNum":"  875","line":"    } else if (n <= 20) {"},
{"lineNum":"  876","line":"        return 3;"},
{"lineNum":"  877","line":"    } else if (n <= 57) {"},
{"lineNum":"  878","line":"        return 4;"},
{"lineNum":"  879","line":"    } else if (n <= 136) {"},
{"lineNum":"  880","line":"        return 5;"},
{"lineNum":"  881","line":"    } else if (n <= 235) {"},
{"lineNum":"  882","line":"        return 6;"},
{"lineNum":"  883","line":"    } else if (n <= 1260) {"},
{"lineNum":"  884","line":"        return 7;"},
{"lineNum":"  885","line":"    } else if (n <= 4420) {"},
{"lineNum":"  886","line":"        return 9;"},
{"lineNum":"  887","line":"    } else if (n <= 7880) {"},
{"lineNum":"  888","line":"        return 10;"},
{"lineNum":"  889","line":"    } else if (n <= 16050) {"},
{"lineNum":"  890","line":"        return 11;"},
{"lineNum":"  891","line":"    } else {"},
{"lineNum":"  892","line":"        return PIPPENGER_MAX_BUCKET_WINDOW;"},
{"lineNum":"  893","line":"    }"},
{"lineNum":"  894","line":"#else"},
{"lineNum":"  895","line":"    if (n <= 1) {"},
{"lineNum":"  896","line":"        return 1;"},
{"lineNum":"  897","line":"    } else if (n <= 11) {"},
{"lineNum":"  898","line":"        return 2;"},
{"lineNum":"  899","line":"    } else if (n <= 45) {"},
{"lineNum":"  900","line":"        return 3;"},
{"lineNum":"  901","line":"    } else if (n <= 100) {"},
{"lineNum":"  902","line":"        return 4;"},
{"lineNum":"  903","line":"    } else if (n <= 275) {"},
{"lineNum":"  904","line":"        return 5;"},
{"lineNum":"  905","line":"    } else if (n <= 625) {"},
{"lineNum":"  906","line":"        return 6;"},
{"lineNum":"  907","line":"    } else if (n <= 1850) {"},
{"lineNum":"  908","line":"        return 7;"},
{"lineNum":"  909","line":"    } else if (n <= 3400) {"},
{"lineNum":"  910","line":"        return 8;"},
{"lineNum":"  911","line":"    } else if (n <= 9630) {"},
{"lineNum":"  912","line":"        return 9;"},
{"lineNum":"  913","line":"    } else if (n <= 17900) {"},
{"lineNum":"  914","line":"        return 10;"},
{"lineNum":"  915","line":"    } else if (n <= 32800) {"},
{"lineNum":"  916","line":"        return 11;"},
{"lineNum":"  917","line":"    } else {"},
{"lineNum":"  918","line":"        return PIPPENGER_MAX_BUCKET_WINDOW;"},
{"lineNum":"  919","line":"    }"},
{"lineNum":"  920","line":"#endif"},
{"lineNum":"  921","line":"}"},
{"lineNum":"  922","line":""},
{"lineNum":"  923","line":"/**"},
{"lineNum":"  924","line":" * Returns the maximum optimal number of points for a bucket_window."},
{"lineNum":"  925","line":" */"},
{"lineNum":"  926","line":"static size_t secp256k1_pippenger_bucket_window_inv(int bucket_window) {"},
{"lineNum":"  927","line":"    switch(bucket_window) {"},
{"lineNum":"  928","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  929","line":"        case 1: return 1;"},
{"lineNum":"  930","line":"        case 2: return 4;"},
{"lineNum":"  931","line":"        case 3: return 20;"},
{"lineNum":"  932","line":"        case 4: return 57;"},
{"lineNum":"  933","line":"        case 5: return 136;"},
{"lineNum":"  934","line":"        case 6: return 235;"},
{"lineNum":"  935","line":"        case 7: return 1260;"},
{"lineNum":"  936","line":"        case 8: return 1260;"},
{"lineNum":"  937","line":"        case 9: return 4420;"},
{"lineNum":"  938","line":"        case 10: return 7880;"},
{"lineNum":"  939","line":"        case 11: return 16050;"},
{"lineNum":"  940","line":"        case PIPPENGER_MAX_BUCKET_WINDOW: return SIZE_MAX;"},
{"lineNum":"  941","line":"#else"},
{"lineNum":"  942","line":"        case 1: return 1;"},
{"lineNum":"  943","line":"        case 2: return 11;"},
{"lineNum":"  944","line":"        case 3: return 45;"},
{"lineNum":"  945","line":"        case 4: return 100;"},
{"lineNum":"  946","line":"        case 5: return 275;"},
{"lineNum":"  947","line":"        case 6: return 625;"},
{"lineNum":"  948","line":"        case 7: return 1850;"},
{"lineNum":"  949","line":"        case 8: return 3400;"},
{"lineNum":"  950","line":"        case 9: return 9630;"},
{"lineNum":"  951","line":"        case 10: return 17900;"},
{"lineNum":"  952","line":"        case 11: return 32800;"},
{"lineNum":"  953","line":"        case PIPPENGER_MAX_BUCKET_WINDOW: return SIZE_MAX;"},
{"lineNum":"  954","line":"#endif"},
{"lineNum":"  955","line":"    }"},
{"lineNum":"  956","line":"    return 0;"},
{"lineNum":"  957","line":"}"},
{"lineNum":"  958","line":""},
{"lineNum":"  959","line":""},
{"lineNum":"  960","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  961","line":"SECP256K1_INLINE static void secp256k1_ecmult_endo_split(secp256k1_scalar *s1, secp256k1_scalar *s2, secp256k1_ge *p1, secp256k1_ge *p2) {"},
{"lineNum":"  962","line":"    secp256k1_scalar tmp = *s1;"},
{"lineNum":"  963","line":"    secp256k1_scalar_split_lambda(s1, s2, &tmp);"},
{"lineNum":"  964","line":"    secp256k1_ge_mul_lambda(p2, p1);"},
{"lineNum":"  965","line":""},
{"lineNum":"  966","line":"    if (secp256k1_scalar_is_high(s1)) {"},
{"lineNum":"  967","line":"        secp256k1_scalar_negate(s1, s1);"},
{"lineNum":"  968","line":"        secp256k1_ge_neg(p1, p1);"},
{"lineNum":"  969","line":"    }"},
{"lineNum":"  970","line":"    if (secp256k1_scalar_is_high(s2)) {"},
{"lineNum":"  971","line":"        secp256k1_scalar_negate(s2, s2);"},
{"lineNum":"  972","line":"        secp256k1_ge_neg(p2, p2);"},
{"lineNum":"  973","line":"    }"},
{"lineNum":"  974","line":"}"},
{"lineNum":"  975","line":"#endif"},
{"lineNum":"  976","line":""},
{"lineNum":"  977","line":"/**"},
{"lineNum":"  978","line":" * Returns the scratch size required for a given number of points (excluding"},
{"lineNum":"  979","line":" * base point G) without considering alignment."},
{"lineNum":"  980","line":" */"},
{"lineNum":"  981","line":"static size_t secp256k1_pippenger_scratch_size(size_t n_points, int bucket_window) {"},
{"lineNum":"  982","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  983","line":"    size_t entries = 2*n_points + 2;"},
{"lineNum":"  984","line":"#else"},
{"lineNum":"  985","line":"    size_t entries = n_points + 1;"},
{"lineNum":"  986","line":"#endif"},
{"lineNum":"  987","line":"    size_t entry_size = sizeof(secp256k1_ge) + sizeof(secp256k1_scalar) + sizeof(struct secp256k1_pippenger_point_state) + (WNAF_SIZE(bucket_window+1)+1)*sizeof(int);"},
{"lineNum":"  988","line":"    return (sizeof(secp256k1_gej) << bucket_window) + sizeof(struct secp256k1_pippenger_state) + entries * entry_size;"},
{"lineNum":"  989","line":"}"},
{"lineNum":"  990","line":""},
{"lineNum":"  991","line":"static int secp256k1_ecmult_pippenger_batch(const secp256k1_callback* error_callback, const secp256k1_ecmult_context *ctx, secp256k1_scratch *scratch, secp256k1_gej *r, const secp256k1_scalar *inp_g_sc, secp256k1_ecmult_multi_callback cb, void *cbdata, size_t n_points, size_t cb_offset) {"},
{"lineNum":"  992","line":"    const size_t scratch_checkpoint = secp256k1_scratch_checkpoint(error_callback, scratch);"},
{"lineNum":"  993","line":"    /* Use 2(n+1) with the endomorphism, n+1 without, when calculating batch"},
{"lineNum":"  994","line":"     * sizes. The reason for +1 is that we add the G scalar to the list of"},
{"lineNum":"  995","line":"     * other scalars. */"},
{"lineNum":"  996","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":"  997","line":"    size_t entries = 2*n_points + 2;"},
{"lineNum":"  998","line":"#else"},
{"lineNum":"  999","line":"    size_t entries = n_points + 1;"},
{"lineNum":" 1000","line":"#endif"},
{"lineNum":" 1001","line":"    secp256k1_ge *points;"},
{"lineNum":" 1002","line":"    secp256k1_scalar *scalars;"},
{"lineNum":" 1003","line":"    secp256k1_gej *buckets;"},
{"lineNum":" 1004","line":"    struct secp256k1_pippenger_state *state_space;"},
{"lineNum":" 1005","line":"    size_t idx = 0;"},
{"lineNum":" 1006","line":"    size_t point_idx = 0;"},
{"lineNum":" 1007","line":"    int i, j;"},
{"lineNum":" 1008","line":"    int bucket_window;"},
{"lineNum":" 1009","line":""},
{"lineNum":" 1010","line":"    (void)ctx;"},
{"lineNum":" 1011","line":"    secp256k1_gej_set_infinity(r);"},
{"lineNum":" 1012","line":"    if (inp_g_sc == NULL && n_points == 0) {"},
{"lineNum":" 1013","line":"        return 1;"},
{"lineNum":" 1014","line":"    }"},
{"lineNum":" 1015","line":""},
{"lineNum":" 1016","line":"    bucket_window = secp256k1_pippenger_bucket_window(n_points);"},
{"lineNum":" 1017","line":"    points = (secp256k1_ge *) secp256k1_scratch_alloc(error_callback, scratch, entries * sizeof(*points));"},
{"lineNum":" 1018","line":"    scalars = (secp256k1_scalar *) secp256k1_scratch_alloc(error_callback, scratch, entries * sizeof(*scalars));"},
{"lineNum":" 1019","line":"    state_space = (struct secp256k1_pippenger_state *) secp256k1_scratch_alloc(error_callback, scratch, sizeof(*state_space));"},
{"lineNum":" 1020","line":"    if (points == NULL || scalars == NULL || state_space == NULL) {"},
{"lineNum":" 1021","line":"        secp256k1_scratch_apply_checkpoint(error_callback, scratch, scratch_checkpoint);"},
{"lineNum":" 1022","line":"        return 0;"},
{"lineNum":" 1023","line":"    }"},
{"lineNum":" 1024","line":""},
{"lineNum":" 1025","line":"    state_space->ps = (struct secp256k1_pippenger_point_state *) secp256k1_scratch_alloc(error_callback, scratch, entries * sizeof(*state_space->ps));"},
{"lineNum":" 1026","line":"    state_space->wnaf_na = (int *) secp256k1_scratch_alloc(error_callback, scratch, entries*(WNAF_SIZE(bucket_window+1)) * sizeof(int));"},
{"lineNum":" 1027","line":"    buckets = (secp256k1_gej *) secp256k1_scratch_alloc(error_callback, scratch, (1<<bucket_window) * sizeof(*buckets));"},
{"lineNum":" 1028","line":"    if (state_space->ps == NULL || state_space->wnaf_na == NULL || buckets == NULL) {"},
{"lineNum":" 1029","line":"        secp256k1_scratch_apply_checkpoint(error_callback, scratch, scratch_checkpoint);"},
{"lineNum":" 1030","line":"        return 0;"},
{"lineNum":" 1031","line":"    }"},
{"lineNum":" 1032","line":""},
{"lineNum":" 1033","line":"    if (inp_g_sc != NULL) {"},
{"lineNum":" 1034","line":"        scalars[0] = *inp_g_sc;"},
{"lineNum":" 1035","line":"        points[0] = secp256k1_ge_const_g;"},
{"lineNum":" 1036","line":"        idx++;"},
{"lineNum":" 1037","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":" 1038","line":"        secp256k1_ecmult_endo_split(&scalars[0], &scalars[1], &points[0], &points[1]);"},
{"lineNum":" 1039","line":"        idx++;"},
{"lineNum":" 1040","line":"#endif"},
{"lineNum":" 1041","line":"    }"},
{"lineNum":" 1042","line":""},
{"lineNum":" 1043","line":"    while (point_idx < n_points) {"},
{"lineNum":" 1044","line":"        if (!cb(&scalars[idx], &points[idx], point_idx + cb_offset, cbdata)) {"},
{"lineNum":" 1045","line":"            secp256k1_scratch_apply_checkpoint(error_callback, scratch, scratch_checkpoint);"},
{"lineNum":" 1046","line":"            return 0;"},
{"lineNum":" 1047","line":"        }"},
{"lineNum":" 1048","line":"        idx++;"},
{"lineNum":" 1049","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":" 1050","line":"        secp256k1_ecmult_endo_split(&scalars[idx - 1], &scalars[idx], &points[idx - 1], &points[idx]);"},
{"lineNum":" 1051","line":"        idx++;"},
{"lineNum":" 1052","line":"#endif"},
{"lineNum":" 1053","line":"        point_idx++;"},
{"lineNum":" 1054","line":"    }"},
{"lineNum":" 1055","line":""},
{"lineNum":" 1056","line":"    secp256k1_ecmult_pippenger_wnaf(buckets, bucket_window, state_space, r, scalars, points, idx);"},
{"lineNum":" 1057","line":""},
{"lineNum":" 1058","line":"    /* Clear data */"},
{"lineNum":" 1059","line":"    for(i = 0; (size_t)i < idx; i++) {"},
{"lineNum":" 1060","line":"        secp256k1_scalar_clear(&scalars[i]);"},
{"lineNum":" 1061","line":"        state_space->ps[i].skew_na = 0;"},
{"lineNum":" 1062","line":"        for(j = 0; j < WNAF_SIZE(bucket_window+1); j++) {"},
{"lineNum":" 1063","line":"            state_space->wnaf_na[i * WNAF_SIZE(bucket_window+1) + j] = 0;"},
{"lineNum":" 1064","line":"        }"},
{"lineNum":" 1065","line":"    }"},
{"lineNum":" 1066","line":"    for(i = 0; i < 1<<bucket_window; i++) {"},
{"lineNum":" 1067","line":"        secp256k1_gej_clear(&buckets[i]);"},
{"lineNum":" 1068","line":"    }"},
{"lineNum":" 1069","line":"    secp256k1_scratch_apply_checkpoint(error_callback, scratch, scratch_checkpoint);"},
{"lineNum":" 1070","line":"    return 1;"},
{"lineNum":" 1071","line":"}"},
{"lineNum":" 1072","line":""},
{"lineNum":" 1073","line":"/* Wrapper for secp256k1_ecmult_multi_func interface */"},
{"lineNum":" 1074","line":"static int secp256k1_ecmult_pippenger_batch_single(const secp256k1_callback* error_callback, const secp256k1_ecmult_context *actx, secp256k1_scratch *scratch, secp256k1_gej *r, const secp256k1_scalar *inp_g_sc, secp256k1_ecmult_multi_callback cb, void *cbdata, size_t n) {"},
{"lineNum":" 1075","line":"    return secp256k1_ecmult_pippenger_batch(error_callback, actx, scratch, r, inp_g_sc, cb, cbdata, n, 0);"},
{"lineNum":" 1076","line":"}"},
{"lineNum":" 1077","line":""},
{"lineNum":" 1078","line":"/**"},
{"lineNum":" 1079","line":" * Returns the maximum number of points in addition to G that can be used with"},
{"lineNum":" 1080","line":" * a given scratch space. The function ensures that fewer points may also be"},
{"lineNum":" 1081","line":" * used."},
{"lineNum":" 1082","line":" */"},
{"lineNum":" 1083","line":"static size_t secp256k1_pippenger_max_points(const secp256k1_callback* error_callback, secp256k1_scratch *scratch) {"},
{"lineNum":" 1084","line":"    size_t max_alloc = secp256k1_scratch_max_allocation(error_callback, scratch, PIPPENGER_SCRATCH_OBJECTS);"},
{"lineNum":" 1085","line":"    int bucket_window;"},
{"lineNum":" 1086","line":"    size_t res = 0;"},
{"lineNum":" 1087","line":""},
{"lineNum":" 1088","line":"    for (bucket_window = 1; bucket_window <= PIPPENGER_MAX_BUCKET_WINDOW; bucket_window++) {"},
{"lineNum":" 1089","line":"        size_t n_points;"},
{"lineNum":" 1090","line":"        size_t max_points = secp256k1_pippenger_bucket_window_inv(bucket_window);"},
{"lineNum":" 1091","line":"        size_t space_for_points;"},
{"lineNum":" 1092","line":"        size_t space_overhead;"},
{"lineNum":" 1093","line":"        size_t entry_size = sizeof(secp256k1_ge) + sizeof(secp256k1_scalar) + sizeof(struct secp256k1_pippenger_point_state) + (WNAF_SIZE(bucket_window+1)+1)*sizeof(int);"},
{"lineNum":" 1094","line":""},
{"lineNum":" 1095","line":"#ifdef USE_ENDOMORPHISM"},
{"lineNum":" 1096","line":"        entry_size = 2*entry_size;"},
{"lineNum":" 1097","line":"#endif"},
{"lineNum":" 1098","line":"        space_overhead = (sizeof(secp256k1_gej) << bucket_window) + entry_size + sizeof(struct secp256k1_pippenger_state);"},
{"lineNum":" 1099","line":"        if (space_overhead > max_alloc) {"},
{"lineNum":" 1100","line":"            break;"},
{"lineNum":" 1101","line":"        }"},
{"lineNum":" 1102","line":"        space_for_points = max_alloc - space_overhead;"},
{"lineNum":" 1103","line":""},
{"lineNum":" 1104","line":"        n_points = space_for_points/entry_size;"},
{"lineNum":" 1105","line":"        n_points = n_points > max_points ? max_points : n_points;"},
{"lineNum":" 1106","line":"        if (n_points > res) {"},
{"lineNum":" 1107","line":"            res = n_points;"},
{"lineNum":" 1108","line":"        }"},
{"lineNum":" 1109","line":"        if (n_points < max_points) {"},
{"lineNum":" 1110","line":"            /* A larger bucket_window may support even more points. But if we"},
{"lineNum":" 1111","line":"             * would choose that then the caller couldn\'t safely use any number"},
{"lineNum":" 1112","line":"             * smaller than what this function returns */"},
{"lineNum":" 1113","line":"            break;"},
{"lineNum":" 1114","line":"        }"},
{"lineNum":" 1115","line":"    }"},
{"lineNum":" 1116","line":"    return res;"},
{"lineNum":" 1117","line":"}"},
{"lineNum":" 1118","line":""},
{"lineNum":" 1119","line":"/* Computes ecmult_multi by simply multiplying and adding each point. Does not"},
{"lineNum":" 1120","line":" * require a scratch space */"},
{"lineNum":" 1121","line":"static int secp256k1_ecmult_multi_simple_var(const secp256k1_ecmult_context *ctx, secp256k1_gej *r, const secp256k1_scalar *inp_g_sc, secp256k1_ecmult_multi_callback cb, void *cbdata, size_t n_points) {"},
{"lineNum":" 1122","line":"    size_t point_idx;"},
{"lineNum":" 1123","line":"    secp256k1_scalar szero;"},
{"lineNum":" 1124","line":"    secp256k1_gej tmpj;"},
{"lineNum":" 1125","line":""},
{"lineNum":" 1126","line":"    secp256k1_scalar_set_int(&szero, 0);"},
{"lineNum":" 1127","line":"    secp256k1_gej_set_infinity(r);"},
{"lineNum":" 1128","line":"    secp256k1_gej_set_infinity(&tmpj);"},
{"lineNum":" 1129","line":"    /* r = inp_g_sc*G */"},
{"lineNum":" 1130","line":"    secp256k1_ecmult(ctx, r, &tmpj, &szero, inp_g_sc);"},
{"lineNum":" 1131","line":"    for (point_idx = 0; point_idx < n_points; point_idx++) {"},
{"lineNum":" 1132","line":"        secp256k1_ge point;"},
{"lineNum":" 1133","line":"        secp256k1_gej pointj;"},
{"lineNum":" 1134","line":"        secp256k1_scalar scalar;"},
{"lineNum":" 1135","line":"        if (!cb(&scalar, &point, point_idx, cbdata)) {"},
{"lineNum":" 1136","line":"            return 0;"},
{"lineNum":" 1137","line":"        }"},
{"lineNum":" 1138","line":"        /* r += scalar*point */"},
{"lineNum":" 1139","line":"        secp256k1_gej_set_ge(&pointj, &point);"},
{"lineNum":" 1140","line":"        secp256k1_ecmult(ctx, &tmpj, &pointj, &scalar, NULL);"},
{"lineNum":" 1141","line":"        secp256k1_gej_add_var(r, r, &tmpj, NULL);"},
{"lineNum":" 1142","line":"    }"},
{"lineNum":" 1143","line":"    return 1;"},
{"lineNum":" 1144","line":"}"},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":"/* Compute the number of batches and the batch size given the maximum batch size and the"},
{"lineNum":" 1147","line":" * total number of points */"},
{"lineNum":" 1148","line":"static int secp256k1_ecmult_multi_batch_size_helper(size_t *n_batches, size_t *n_batch_points, size_t max_n_batch_points, size_t n) {"},
{"lineNum":" 1149","line":"    if (max_n_batch_points == 0) {"},
{"lineNum":" 1150","line":"        return 0;"},
{"lineNum":" 1151","line":"    }"},
{"lineNum":" 1152","line":"    if (max_n_batch_points > ECMULT_MAX_POINTS_PER_BATCH) {"},
{"lineNum":" 1153","line":"        max_n_batch_points = ECMULT_MAX_POINTS_PER_BATCH;"},
{"lineNum":" 1154","line":"    }"},
{"lineNum":" 1155","line":"    if (n == 0) {"},
{"lineNum":" 1156","line":"        *n_batches = 0;"},
{"lineNum":" 1157","line":"        *n_batch_points = 0;"},
{"lineNum":" 1158","line":"        return 1;"},
{"lineNum":" 1159","line":"    }"},
{"lineNum":" 1160","line":"    /* Compute ceil(n/max_n_batch_points) and ceil(n/n_batches) */"},
{"lineNum":" 1161","line":"    *n_batches = 1 + (n - 1) / max_n_batch_points;"},
{"lineNum":" 1162","line":"    *n_batch_points = 1 + (n - 1) / *n_batches;"},
{"lineNum":" 1163","line":"    return 1;"},
{"lineNum":" 1164","line":"}"},
{"lineNum":" 1165","line":""},
{"lineNum":" 1166","line":"typedef int (*secp256k1_ecmult_multi_func)(const secp256k1_callback* error_callback, const secp256k1_ecmult_context*, secp256k1_scratch*, secp256k1_gej*, const secp256k1_scalar*, secp256k1_ecmult_multi_callback cb, void*, size_t);"},
{"lineNum":" 1167","line":"static int secp256k1_ecmult_multi_var(const secp256k1_callback* error_callback, const secp256k1_ecmult_context *ctx, secp256k1_scratch *scratch, secp256k1_gej *r, const secp256k1_scalar *inp_g_sc, secp256k1_ecmult_multi_callback cb, void *cbdata, size_t n) {"},
{"lineNum":" 1168","line":"    size_t i;"},
{"lineNum":" 1169","line":""},
{"lineNum":" 1170","line":"    int (*f)(const secp256k1_callback* error_callback, const secp256k1_ecmult_context*, secp256k1_scratch*, secp256k1_gej*, const secp256k1_scalar*, secp256k1_ecmult_multi_callback cb, void*, size_t, size_t);"},
{"lineNum":" 1171","line":"    size_t n_batches;"},
{"lineNum":" 1172","line":"    size_t n_batch_points;"},
{"lineNum":" 1173","line":""},
{"lineNum":" 1174","line":"    secp256k1_gej_set_infinity(r);"},
{"lineNum":" 1175","line":"    if (inp_g_sc == NULL && n == 0) {"},
{"lineNum":" 1176","line":"        return 1;"},
{"lineNum":" 1177","line":"    } else if (n == 0) {"},
{"lineNum":" 1178","line":"        secp256k1_scalar szero;"},
{"lineNum":" 1179","line":"        secp256k1_scalar_set_int(&szero, 0);"},
{"lineNum":" 1180","line":"        secp256k1_ecmult(ctx, r, r, &szero, inp_g_sc);"},
{"lineNum":" 1181","line":"        return 1;"},
{"lineNum":" 1182","line":"    }"},
{"lineNum":" 1183","line":"    if (scratch == NULL) {"},
{"lineNum":" 1184","line":"        return secp256k1_ecmult_multi_simple_var(ctx, r, inp_g_sc, cb, cbdata, n);"},
{"lineNum":" 1185","line":"    }"},
{"lineNum":" 1186","line":""},
{"lineNum":" 1187","line":"    /* Compute the batch sizes for Pippenger\'s algorithm given a scratch space. If it\'s greater than"},
{"lineNum":" 1188","line":"     * a threshold use Pippenger\'s algorithm. Otherwise use Strauss\' algorithm."},
{"lineNum":" 1189","line":"     * As a first step check if there\'s enough space for Pippenger\'s algo (which requires less space"},
{"lineNum":" 1190","line":"     * than Strauss\' algo) and if not, use the simple algorithm. */"},
{"lineNum":" 1191","line":"    if (!secp256k1_ecmult_multi_batch_size_helper(&n_batches, &n_batch_points, secp256k1_pippenger_max_points(error_callback, scratch), n)) {"},
{"lineNum":" 1192","line":"        return secp256k1_ecmult_multi_simple_var(ctx, r, inp_g_sc, cb, cbdata, n);"},
{"lineNum":" 1193","line":"    }"},
{"lineNum":" 1194","line":"    if (n_batch_points >= ECMULT_PIPPENGER_THRESHOLD) {"},
{"lineNum":" 1195","line":"        f = secp256k1_ecmult_pippenger_batch;"},
{"lineNum":" 1196","line":"    } else {"},
{"lineNum":" 1197","line":"        if (!secp256k1_ecmult_multi_batch_size_helper(&n_batches, &n_batch_points, secp256k1_strauss_max_points(error_callback, scratch), n)) {"},
{"lineNum":" 1198","line":"            return secp256k1_ecmult_multi_simple_var(ctx, r, inp_g_sc, cb, cbdata, n);"},
{"lineNum":" 1199","line":"        }"},
{"lineNum":" 1200","line":"        f = secp256k1_ecmult_strauss_batch;"},
{"lineNum":" 1201","line":"    }"},
{"lineNum":" 1202","line":"    for(i = 0; i < n_batches; i++) {"},
{"lineNum":" 1203","line":"        size_t nbp = n < n_batch_points ? n : n_batch_points;"},
{"lineNum":" 1204","line":"        size_t offset = n_batch_points*i;"},
{"lineNum":" 1205","line":"        secp256k1_gej tmp;"},
{"lineNum":" 1206","line":"        if (!f(error_callback, ctx, scratch, &tmp, i == 0 ? inp_g_sc : NULL, cb, cbdata, nbp, offset)) {"},
{"lineNum":" 1207","line":"            return 0;"},
{"lineNum":" 1208","line":"        }"},
{"lineNum":" 1209","line":"        secp256k1_gej_add_var(r, r, &tmp, NULL);"},
{"lineNum":" 1210","line":"        n -= nbp;"},
{"lineNum":" 1211","line":"    }"},
{"lineNum":" 1212","line":"    return 1;"},
{"lineNum":" 1213","line":"}"},
{"lineNum":" 1214","line":""},
{"lineNum":" 1215","line":"#endif /* SECP256K1_ECMULT_IMPL_H */"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "ser_de-d029ad6af9d5a7c5", "date" : "2019-08-31 07:54:50", "instrumented" : 143, "covered" : 136,};
var merged_data = [];
