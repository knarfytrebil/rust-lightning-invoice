var data = {lines:[
{"lineNum":"    1","line":"// Bitcoin Hashes Library"},
{"lineNum":"    2","line":"// Written in 2018 by"},
{"lineNum":"    3","line":"//   Andrew Poelstra <apoelstra@wpsoftware.net>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// To the extent possible under law, the author(s) have dedicated all"},
{"lineNum":"    6","line":"// copyright and related and neighboring rights to this software to"},
{"lineNum":"    7","line":"// the public domain worldwide. This software is distributed without"},
{"lineNum":"    8","line":"// any warranty."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// You should have received a copy of the CC0 Public Domain Dedication"},
{"lineNum":"   11","line":"// along with this software."},
{"lineNum":"   12","line":"// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>."},
{"lineNum":"   13","line":"//"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"//! # SHA256"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"use byteorder::{ByteOrder, BigEndian};"},
{"lineNum":"   18","line":"use core::{cmp, str};"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"use hex;"},
{"lineNum":"   21","line":"use HashEngine as EngineTrait;"},
{"lineNum":"   22","line":"use Hash as HashTrait;"},
{"lineNum":"   23","line":"use Error;"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"const BLOCK_SIZE: usize = 64;"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"/// Engine to compute SHA256 hash function"},
{"lineNum":"   28","line":"pub struct HashEngine {"},
{"lineNum":"   29","line":"    buffer: [u8; BLOCK_SIZE],"},
{"lineNum":"   30","line":"    h: [u32; 8],"},
{"lineNum":"   31","line":"    length: usize,"},
{"lineNum":"   32","line":"}"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"impl Clone for HashEngine {"},
{"lineNum":"   35","line":"    fn clone(&self) -> HashEngine {"},
{"lineNum":"   36","line":"        HashEngine {"},
{"lineNum":"   37","line":"            h: self.h,"},
{"lineNum":"   38","line":"            length: self.length,"},
{"lineNum":"   39","line":"            buffer: self.buffer,"},
{"lineNum":"   40","line":"        }"},
{"lineNum":"   41","line":"    }"},
{"lineNum":"   42","line":"}"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"impl EngineTrait for HashEngine {"},
{"lineNum":"   45","line":"    type MidState = Midstate;"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    #[cfg(not(feature = \"fuzztarget\"))]"},
{"lineNum":"   48","line":"    fn midstate(&self) -> Midstate {","class":"lineCov","hits":"1","order":"2517","possible_hits":"1",},
{"lineNum":"   49","line":"        let mut ret = [0; 32];","class":"lineCov","hits":"1","order":"2518","possible_hits":"1",},
{"lineNum":"   50","line":"        BigEndian::write_u32_into(&self.h, &mut ret);","class":"lineCov","hits":"1","order":"2519","possible_hits":"1",},
{"lineNum":"   51","line":"        Midstate(ret)","class":"lineCov","hits":"1","order":"2576","possible_hits":"1",},
{"lineNum":"   52","line":"    }","class":"linePartCov","hits":"1","order":"2577","possible_hits":"2",},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"    #[cfg(feature = \"fuzztarget\")]"},
{"lineNum":"   55","line":"    fn midstate(&self) -> Midstate {"},
{"lineNum":"   56","line":"        let mut ret = [0; 32];"},
{"lineNum":"   57","line":"        ret.copy_from_slice(&self.buffer[..32]);"},
{"lineNum":"   58","line":"        Midstate(ret)"},
{"lineNum":"   59","line":"    }"},
{"lineNum":"   60","line":""},
{"lineNum":"   61","line":"    const BLOCK_SIZE: usize = 64;"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    engine_input_impl!();"},
{"lineNum":"   64","line":"}"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"/// Output of the SHA256 hash function"},
{"lineNum":"   67","line":"#[derive(Copy, Clone, PartialEq, Eq, Default, PartialOrd, Ord, Hash)]","class":"linePartCov","hits":"2","order":"3716","possible_hits":"3",},
{"lineNum":"   68","line":"pub struct Hash([u8; 32]);","class":"lineCov","hits":"1","order":"3717","possible_hits":"1",},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"impl str::FromStr for Hash {"},
{"lineNum":"   71","line":"    type Err = Error;"},
{"lineNum":"   72","line":"    fn from_str(s: &str) -> Result<Self, Error> {"},
{"lineNum":"   73","line":"        ::hex::FromHex::from_hex(s)"},
{"lineNum":"   74","line":"    }"},
{"lineNum":"   75","line":"}"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"hex_fmt_impl!(Debug, Hash);"},
{"lineNum":"   78","line":"hex_fmt_impl!(Display, Hash);"},
{"lineNum":"   79","line":"hex_fmt_impl!(LowerHex, Hash);"},
{"lineNum":"   80","line":"index_impl!(Hash);"},
{"lineNum":"   81","line":"serde_impl!(Hash, 32);"},
{"lineNum":"   82","line":"borrow_slice_impl!(Hash);"},
{"lineNum":"   83","line":""},
{"lineNum":"   84","line":"impl HashTrait for Hash {"},
{"lineNum":"   85","line":"    type Engine = HashEngine;"},
{"lineNum":"   86","line":"    type Inner = [u8; 32];"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    fn engine() -> HashEngine {","class":"lineCov","hits":"1","order":"2343","possible_hits":"1",},
{"lineNum":"   89","line":"        HashEngine {","class":"lineCov","hits":"1","order":"2346","possible_hits":"1",},
{"lineNum":"   90","line":"            h: [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19],","class":"lineCov","hits":"1","order":"2344","possible_hits":"1",},
{"lineNum":"   91","line":"            length: 0,"},
{"lineNum":"   92","line":"            buffer: [0; BLOCK_SIZE],","class":"lineCov","hits":"1","order":"2345","possible_hits":"1",},
{"lineNum":"   93","line":"        }"},
{"lineNum":"   94","line":"    }","class":"linePartCov","hits":"1","order":"2347","possible_hits":"2",},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"    #[cfg(not(feature = \"fuzztarget\"))]"},
{"lineNum":"   97","line":"    fn from_engine(mut e: HashEngine) -> Hash {","class":"lineCov","hits":"1","order":"2498","possible_hits":"1",},
{"lineNum":"   98","line":"        // pad buffer with a single 1-bit then all 0s, until there are exactly 8 bytes remaining"},
{"lineNum":"   99","line":"        let data_len = e.length as u64;","class":"lineCov","hits":"1","order":"2499","possible_hits":"1",},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"        let zeroes = [0; BLOCK_SIZE - 8];","class":"lineCov","hits":"1","order":"2500","possible_hits":"1",},
{"lineNum":"  102","line":"        e.input(&[0x80]);","class":"lineCov","hits":"1","order":"2501","possible_hits":"1",},
{"lineNum":"  103","line":"        if e.length % BLOCK_SIZE > zeroes.len() {","class":"linePartCov","hits":"1","order":"2502","possible_hits":"2",},
{"lineNum":"  104","line":"            e.input(&zeroes);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  105","line":"        }"},
{"lineNum":"  106","line":"        let pad_length = zeroes.len() - (e.length % BLOCK_SIZE);","class":"linePartCov","hits":"1","order":"2503","possible_hits":"2",},
{"lineNum":"  107","line":"        e.input(&zeroes[..pad_length]);","class":"lineCov","hits":"1","order":"2504","possible_hits":"1",},
{"lineNum":"  108","line":"        debug_assert_eq!(e.length % BLOCK_SIZE, zeroes.len());","class":"lineCov","hits":"1","order":"2505","possible_hits":"1",},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"        let mut len_buf = [0; 8];","class":"lineCov","hits":"1","order":"2506","possible_hits":"1",},
{"lineNum":"  111","line":"        BigEndian::write_u64(&mut len_buf, 8 * data_len);","class":"linePartCov","hits":"1","order":"2507","possible_hits":"3",},
{"lineNum":"  112","line":"        e.input(&len_buf);","class":"lineCov","hits":"1","order":"2514","possible_hits":"1",},
{"lineNum":"  113","line":"        debug_assert_eq!(e.length % BLOCK_SIZE, 0);","class":"lineCov","hits":"1","order":"2515","possible_hits":"1",},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"        Hash(e.midstate().into_inner())","class":"lineCov","hits":"1","order":"2516","possible_hits":"1",},
{"lineNum":"  116","line":"    }","class":"lineCov","hits":"1","order":"2581","possible_hits":"1",},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"    #[cfg(feature = \"fuzztarget\")]"},
{"lineNum":"  119","line":"    fn from_engine(e: HashEngine) -> Hash {"},
{"lineNum":"  120","line":"        Hash(e.midstate().into_inner())"},
{"lineNum":"  121","line":"    }"},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"    const LEN: usize = 32;"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"    fn from_slice(sl: &[u8]) -> Result<Hash, Error> {","class":"lineCov","hits":"1","order":"3635","possible_hits":"1",},
{"lineNum":"  126","line":"        if sl.len() != 32 {","class":"linePartCov","hits":"1","order":"3636","possible_hits":"2",},
{"lineNum":"  127","line":"            Err(Error::InvalidLength(Self::LEN, sl.len()))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"        } else {"},
{"lineNum":"  129","line":"            let mut ret = [0; 32];","class":"lineCov","hits":"1","order":"3637","possible_hits":"1",},
{"lineNum":"  130","line":"            ret.copy_from_slice(sl);","class":"lineCov","hits":"1","order":"3638","possible_hits":"1",},
{"lineNum":"  131","line":"            Ok(Hash(ret))","class":"lineCov","hits":"1","order":"3639","possible_hits":"1",},
{"lineNum":"  132","line":"        }"},
{"lineNum":"  133","line":"    }","class":"linePartCov","hits":"1","order":"3640","possible_hits":"2",},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"    fn into_inner(self) -> Self::Inner {"},
{"lineNum":"  136","line":"        self.0"},
{"lineNum":"  137","line":"    }"},
{"lineNum":"  138","line":""},
{"lineNum":"  139","line":"    fn from_inner(inner: Self::Inner) -> Self {","class":"lineCov","hits":"1","order":"1817","possible_hits":"1",},
{"lineNum":"  140","line":"        Hash(inner)","class":"lineCov","hits":"1","order":"1818","possible_hits":"1",},
{"lineNum":"  141","line":"    }","class":"linePartCov","hits":"1","order":"1819","possible_hits":"2",},
{"lineNum":"  142","line":"}"},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"/// Output of the SHA256 hash function"},
{"lineNum":"  145","line":"#[derive(Copy, Clone, PartialEq, Eq, Default, PartialOrd, Ord, Hash)]"},
{"lineNum":"  146","line":"pub struct Midstate([u8; 32]);"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"hex_fmt_impl!(Debug, Midstate);"},
{"lineNum":"  149","line":"hex_fmt_impl!(Display, Midstate);"},
{"lineNum":"  150","line":"hex_fmt_impl!(LowerHex, Midstate);"},
{"lineNum":"  151","line":"index_impl!(Midstate);"},
{"lineNum":"  152","line":"serde_impl!(Midstate, 32);"},
{"lineNum":"  153","line":"borrow_slice_impl!(Midstate);"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"impl Midstate {"},
{"lineNum":"  156","line":"    /// Length of the midstate, in bytes."},
{"lineNum":"  157","line":"    const LEN: usize = 32;"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    /// Flag indicating whether user-visible serializations of this hash"},
{"lineNum":"  160","line":"    /// should be backward. For some reason Satoshi decided this should be"},
{"lineNum":"  161","line":"    /// true for `Sha256dHash`, so here we are."},
{"lineNum":"  162","line":"    const DISPLAY_BACKWARD: bool = true;"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"    /// Construct a new midstate from the inner value."},
{"lineNum":"  165","line":"    pub fn from_inner(inner: [u8; 32]) -> Self {"},
{"lineNum":"  166","line":"        Midstate(inner)"},
{"lineNum":"  167","line":"    }"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"    /// Copies a byte slice into the [Midstate] object."},
{"lineNum":"  170","line":"    pub fn from_slice(sl: &[u8]) -> Result<Midstate, Error> {"},
{"lineNum":"  171","line":"        if sl.len() != Self::LEN {"},
{"lineNum":"  172","line":"            Err(Error::InvalidLength(Self::LEN, sl.len()))"},
{"lineNum":"  173","line":"        } else {"},
{"lineNum":"  174","line":"            let mut ret = [0; 32];"},
{"lineNum":"  175","line":"            ret.copy_from_slice(sl);"},
{"lineNum":"  176","line":"            Ok(Midstate(ret))"},
{"lineNum":"  177","line":"        }"},
{"lineNum":"  178","line":"    }"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"    /// Unwraps the [Midstate] and returns the underlying byte array."},
{"lineNum":"  181","line":"    pub fn into_inner(self) -> [u8; 32] {","class":"lineCov","hits":"1","order":"2578","possible_hits":"1",},
{"lineNum":"  182","line":"        self.0","class":"lineCov","hits":"1","order":"2579","possible_hits":"1",},
{"lineNum":"  183","line":"    }","class":"linePartCov","hits":"1","order":"2580","possible_hits":"2",},
{"lineNum":"  184","line":"}"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"impl hex::FromHex for Midstate {"},
{"lineNum":"  187","line":"    fn from_byte_iter<I>(iter: I) -> Result<Self, Error>"},
{"lineNum":"  188","line":"        where I: Iterator<Item=Result<u8, Error>> +"},
{"lineNum":"  189","line":"            ExactSizeIterator +"},
{"lineNum":"  190","line":"            DoubleEndedIterator,"},
{"lineNum":"  191","line":"    {"},
{"lineNum":"  192","line":"        // DISPLAY_BACKWARD is true"},
{"lineNum":"  193","line":"        Ok(Midstate::from_inner(hex::FromHex::from_byte_iter(iter.rev())?))"},
{"lineNum":"  194","line":"    }"},
{"lineNum":"  195","line":"}"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"macro_rules! Ch( ($x:expr, $y:expr, $z:expr) => ($z ^ ($x & ($y ^ $z))) );"},
{"lineNum":"  198","line":"macro_rules! Maj( ($x:expr, $y:expr, $z:expr) => (($x & $y) | ($z & ($x | $y))) );"},
{"lineNum":"  199","line":"macro_rules! Sigma0( ($x:expr) => (circular_lshift32!(30, $x) ^ circular_lshift32!(19, $x) ^ circular_lshift32!(10, $x)) ); macro_rules! Sigma1( ($x:expr) => (circular_lshift32!(26, $x) ^ circular_lshift32!(21, $x) ^ circular_lshift32!(7, $x)) );"},
{"lineNum":"  200","line":"macro_rules! sigma0( ($x:expr) => (circular_lshift32!(25, $x) ^ circular_lshift32!(14, $x) ^ ($x >> 3)) );"},
{"lineNum":"  201","line":"macro_rules! sigma1( ($x:expr) => (circular_lshift32!(15, $x) ^ circular_lshift32!(13, $x) ^ ($x >> 10)) );"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"macro_rules! round("},
{"lineNum":"  204","line":"    // first round"},
{"lineNum":"  205","line":"    ($a:expr, $b:expr, $c:expr, $d:expr, $e:expr, $f:expr, $g:expr, $h:expr, $k:expr, $w:expr) => ("},
{"lineNum":"  206","line":"        let t1 = $h.wrapping_add(Sigma1!($e)).wrapping_add(Ch!($e, $f, $g)).wrapping_add($k).wrapping_add($w);"},
{"lineNum":"  207","line":"        let t2 = Sigma0!($a).wrapping_add(Maj!($a, $b, $c));"},
{"lineNum":"  208","line":"        $d = $d.wrapping_add(t1);"},
{"lineNum":"  209","line":"        $h = t1.wrapping_add(t2);"},
{"lineNum":"  210","line":"    );"},
{"lineNum":"  211","line":"    // later rounds we reassign $w before doing the first-round computation"},
{"lineNum":"  212","line":"    ($a:expr, $b:expr, $c:expr, $d:expr, $e:expr, $f:expr, $g:expr, $h:expr, $k:expr, $w:expr, $w1:expr, $w2:expr, $w3:expr) => ("},
{"lineNum":"  213","line":"        $w = $w.wrapping_add(sigma1!($w1)).wrapping_add($w2).wrapping_add(sigma0!($w3));"},
{"lineNum":"  214","line":"        round!($a, $b, $c, $d, $e, $f, $g, $h, $k, $w);"},
{"lineNum":"  215","line":"    )"},
{"lineNum":"  216","line":");"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"impl HashEngine {"},
{"lineNum":"  219","line":"    /// Create a new [HashEngine] from a midstate."},
{"lineNum":"  220","line":"    ///"},
{"lineNum":"  221","line":"    /// Be aware that this method panics when [length] is"},
{"lineNum":"  222","line":"    /// not a multiple of the block size."},
{"lineNum":"  223","line":"    pub fn from_midstate(midstate: Midstate, length: usize) -> HashEngine {"},
{"lineNum":"  224","line":"        assert!(length % BLOCK_SIZE == 0, \"length is no multiple of the block size\");"},
{"lineNum":"  225","line":""},
{"lineNum":"  226","line":"        let mut ret = [0; 8];"},
{"lineNum":"  227","line":"        BigEndian::read_u32_into(&midstate[..], &mut ret);"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"        HashEngine {"},
{"lineNum":"  230","line":"            buffer: [0; BLOCK_SIZE],"},
{"lineNum":"  231","line":"            h: ret,"},
{"lineNum":"  232","line":"            length: length,"},
{"lineNum":"  233","line":"        }"},
{"lineNum":"  234","line":"    }"},
{"lineNum":"  235","line":""},
{"lineNum":"  236","line":"    // Algorithm copied from libsecp256k1"},
{"lineNum":"  237","line":"    fn process_block(&mut self) {","class":"lineCov","hits":"1","order":"2379","possible_hits":"1",},
{"lineNum":"  238","line":"        debug_assert_eq!(self.buffer.len(), BLOCK_SIZE);","class":"lineCov","hits":"1","order":"2380","possible_hits":"1",},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"        let mut w = [0u32; 16];","class":"lineCov","hits":"1","order":"2381","possible_hits":"1",},
{"lineNum":"  241","line":"        BigEndian::read_u32_into(&self.buffer, &mut w);","class":"lineCov","hits":"1","order":"2382","possible_hits":"1",},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"        let mut a = self.h[0];","class":"lineCov","hits":"1","order":"2411","possible_hits":"1",},
{"lineNum":"  244","line":"        let mut b = self.h[1];","class":"lineCov","hits":"1","order":"2412","possible_hits":"1",},
{"lineNum":"  245","line":"        let mut c = self.h[2];","class":"lineCov","hits":"1","order":"2413","possible_hits":"1",},
{"lineNum":"  246","line":"        let mut d = self.h[3];","class":"lineCov","hits":"1","order":"2414","possible_hits":"1",},
{"lineNum":"  247","line":"        let mut e = self.h[4];","class":"lineCov","hits":"1","order":"2415","possible_hits":"1",},
{"lineNum":"  248","line":"        let mut f = self.h[5];","class":"lineCov","hits":"1","order":"2416","possible_hits":"1",},
{"lineNum":"  249","line":"        let mut g = self.h[6];","class":"lineCov","hits":"1","order":"2417","possible_hits":"1",},
{"lineNum":"  250","line":"        let mut h = self.h[7];","class":"lineCov","hits":"1","order":"2418","possible_hits":"1",},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"        round!(a, b, c, d, e, f, g, h, 0x428a2f98, w[0]);","class":"linePartCov","hits":"1","order":"2419","possible_hits":"2",},
{"lineNum":"  253","line":"        round!(h, a, b, c, d, e, f, g, 0x71374491, w[1]);","class":"linePartCov","hits":"1","order":"2420","possible_hits":"2",},
{"lineNum":"  254","line":"        round!(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w[2]);","class":"linePartCov","hits":"1","order":"2421","possible_hits":"2",},
{"lineNum":"  255","line":"        round!(f, g, h, a, b, c, d, e, 0xe9b5dba5, w[3]);","class":"linePartCov","hits":"1","order":"2422","possible_hits":"2",},
{"lineNum":"  256","line":"        round!(e, f, g, h, a, b, c, d, 0x3956c25b, w[4]);","class":"linePartCov","hits":"1","order":"2423","possible_hits":"2",},
{"lineNum":"  257","line":"        round!(d, e, f, g, h, a, b, c, 0x59f111f1, w[5]);","class":"linePartCov","hits":"1","order":"2424","possible_hits":"2",},
{"lineNum":"  258","line":"        round!(c, d, e, f, g, h, a, b, 0x923f82a4, w[6]);","class":"linePartCov","hits":"1","order":"2425","possible_hits":"2",},
{"lineNum":"  259","line":"        round!(b, c, d, e, f, g, h, a, 0xab1c5ed5, w[7]);","class":"linePartCov","hits":"1","order":"2426","possible_hits":"2",},
{"lineNum":"  260","line":"        round!(a, b, c, d, e, f, g, h, 0xd807aa98, w[8]);","class":"linePartCov","hits":"1","order":"2427","possible_hits":"2",},
{"lineNum":"  261","line":"        round!(h, a, b, c, d, e, f, g, 0x12835b01, w[9]);","class":"linePartCov","hits":"1","order":"2428","possible_hits":"2",},
{"lineNum":"  262","line":"        round!(g, h, a, b, c, d, e, f, 0x243185be, w[10]);","class":"linePartCov","hits":"1","order":"2429","possible_hits":"2",},
{"lineNum":"  263","line":"        round!(f, g, h, a, b, c, d, e, 0x550c7dc3, w[11]);","class":"linePartCov","hits":"1","order":"2430","possible_hits":"2",},
{"lineNum":"  264","line":"        round!(e, f, g, h, a, b, c, d, 0x72be5d74, w[12]);","class":"linePartCov","hits":"1","order":"2431","possible_hits":"2",},
{"lineNum":"  265","line":"        round!(d, e, f, g, h, a, b, c, 0x80deb1fe, w[13]);","class":"linePartCov","hits":"1","order":"2432","possible_hits":"2",},
{"lineNum":"  266","line":"        round!(c, d, e, f, g, h, a, b, 0x9bdc06a7, w[14]);","class":"linePartCov","hits":"1","order":"2433","possible_hits":"2",},
{"lineNum":"  267","line":"        round!(b, c, d, e, f, g, h, a, 0xc19bf174, w[15]);","class":"linePartCov","hits":"1","order":"2434","possible_hits":"2",},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"        round!(a, b, c, d, e, f, g, h, 0xe49b69c1, w[0], w[14], w[9], w[1]);","class":"linePartCov","hits":"1","order":"2435","possible_hits":"2",},
{"lineNum":"  270","line":"        round!(h, a, b, c, d, e, f, g, 0xefbe4786, w[1], w[15], w[10], w[2]);","class":"linePartCov","hits":"1","order":"2436","possible_hits":"2",},
{"lineNum":"  271","line":"        round!(g, h, a, b, c, d, e, f, 0x0fc19dc6, w[2], w[0], w[11], w[3]);","class":"linePartCov","hits":"1","order":"2437","possible_hits":"2",},
{"lineNum":"  272","line":"        round!(f, g, h, a, b, c, d, e, 0x240ca1cc, w[3], w[1], w[12], w[4]);","class":"linePartCov","hits":"1","order":"2438","possible_hits":"2",},
{"lineNum":"  273","line":"        round!(e, f, g, h, a, b, c, d, 0x2de92c6f, w[4], w[2], w[13], w[5]);","class":"linePartCov","hits":"1","order":"2439","possible_hits":"2",},
{"lineNum":"  274","line":"        round!(d, e, f, g, h, a, b, c, 0x4a7484aa, w[5], w[3], w[14], w[6]);","class":"linePartCov","hits":"1","order":"2440","possible_hits":"2",},
{"lineNum":"  275","line":"        round!(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w[6], w[4], w[15], w[7]);","class":"linePartCov","hits":"1","order":"2441","possible_hits":"2",},
{"lineNum":"  276","line":"        round!(b, c, d, e, f, g, h, a, 0x76f988da, w[7], w[5], w[0], w[8]);","class":"linePartCov","hits":"1","order":"2442","possible_hits":"2",},
{"lineNum":"  277","line":"        round!(a, b, c, d, e, f, g, h, 0x983e5152, w[8], w[6], w[1], w[9]);","class":"linePartCov","hits":"1","order":"2443","possible_hits":"2",},
{"lineNum":"  278","line":"        round!(h, a, b, c, d, e, f, g, 0xa831c66d, w[9], w[7], w[2], w[10]);","class":"linePartCov","hits":"1","order":"2444","possible_hits":"2",},
{"lineNum":"  279","line":"        round!(g, h, a, b, c, d, e, f, 0xb00327c8, w[10], w[8], w[3], w[11]);","class":"linePartCov","hits":"1","order":"2445","possible_hits":"2",},
{"lineNum":"  280","line":"        round!(f, g, h, a, b, c, d, e, 0xbf597fc7, w[11], w[9], w[4], w[12]);","class":"linePartCov","hits":"1","order":"2446","possible_hits":"2",},
{"lineNum":"  281","line":"        round!(e, f, g, h, a, b, c, d, 0xc6e00bf3, w[12], w[10], w[5], w[13]);","class":"linePartCov","hits":"1","order":"2447","possible_hits":"2",},
{"lineNum":"  282","line":"        round!(d, e, f, g, h, a, b, c, 0xd5a79147, w[13], w[11], w[6], w[14]);","class":"linePartCov","hits":"1","order":"2448","possible_hits":"2",},
{"lineNum":"  283","line":"        round!(c, d, e, f, g, h, a, b, 0x06ca6351, w[14], w[12], w[7], w[15]);","class":"linePartCov","hits":"1","order":"2449","possible_hits":"2",},
{"lineNum":"  284","line":"        round!(b, c, d, e, f, g, h, a, 0x14292967, w[15], w[13], w[8], w[0]);","class":"linePartCov","hits":"1","order":"2450","possible_hits":"2",},
{"lineNum":"  285","line":""},
{"lineNum":"  286","line":"        round!(a, b, c, d, e, f, g, h, 0x27b70a85, w[0], w[14], w[9], w[1]);","class":"linePartCov","hits":"1","order":"2451","possible_hits":"2",},
{"lineNum":"  287","line":"        round!(h, a, b, c, d, e, f, g, 0x2e1b2138, w[1], w[15], w[10], w[2]);","class":"linePartCov","hits":"1","order":"2452","possible_hits":"2",},
{"lineNum":"  288","line":"        round!(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w[2], w[0], w[11], w[3]);","class":"linePartCov","hits":"1","order":"2453","possible_hits":"2",},
{"lineNum":"  289","line":"        round!(f, g, h, a, b, c, d, e, 0x53380d13, w[3], w[1], w[12], w[4]);","class":"linePartCov","hits":"1","order":"2454","possible_hits":"2",},
{"lineNum":"  290","line":"        round!(e, f, g, h, a, b, c, d, 0x650a7354, w[4], w[2], w[13], w[5]);","class":"linePartCov","hits":"1","order":"2455","possible_hits":"2",},
{"lineNum":"  291","line":"        round!(d, e, f, g, h, a, b, c, 0x766a0abb, w[5], w[3], w[14], w[6]);","class":"linePartCov","hits":"1","order":"2456","possible_hits":"2",},
{"lineNum":"  292","line":"        round!(c, d, e, f, g, h, a, b, 0x81c2c92e, w[6], w[4], w[15], w[7]);","class":"linePartCov","hits":"1","order":"2457","possible_hits":"2",},
{"lineNum":"  293","line":"        round!(b, c, d, e, f, g, h, a, 0x92722c85, w[7], w[5], w[0], w[8]);","class":"linePartCov","hits":"1","order":"2458","possible_hits":"2",},
{"lineNum":"  294","line":"        round!(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w[8], w[6], w[1], w[9]);","class":"linePartCov","hits":"1","order":"2459","possible_hits":"2",},
{"lineNum":"  295","line":"        round!(h, a, b, c, d, e, f, g, 0xa81a664b, w[9], w[7], w[2], w[10]);","class":"linePartCov","hits":"1","order":"2460","possible_hits":"2",},
{"lineNum":"  296","line":"        round!(g, h, a, b, c, d, e, f, 0xc24b8b70, w[10], w[8], w[3], w[11]);","class":"linePartCov","hits":"1","order":"2461","possible_hits":"2",},
{"lineNum":"  297","line":"        round!(f, g, h, a, b, c, d, e, 0xc76c51a3, w[11], w[9], w[4], w[12]);","class":"linePartCov","hits":"1","order":"2462","possible_hits":"2",},
{"lineNum":"  298","line":"        round!(e, f, g, h, a, b, c, d, 0xd192e819, w[12], w[10], w[5], w[13]);","class":"linePartCov","hits":"1","order":"2463","possible_hits":"2",},
{"lineNum":"  299","line":"        round!(d, e, f, g, h, a, b, c, 0xd6990624, w[13], w[11], w[6], w[14]);","class":"linePartCov","hits":"1","order":"2464","possible_hits":"2",},
{"lineNum":"  300","line":"        round!(c, d, e, f, g, h, a, b, 0xf40e3585, w[14], w[12], w[7], w[15]);","class":"linePartCov","hits":"1","order":"2465","possible_hits":"2",},
{"lineNum":"  301","line":"        round!(b, c, d, e, f, g, h, a, 0x106aa070, w[15], w[13], w[8], w[0]);","class":"linePartCov","hits":"1","order":"2466","possible_hits":"2",},
{"lineNum":"  302","line":""},
{"lineNum":"  303","line":"        round!(a, b, c, d, e, f, g, h, 0x19a4c116, w[0], w[14], w[9], w[1]);","class":"linePartCov","hits":"1","order":"2467","possible_hits":"2",},
{"lineNum":"  304","line":"        round!(h, a, b, c, d, e, f, g, 0x1e376c08, w[1], w[15], w[10], w[2]);","class":"linePartCov","hits":"1","order":"2468","possible_hits":"2",},
{"lineNum":"  305","line":"        round!(g, h, a, b, c, d, e, f, 0x2748774c, w[2], w[0], w[11], w[3]);","class":"linePartCov","hits":"1","order":"2469","possible_hits":"2",},
{"lineNum":"  306","line":"        round!(f, g, h, a, b, c, d, e, 0x34b0bcb5, w[3], w[1], w[12], w[4]);","class":"linePartCov","hits":"1","order":"2470","possible_hits":"2",},
{"lineNum":"  307","line":"        round!(e, f, g, h, a, b, c, d, 0x391c0cb3, w[4], w[2], w[13], w[5]);","class":"linePartCov","hits":"1","order":"2471","possible_hits":"2",},
{"lineNum":"  308","line":"        round!(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w[5], w[3], w[14], w[6]);","class":"linePartCov","hits":"1","order":"2472","possible_hits":"2",},
{"lineNum":"  309","line":"        round!(c, d, e, f, g, h, a, b, 0x5b9cca4f, w[6], w[4], w[15], w[7]);","class":"linePartCov","hits":"1","order":"2473","possible_hits":"2",},
{"lineNum":"  310","line":"        round!(b, c, d, e, f, g, h, a, 0x682e6ff3, w[7], w[5], w[0], w[8]);","class":"linePartCov","hits":"1","order":"2474","possible_hits":"2",},
{"lineNum":"  311","line":"        round!(a, b, c, d, e, f, g, h, 0x748f82ee, w[8], w[6], w[1], w[9]);","class":"linePartCov","hits":"1","order":"2475","possible_hits":"2",},
{"lineNum":"  312","line":"        round!(h, a, b, c, d, e, f, g, 0x78a5636f, w[9], w[7], w[2], w[10]);","class":"linePartCov","hits":"1","order":"2476","possible_hits":"2",},
{"lineNum":"  313","line":"        round!(g, h, a, b, c, d, e, f, 0x84c87814, w[10], w[8], w[3], w[11]);","class":"linePartCov","hits":"1","order":"2477","possible_hits":"2",},
{"lineNum":"  314","line":"        round!(f, g, h, a, b, c, d, e, 0x8cc70208, w[11], w[9], w[4], w[12]);","class":"linePartCov","hits":"1","order":"2478","possible_hits":"2",},
{"lineNum":"  315","line":"        round!(e, f, g, h, a, b, c, d, 0x90befffa, w[12], w[10], w[5], w[13]);","class":"linePartCov","hits":"1","order":"2479","possible_hits":"2",},
{"lineNum":"  316","line":"        round!(d, e, f, g, h, a, b, c, 0xa4506ceb, w[13], w[11], w[6], w[14]);","class":"linePartCov","hits":"1","order":"2480","possible_hits":"2",},
{"lineNum":"  317","line":"        round!(c, d, e, f, g, h, a, b, 0xbef9a3f7, w[14], w[12], w[7], w[15]);","class":"linePartCov","hits":"1","order":"2481","possible_hits":"2",},
{"lineNum":"  318","line":"        round!(b, c, d, e, f, g, h, a, 0xc67178f2, w[15], w[13], w[8], w[0]);","class":"linePartCov","hits":"1","order":"2482","possible_hits":"2",},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"        self.h[0] = self.h[0].wrapping_add(a);","class":"lineCov","hits":"1","order":"2483","possible_hits":"1",},
{"lineNum":"  321","line":"        self.h[1] = self.h[1].wrapping_add(b);","class":"lineCov","hits":"1","order":"2484","possible_hits":"1",},
{"lineNum":"  322","line":"        self.h[2] = self.h[2].wrapping_add(c);","class":"lineCov","hits":"1","order":"2485","possible_hits":"1",},
{"lineNum":"  323","line":"        self.h[3] = self.h[3].wrapping_add(d);","class":"lineCov","hits":"1","order":"2486","possible_hits":"1",},
{"lineNum":"  324","line":"        self.h[4] = self.h[4].wrapping_add(e);","class":"lineCov","hits":"1","order":"2487","possible_hits":"1",},
{"lineNum":"  325","line":"        self.h[5] = self.h[5].wrapping_add(f);","class":"lineCov","hits":"1","order":"2488","possible_hits":"1",},
{"lineNum":"  326","line":"        self.h[6] = self.h[6].wrapping_add(g);","class":"lineCov","hits":"1","order":"2489","possible_hits":"1",},
{"lineNum":"  327","line":"        self.h[7] = self.h[7].wrapping_add(h);","class":"lineCov","hits":"1","order":"2490","possible_hits":"1",},
{"lineNum":"  328","line":"    }","class":"lineCov","hits":"1","order":"2491","possible_hits":"1",},
{"lineNum":"  329","line":"}"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"#[cfg(test)]"},
{"lineNum":"  332","line":"mod tests {"},
{"lineNum":"  333","line":"    use sha256;"},
{"lineNum":"  334","line":"    use hex::{FromHex, ToHex};"},
{"lineNum":"  335","line":"    use {Hash, HashEngine};"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"    #[derive(Clone)]"},
{"lineNum":"  338","line":"    struct Test {"},
{"lineNum":"  339","line":"        input: &\'static str,"},
{"lineNum":"  340","line":"        output: Vec<u8>,"},
{"lineNum":"  341","line":"        output_str: &\'static str,"},
{"lineNum":"  342","line":"    }"},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"    #[test]"},
{"lineNum":"  345","line":"    fn test() {"},
{"lineNum":"  346","line":"        let tests = vec!["},
{"lineNum":"  347","line":"            // Examples from wikipedia"},
{"lineNum":"  348","line":"            Test {"},
{"lineNum":"  349","line":"                input: \"\","},
{"lineNum":"  350","line":"                output: vec!["},
{"lineNum":"  351","line":"                    0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,"},
{"lineNum":"  352","line":"                    0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,"},
{"lineNum":"  353","line":"                    0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,"},
{"lineNum":"  354","line":"                    0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55,"},
{"lineNum":"  355","line":"                ],"},
{"lineNum":"  356","line":"                output_str: \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\""},
{"lineNum":"  357","line":"            },"},
{"lineNum":"  358","line":"            Test {"},
{"lineNum":"  359","line":"                input: \"The quick brown fox jumps over the lazy dog\","},
{"lineNum":"  360","line":"                output: vec!["},
{"lineNum":"  361","line":"                    0xd7, 0xa8, 0xfb, 0xb3, 0x07, 0xd7, 0x80, 0x94,"},
{"lineNum":"  362","line":"                    0x69, 0xca, 0x9a, 0xbc, 0xb0, 0x08, 0x2e, 0x4f,"},
{"lineNum":"  363","line":"                    0x8d, 0x56, 0x51, 0xe4, 0x6d, 0x3c, 0xdb, 0x76,"},
{"lineNum":"  364","line":"                    0x2d, 0x02, 0xd0, 0xbf, 0x37, 0xc9, 0xe5, 0x92,"},
{"lineNum":"  365","line":"                ],"},
{"lineNum":"  366","line":"                output_str: \"d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592\","},
{"lineNum":"  367","line":"            },"},
{"lineNum":"  368","line":"            Test {"},
{"lineNum":"  369","line":"                input: \"The quick brown fox jumps over the lazy dog.\","},
{"lineNum":"  370","line":"                output: vec!["},
{"lineNum":"  371","line":"                    0xef, 0x53, 0x7f, 0x25, 0xc8, 0x95, 0xbf, 0xa7,"},
{"lineNum":"  372","line":"                    0x82, 0x52, 0x65, 0x29, 0xa9, 0xb6, 0x3d, 0x97,"},
{"lineNum":"  373","line":"                    0xaa, 0x63, 0x15, 0x64, 0xd5, 0xd7, 0x89, 0xc2,"},
{"lineNum":"  374","line":"                    0xb7, 0x65, 0x44, 0x8c, 0x86, 0x35, 0xfb, 0x6c,"},
{"lineNum":"  375","line":"                ],"},
{"lineNum":"  376","line":"                output_str: \"ef537f25c895bfa782526529a9b63d97aa631564d5d789c2b765448c8635fb6c\","},
{"lineNum":"  377","line":"            },"},
{"lineNum":"  378","line":"        ];"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"        for test in tests {"},
{"lineNum":"  381","line":"            // Hash through high-level API, check hex encoding/decoding"},
{"lineNum":"  382","line":"            let hash = sha256::Hash::hash(&test.input.as_bytes());"},
{"lineNum":"  383","line":"            assert_eq!(hash, sha256::Hash::from_hex(test.output_str).expect(\"parse hex\"));"},
{"lineNum":"  384","line":"            assert_eq!(&hash[..], &test.output[..]);"},
{"lineNum":"  385","line":"            assert_eq!(&hash.to_hex(), &test.output_str);"},
{"lineNum":"  386","line":""},
{"lineNum":"  387","line":"            // Hash through engine, checking that we can input byte by byte"},
{"lineNum":"  388","line":"            let mut engine = sha256::Hash::engine();"},
{"lineNum":"  389","line":"            for ch in test.input.as_bytes() {"},
{"lineNum":"  390","line":"                engine.input(&[*ch]);"},
{"lineNum":"  391","line":"            }"},
{"lineNum":"  392","line":"            let manual_hash = sha256::Hash::from_engine(engine);"},
{"lineNum":"  393","line":"            assert_eq!(hash, manual_hash);"},
{"lineNum":"  394","line":"            assert_eq!(hash.into_inner()[..].as_ref(), test.output.as_slice());"},
{"lineNum":"  395","line":"        }"},
{"lineNum":"  396","line":"    }"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"    #[test]"},
{"lineNum":"  399","line":"    fn midstate() {"},
{"lineNum":"  400","line":"        // Test vector obtained by doing an asset issuance on Elements"},
{"lineNum":"  401","line":"        let mut engine = sha256::Hash::engine();"},
{"lineNum":"  402","line":"        // sha256dhash of outpoint"},
{"lineNum":"  403","line":"        // 73828cbc65fd68ab78dc86992b76ae50ae2bf8ceedbe8de0483172f0886219f7:0"},
{"lineNum":"  404","line":"        engine.input(&["},
{"lineNum":"  405","line":"            0x9d, 0xd0, 0x1b, 0x56, 0xb1, 0x56, 0x45, 0x14,"},
{"lineNum":"  406","line":"            0x3e, 0xad, 0x15, 0x8d, 0xec, 0x19, 0xf8, 0xce,"},
{"lineNum":"  407","line":"            0xa9, 0x0b, 0xd0, 0xa9, 0xb2, 0xf8, 0x1d, 0x21,"},
{"lineNum":"  408","line":"            0xff, 0xa3, 0xa4, 0xc6, 0x44, 0x81, 0xd4, 0x1c,"},
{"lineNum":"  409","line":"        ]);"},
{"lineNum":"  410","line":"        // 32 bytes of zeroes representing \"new asset\""},
{"lineNum":"  411","line":"        engine.input(&[0; 32]);"},
{"lineNum":"  412","line":"        assert_eq!("},
{"lineNum":"  413","line":"            engine.midstate(),"},
{"lineNum":"  414","line":"            // RPC output"},
{"lineNum":"  415","line":"            sha256::Midstate::from_inner(["},
{"lineNum":"  416","line":"                0x0b, 0xcf, 0xe0, 0xe5, 0x4e, 0x6c, 0xc7, 0xd3,"},
{"lineNum":"  417","line":"                0x4f, 0x4f, 0x7c, 0x1d, 0xf0, 0xb0, 0xf5, 0x03,"},
{"lineNum":"  418","line":"                0xf2, 0xf7, 0x12, 0x91, 0x2a, 0x06, 0x05, 0xb4,"},
{"lineNum":"  419","line":"                0x14, 0xed, 0x33, 0x7f, 0x7f, 0x03, 0x2e, 0x03,"},
{"lineNum":"  420","line":"            ])"},
{"lineNum":"  421","line":"        );"},
{"lineNum":"  422","line":"    }"},
{"lineNum":"  423","line":""},
{"lineNum":"  424","line":"    #[test]"},
{"lineNum":"  425","line":"    fn engine_with_state() {"},
{"lineNum":"  426","line":"        let mut engine = sha256::Hash::engine();"},
{"lineNum":"  427","line":"        let midstate_engine = sha256::HashEngine::from_midstate(engine.midstate(), 0);"},
{"lineNum":"  428","line":"        // Fresh engine and engine initialized with fresh state should have same state"},
{"lineNum":"  429","line":"        assert_eq!(engine.h, midstate_engine.h);"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"        // Midstate changes after writing 64 bytes"},
{"lineNum":"  432","line":"        engine.input(&[1; 63]);"},
{"lineNum":"  433","line":"        assert_eq!(engine.h, midstate_engine.h);"},
{"lineNum":"  434","line":"        engine.input(&[2; 1]);"},
{"lineNum":"  435","line":"        assert_ne!(engine.h, midstate_engine.h);"},
{"lineNum":"  436","line":""},
{"lineNum":"  437","line":"        // Initializing an engine with midstate from another engine should result in"},
{"lineNum":"  438","line":"        // both engines producing the same hashes"},
{"lineNum":"  439","line":"        let data_vec = vec![vec![3; 1], vec![4; 63], vec![5; 65], vec![6; 66]];"},
{"lineNum":"  440","line":"        for data in data_vec {"},
{"lineNum":"  441","line":"            let mut engine = engine.clone();"},
{"lineNum":"  442","line":"            let mut midstate_engine ="},
{"lineNum":"  443","line":"                sha256::HashEngine::from_midstate(engine.midstate(), engine.length);"},
{"lineNum":"  444","line":"            assert_eq!(engine.h, midstate_engine.h);"},
{"lineNum":"  445","line":"            assert_eq!(engine.length, midstate_engine.length);"},
{"lineNum":"  446","line":"            engine.input(&data);"},
{"lineNum":"  447","line":"            midstate_engine.input(&data);"},
{"lineNum":"  448","line":"            assert_eq!(engine.h, midstate_engine.h);"},
{"lineNum":"  449","line":"            let hash1 = sha256::Hash::from_engine(engine);"},
{"lineNum":"  450","line":"            let hash2 = sha256::Hash::from_engine(midstate_engine);"},
{"lineNum":"  451","line":"            assert_eq!(hash1, hash2);"},
{"lineNum":"  452","line":"        }"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"        // Test that a specific midstate results in a specific hash. Midstate was"},
{"lineNum":"  455","line":"        // obtained by applying sha256 to sha256(\"MuSig coefficient\")||sha256(\"MuSig"},
{"lineNum":"  456","line":"        // coefficient\")."},
{"lineNum":"  457","line":"        static MIDSTATE: [u8; 32] = ["},
{"lineNum":"  458","line":"            0x0f, 0xd0, 0x69, 0x0c, 0xfe, 0xfe, 0xae, 0x97, 0x99, 0x6e, 0xac, 0x7f, 0x5c, 0x30,"},
{"lineNum":"  459","line":"            0xd8, 0x64, 0x8c, 0x4a, 0x05, 0x73, 0xac, 0xa1, 0xa2, 0x2f, 0x6f, 0x43, 0xb8, 0x01,"},
{"lineNum":"  460","line":"            0x85, 0xce, 0x27, 0xcd,"},
{"lineNum":"  461","line":"        ];"},
{"lineNum":"  462","line":"        static HASH_EXPECTED: [u8; 32] = ["},
{"lineNum":"  463","line":"            0x18, 0x84, 0xe4, 0x72, 0x40, 0x4e, 0xf4, 0x5a, 0xb4, 0x9c, 0x4e, 0xa4, 0x9a, 0xe6,"},
{"lineNum":"  464","line":"            0x23, 0xa8, 0x88, 0x52, 0x7f, 0x7d, 0x8a, 0x06, 0x94, 0x20, 0x8f, 0xf1, 0xf7, 0xa9,"},
{"lineNum":"  465","line":"            0xd5, 0x69, 0x09, 0x59,"},
{"lineNum":"  466","line":"        ];"},
{"lineNum":"  467","line":"        let midstate_engine ="},
{"lineNum":"  468","line":"            sha256::HashEngine::from_midstate(sha256::Midstate::from_inner(MIDSTATE), 64);"},
{"lineNum":"  469","line":"        let hash = sha256::Hash::from_engine(midstate_engine);"},
{"lineNum":"  470","line":"        assert_eq!(hash, sha256::Hash(HASH_EXPECTED));"},
{"lineNum":"  471","line":"    }"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"    #[cfg(feature=\"serde\")]"},
{"lineNum":"  474","line":"    #[test]"},
{"lineNum":"  475","line":"    fn sha256_serde() {"},
{"lineNum":"  476","line":"        use serde_test::{Configure, Token, assert_tokens};"},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"        static HASH_BYTES: [u8; 32] = ["},
{"lineNum":"  479","line":"            0xef, 0x53, 0x7f, 0x25, 0xc8, 0x95, 0xbf, 0xa7,"},
{"lineNum":"  480","line":"            0x82, 0x52, 0x65, 0x29, 0xa9, 0xb6, 0x3d, 0x97,"},
{"lineNum":"  481","line":"            0xaa, 0x63, 0x15, 0x64, 0xd5, 0xd7, 0x89, 0xc2,"},
{"lineNum":"  482","line":"            0xb7, 0x65, 0x44, 0x8c, 0x86, 0x35, 0xfb, 0x6c,"},
{"lineNum":"  483","line":"        ];"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"        let hash = sha256::Hash::from_slice(&HASH_BYTES).expect(\"right number of bytes\");"},
{"lineNum":"  486","line":"        assert_tokens(&hash.compact(), &[Token::BorrowedBytes(&HASH_BYTES[..])]);"},
{"lineNum":"  487","line":"        assert_tokens(&hash.readable(), &[Token::Str(\"ef537f25c895bfa782526529a9b63d97aa631564d5d789c2b765448c8635fb6c\")]);"},
{"lineNum":"  488","line":"    }"},
{"lineNum":"  489","line":"}"},
{"lineNum":"  490","line":""},
{"lineNum":"  491","line":"#[cfg(all(test, feature=\"unstable\"))]"},
{"lineNum":"  492","line":"mod benches {"},
{"lineNum":"  493","line":"    use test::Bencher;"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"    use sha256;"},
{"lineNum":"  496","line":"    use Hash;"},
{"lineNum":"  497","line":"    use HashEngine;"},
{"lineNum":"  498","line":""},
{"lineNum":"  499","line":"    #[bench]"},
{"lineNum":"  500","line":"    pub fn sha256_10(bh: & mut Bencher) {"},
{"lineNum":"  501","line":"        let mut engine = sha256::Hash::engine();"},
{"lineNum":"  502","line":"        let bytes = [1u8; 10];"},
{"lineNum":"  503","line":"        bh.iter( || {"},
{"lineNum":"  504","line":"            engine.input(&bytes);"},
{"lineNum":"  505","line":"        });"},
{"lineNum":"  506","line":"        bh.bytes = bytes.len() as u64;"},
{"lineNum":"  507","line":"    }"},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"    #[bench]"},
{"lineNum":"  510","line":"    pub fn sha256_1k(bh: & mut Bencher) {"},
{"lineNum":"  511","line":"        let mut engine = sha256::Hash::engine();"},
{"lineNum":"  512","line":"        let bytes = [1u8; 1024];"},
{"lineNum":"  513","line":"        bh.iter( || {"},
{"lineNum":"  514","line":"            engine.input(&bytes);"},
{"lineNum":"  515","line":"        });"},
{"lineNum":"  516","line":"        bh.bytes = bytes.len() as u64;"},
{"lineNum":"  517","line":"    }"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"    #[bench]"},
{"lineNum":"  520","line":"    pub fn sha256_64k(bh: & mut Bencher) {"},
{"lineNum":"  521","line":"        let mut engine = sha256::Hash::engine();"},
{"lineNum":"  522","line":"        let bytes = [1u8; 65536];"},
{"lineNum":"  523","line":"        bh.iter( || {"},
{"lineNum":"  524","line":"            engine.input(&bytes);"},
{"lineNum":"  525","line":"        });"},
{"lineNum":"  526","line":"        bh.bytes = bytes.len() as u64;"},
{"lineNum":"  527","line":"    }"},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "ser_de-d029ad6af9d5a7c5", "date" : "2019-08-31 07:54:50", "instrumented" : 125, "covered" : 123,};
var merged_data = [];
