var data = {lines:[
{"lineNum":"    1","line":"// Bitcoin secp256k1 bindings"},
{"lineNum":"    2","line":"// Written in 2014 by"},
{"lineNum":"    3","line":"//   Dawid Ciężarkiewicz"},
{"lineNum":"    4","line":"//   Andrew Poelstra"},
{"lineNum":"    5","line":"//"},
{"lineNum":"    6","line":"// To the extent possible under law, the author(s) have dedicated all"},
{"lineNum":"    7","line":"// copyright and related and neighboring rights to this software to"},
{"lineNum":"    8","line":"// the public domain worldwide. This software is distributed without"},
{"lineNum":"    9","line":"// any warranty."},
{"lineNum":"   10","line":"//"},
{"lineNum":"   11","line":"// You should have received a copy of the CC0 Public Domain Dedication"},
{"lineNum":"   12","line":"// along with this software."},
{"lineNum":"   13","line":"// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>."},
{"lineNum":"   14","line":"//"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"//! # Recovery module"},
{"lineNum":"   17","line":"//! Provides a signing function that allows recovering the public key from the"},
{"lineNum":"   18","line":"//! signature."},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"use core::ptr;"},
{"lineNum":"   21","line":"use key;"},
{"lineNum":"   22","line":"use super::{Secp256k1, Message, Error, Signature, Verification, Signing};"},
{"lineNum":"   23","line":"use super::ffi as super_ffi;"},
{"lineNum":"   24","line":"pub use key::SecretKey;"},
{"lineNum":"   25","line":"pub use key::PublicKey;"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"mod ffi;"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"/// A tag used for recovering the public key from a compact signature"},
{"lineNum":"   30","line":"#[derive(Copy, Clone, PartialEq, Eq, Debug)]"},
{"lineNum":"   31","line":"pub struct RecoveryId(i32);"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"/// An ECDSA signature with a recovery ID for pubkey recovery"},
{"lineNum":"   34","line":"#[derive(Copy, Clone, PartialEq, Eq, Debug)]","class":"linePartCov","hits":"2","order":"3726","possible_hits":"6",},
{"lineNum":"   35","line":"pub struct RecoverableSignature(ffi::RecoverableSignature);","class":"linePartCov","hits":"1","order":"3727","possible_hits":"3",},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"impl RecoveryId {"},
{"lineNum":"   38","line":"#[inline]"},
{"lineNum":"   39","line":"/// Allows library users to create valid recovery IDs from i32."},
{"lineNum":"   40","line":"pub fn from_i32(id: i32) -> Result<RecoveryId, Error> {","class":"lineCov","hits":"2","order":"2608","possible_hits":"2",},
{"lineNum":"   41","line":"    match id {","class":"lineCov","hits":"2","order":"2610","possible_hits":"2",},
{"lineNum":"   42","line":"        0 | 1 | 2 | 3 => Ok(RecoveryId(id)),","class":"lineCov","hits":"2","order":"2609","possible_hits":"2",},
{"lineNum":"   43","line":"        _ => Err(Error::InvalidRecoveryId)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   44","line":"    }"},
{"lineNum":"   45","line":"}","class":"linePartCov","hits":"2","order":"2611","possible_hits":"4",},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"#[inline]"},
{"lineNum":"   48","line":"/// Allows library users to convert recovery IDs to i32."},
{"lineNum":"   49","line":"pub fn to_i32(self) -> i32 {","class":"lineCov","hits":"1","order":"2901","possible_hits":"1",},
{"lineNum":"   50","line":"    self.0","class":"lineCov","hits":"1","order":"2902","possible_hits":"1",},
{"lineNum":"   51","line":"}","class":"linePartCov","hits":"1","order":"2903","possible_hits":"2",},
{"lineNum":"   52","line":"}"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"impl RecoverableSignature {"},
{"lineNum":"   55","line":"    #[inline]"},
{"lineNum":"   56","line":"    /// Converts a compact-encoded byte slice to a signature. This"},
{"lineNum":"   57","line":"    /// representation is nonstandard and defined by the libsecp256k1"},
{"lineNum":"   58","line":"    /// library."},
{"lineNum":"   59","line":"    pub fn from_compact(data: &[u8], recid: RecoveryId) -> Result<RecoverableSignature, Error> {","class":"lineCov","hits":"2","order":"2613","possible_hits":"2",},
{"lineNum":"   60","line":"        let mut ret = unsafe { ffi::RecoverableSignature::blank() };","class":"lineCov","hits":"2","order":"2614","possible_hits":"2",},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"        unsafe {"},
{"lineNum":"   63","line":"            if data.len() != 64 {","class":"linePartCov","hits":"4","order":"2620","possible_hits":"6",},
{"lineNum":"   64","line":"                Err(Error::InvalidSignature)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   65","line":"            } else if ffi::secp256k1_ecdsa_recoverable_signature_parse_compact(","class":"lineCov","hits":"4","order":"2624","possible_hits":"4",},
{"lineNum":"   66","line":"                super_ffi::secp256k1_context_no_precomp,","class":"lineCov","hits":"2","order":"2621","possible_hits":"2",},
{"lineNum":"   67","line":"                &mut ret,"},
{"lineNum":"   68","line":"                data.as_ptr(),","class":"lineCov","hits":"2","order":"2622","possible_hits":"2",},
{"lineNum":"   69","line":"                recid.0,","class":"lineCov","hits":"2","order":"2623","possible_hits":"2",},
{"lineNum":"   70","line":"            ) == 1"},
{"lineNum":"   71","line":"            {"},
{"lineNum":"   72","line":"                Ok(RecoverableSignature(ret))","class":"lineCov","hits":"2","order":"2675","possible_hits":"2",},
{"lineNum":"   73","line":"            } else {"},
{"lineNum":"   74","line":"                Err(Error::InvalidSignature)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   75","line":"            }"},
{"lineNum":"   76","line":"        }"},
{"lineNum":"   77","line":"    }","class":"linePartCov","hits":"2","order":"2676","possible_hits":"4",},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    /// Obtains a raw pointer suitable for use with FFI functions"},
{"lineNum":"   80","line":"    #[inline]"},
{"lineNum":"   81","line":"    pub fn as_ptr(&self) -> *const ffi::RecoverableSignature {","class":"lineCov","hits":"1","order":"2871","possible_hits":"1",},
{"lineNum":"   82","line":"        &self.0 as *const _","class":"lineCov","hits":"1","order":"2872","possible_hits":"1",},
{"lineNum":"   83","line":"    }","class":"linePartCov","hits":"1","order":"2873","possible_hits":"2",},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"    #[inline]"},
{"lineNum":"   86","line":"    /// Serializes the recoverable signature in compact format"},
{"lineNum":"   87","line":"    pub fn serialize_compact(&self) -> (RecoveryId, [u8; 64]) {","class":"lineCov","hits":"1","order":"2865","possible_hits":"1",},
{"lineNum":"   88","line":"        let mut ret = [0u8; 64];","class":"lineCov","hits":"1","order":"2866","possible_hits":"1",},
{"lineNum":"   89","line":"        let mut recid = 0i32;","class":"lineCov","hits":"1","order":"2867","possible_hits":"1",},
{"lineNum":"   90","line":"        unsafe {"},
{"lineNum":"   91","line":"            let err = ffi::secp256k1_ecdsa_recoverable_signature_serialize_compact(","class":"lineCov","hits":"1","order":"2874","possible_hits":"1",},
{"lineNum":"   92","line":"                super_ffi::secp256k1_context_no_precomp,","class":"lineCov","hits":"1","order":"2868","possible_hits":"1",},
{"lineNum":"   93","line":"                ret.as_mut_ptr(),","class":"lineCov","hits":"1","order":"2869","possible_hits":"1",},
{"lineNum":"   94","line":"                &mut recid,"},
{"lineNum":"   95","line":"                self.as_ptr(),","class":"lineCov","hits":"1","order":"2870","possible_hits":"1",},
{"lineNum":"   96","line":"            );"},
{"lineNum":"   97","line":"            assert!(err == 1);","class":"lineCov","hits":"1","order":"2895","possible_hits":"1",},
{"lineNum":"   98","line":"        }"},
{"lineNum":"   99","line":"        (RecoveryId(recid), ret)","class":"lineCov","hits":"1","order":"2896","possible_hits":"1",},
{"lineNum":"  100","line":"    }","class":"linePartCov","hits":"1","order":"2897","possible_hits":"2",},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    /// Converts a recoverable signature to a non-recoverable one (this is needed"},
{"lineNum":"  103","line":"    /// for verification"},
{"lineNum":"  104","line":"    #[inline]"},
{"lineNum":"  105","line":"    pub fn to_standard(&self) -> Signature {","class":"lineCov","hits":"1","order":"5313","possible_hits":"1",},
{"lineNum":"  106","line":"        let mut ret = unsafe { super_ffi::Signature::blank() };","class":"lineCov","hits":"1","order":"5314","possible_hits":"1",},
{"lineNum":"  107","line":"        unsafe {"},
{"lineNum":"  108","line":"            let err = ffi::secp256k1_ecdsa_recoverable_signature_convert(","class":"lineCov","hits":"1","order":"5318","possible_hits":"1",},
{"lineNum":"  109","line":"                super_ffi::secp256k1_context_no_precomp,","class":"lineCov","hits":"1","order":"5316","possible_hits":"1",},
{"lineNum":"  110","line":"                &mut ret,"},
{"lineNum":"  111","line":"                self.as_ptr(),","class":"lineCov","hits":"1","order":"5317","possible_hits":"1",},
{"lineNum":"  112","line":"            );"},
{"lineNum":"  113","line":"            assert!(err == 1);","class":"lineCov","hits":"1","order":"5330","possible_hits":"1",},
{"lineNum":"  114","line":"        }"},
{"lineNum":"  115","line":"        Signature(ret)","class":"lineCov","hits":"1","order":"5331","possible_hits":"1",},
{"lineNum":"  116","line":"    }","class":"linePartCov","hits":"1","order":"5332","possible_hits":"2",},
{"lineNum":"  117","line":"}"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"/// Creates a new recoverable signature from a FFI one"},
{"lineNum":"  120","line":"impl From<ffi::RecoverableSignature> for RecoverableSignature {"},
{"lineNum":"  121","line":"    #[inline]"},
{"lineNum":"  122","line":"    fn from(sig: ffi::RecoverableSignature) -> RecoverableSignature {"},
{"lineNum":"  123","line":"        RecoverableSignature(sig)"},
{"lineNum":"  124","line":"    }"},
{"lineNum":"  125","line":"}"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"impl<C: Signing> Secp256k1<C> {"},
{"lineNum":"  128","line":"    /// Constructs a signature for `msg` using the secret key `sk` and RFC6979 nonce"},
{"lineNum":"  129","line":"    /// Requires a signing-capable context."},
{"lineNum":"  130","line":"    pub fn sign_recoverable(&self, msg: &Message, sk: &key::SecretKey)"},
{"lineNum":"  131","line":"                            -> RecoverableSignature {"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"        let mut ret = unsafe { ffi::RecoverableSignature::blank() };"},
{"lineNum":"  134","line":"        unsafe {"},
{"lineNum":"  135","line":"            // We can assume the return value because it\'s not possible to construct"},
{"lineNum":"  136","line":"            // an invalid signature from a valid `Message` and `SecretKey`"},
{"lineNum":"  137","line":"            assert_eq!("},
{"lineNum":"  138","line":"                ffi::secp256k1_ecdsa_sign_recoverable("},
{"lineNum":"  139","line":"                    self.ctx,"},
{"lineNum":"  140","line":"                    &mut ret,"},
{"lineNum":"  141","line":"                    msg.as_ptr(),"},
{"lineNum":"  142","line":"                    sk.as_ptr(),"},
{"lineNum":"  143","line":"                    super_ffi::secp256k1_nonce_function_rfc6979,"},
{"lineNum":"  144","line":"                    ptr::null()"},
{"lineNum":"  145","line":"                ),"},
{"lineNum":"  146","line":"                1"},
{"lineNum":"  147","line":"            );"},
{"lineNum":"  148","line":"        }"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"        RecoverableSignature::from(ret)"},
{"lineNum":"  151","line":"    }"},
{"lineNum":"  152","line":"}"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"impl<C: Verification> Secp256k1<C> {"},
{"lineNum":"  155","line":"    /// Determines the public key for which `sig` is a valid signature for"},
{"lineNum":"  156","line":"    /// `msg`. Requires a verify-capable context."},
{"lineNum":"  157","line":"    pub fn recover(&self, msg: &Message, sig: &RecoverableSignature)","class":"lineCov","hits":"1","order":"4827","possible_hits":"1",},
{"lineNum":"  158","line":"                   -> Result<key::PublicKey, Error> {"},
{"lineNum":"  159","line":""},
{"lineNum":"  160","line":"        let mut pk = unsafe { super_ffi::PublicKey::blank() };","class":"lineCov","hits":"1","order":"4828","possible_hits":"1",},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"        unsafe {"},
{"lineNum":"  163","line":"            if ffi::secp256k1_ecdsa_recover(self.ctx, &mut pk,","class":"lineCov","hits":"2","order":"4830","possible_hits":"2",},
{"lineNum":"  164","line":"                                            sig.as_ptr(), msg.as_ptr()) != 1 {","class":"lineCov","hits":"1","order":"4831","possible_hits":"1",},
{"lineNum":"  165","line":"                return Err(Error::InvalidSignature);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":"            }"},
{"lineNum":"  167","line":"        };"},
{"lineNum":"  168","line":"        Ok(key::PublicKey::from(pk))","class":"lineCov","hits":"1","order":"5240","possible_hits":"1",},
{"lineNum":"  169","line":"    }","class":"linePartCov","hits":"2","order":"5244","possible_hits":"3",},
{"lineNum":"  170","line":"}"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"#[cfg(test)]"},
{"lineNum":"  174","line":"mod tests {"},
{"lineNum":"  175","line":"    use rand::{RngCore, thread_rng};"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"    use key::SecretKey;"},
{"lineNum":"  178","line":"    use super::{RecoveryId, RecoverableSignature};"},
{"lineNum":"  179","line":"    use super::super::{Secp256k1, Message};"},
{"lineNum":"  180","line":"    use super::super::Error::{IncorrectSignature, InvalidSignature};"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"    #[test]"},
{"lineNum":"  183","line":"    fn capabilities() {"},
{"lineNum":"  184","line":"        let sign = Secp256k1::signing_only();"},
{"lineNum":"  185","line":"        let vrfy = Secp256k1::verification_only();"},
{"lineNum":"  186","line":"        let full = Secp256k1::new();"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"        let mut msg = [0u8; 32];"},
{"lineNum":"  189","line":"        thread_rng().fill_bytes(&mut msg);"},
{"lineNum":"  190","line":"        let msg = Message::from_slice(&msg).unwrap();"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"        // Try key generation"},
{"lineNum":"  193","line":"        let (sk, pk) = full.generate_keypair(&mut thread_rng());"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"        // Try signing"},
{"lineNum":"  196","line":"        assert_eq!(sign.sign_recoverable(&msg, &sk), full.sign_recoverable(&msg, &sk));"},
{"lineNum":"  197","line":"        let sigr = full.sign_recoverable(&msg, &sk);"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"        // Try pk recovery"},
{"lineNum":"  200","line":"        assert!(vrfy.recover(&msg, &sigr).is_ok());"},
{"lineNum":"  201","line":"        assert!(full.recover(&msg, &sigr).is_ok());"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"        assert_eq!(vrfy.recover(&msg, &sigr),"},
{"lineNum":"  204","line":"                   full.recover(&msg, &sigr));"},
{"lineNum":"  205","line":"        assert_eq!(full.recover(&msg, &sigr), Ok(pk));"},
{"lineNum":"  206","line":"    }"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"    #[test]"},
{"lineNum":"  209","line":"    fn recid_sanity_check() {"},
{"lineNum":"  210","line":"        let one = RecoveryId(1);"},
{"lineNum":"  211","line":"        assert_eq!(one, one.clone());"},
{"lineNum":"  212","line":"    }"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"    #[test]"},
{"lineNum":"  215","line":"    fn sign() {"},
{"lineNum":"  216","line":"        let mut s = Secp256k1::new();"},
{"lineNum":"  217","line":"        s.randomize(&mut thread_rng());"},
{"lineNum":"  218","line":"        let one = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"},
{"lineNum":"  219","line":"                   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"        let sk = SecretKey::from_slice(&one).unwrap();"},
{"lineNum":"  222","line":"        let msg = Message::from_slice(&one).unwrap();"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"        let sig = s.sign_recoverable(&msg, &sk);"},
{"lineNum":"  225","line":"        assert_eq!(Ok(sig), RecoverableSignature::from_compact(&["},
{"lineNum":"  226","line":"            0x66, 0x73, 0xff, 0xad, 0x21, 0x47, 0x74, 0x1f,"},
{"lineNum":"  227","line":"            0x04, 0x77, 0x2b, 0x6f, 0x92, 0x1f, 0x0b, 0xa6,"},
{"lineNum":"  228","line":"            0xaf, 0x0c, 0x1e, 0x77, 0xfc, 0x43, 0x9e, 0x65,"},
{"lineNum":"  229","line":"            0xc3, 0x6d, 0xed, 0xf4, 0x09, 0x2e, 0x88, 0x98,"},
{"lineNum":"  230","line":"            0x4c, 0x1a, 0x97, 0x16, 0x52, 0xe0, 0xad, 0xa8,"},
{"lineNum":"  231","line":"            0x80, 0x12, 0x0e, 0xf8, 0x02, 0x5e, 0x70, 0x9f,"},
{"lineNum":"  232","line":"            0xff, 0x20, 0x80, 0xc4, 0xa3, 0x9a, 0xae, 0x06,"},
{"lineNum":"  233","line":"            0x8d, 0x12, 0xee, 0xd0, 0x09, 0xb6, 0x8c, 0x89],"},
{"lineNum":"  234","line":"            RecoveryId(1)))"},
{"lineNum":"  235","line":"    }"},
{"lineNum":"  236","line":""},
{"lineNum":"  237","line":"    #[test]"},
{"lineNum":"  238","line":"    fn sign_and_verify_fail() {"},
{"lineNum":"  239","line":"        let mut s = Secp256k1::new();"},
{"lineNum":"  240","line":"        s.randomize(&mut thread_rng());"},
{"lineNum":"  241","line":""},
{"lineNum":"  242","line":"        let mut msg = [0u8; 32];"},
{"lineNum":"  243","line":"        thread_rng().fill_bytes(&mut msg);"},
{"lineNum":"  244","line":"        let msg = Message::from_slice(&msg).unwrap();"},
{"lineNum":"  245","line":""},
{"lineNum":"  246","line":"        let (sk, pk) = s.generate_keypair(&mut thread_rng());"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"        let sigr = s.sign_recoverable(&msg, &sk);"},
{"lineNum":"  249","line":"        let sig = sigr.to_standard();"},
{"lineNum":"  250","line":""},
{"lineNum":"  251","line":"        let mut msg = [0u8; 32];"},
{"lineNum":"  252","line":"        thread_rng().fill_bytes(&mut msg);"},
{"lineNum":"  253","line":"        let msg = Message::from_slice(&msg).unwrap();"},
{"lineNum":"  254","line":"        assert_eq!(s.verify(&msg, &sig, &pk), Err(IncorrectSignature));"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"        let recovered_key = s.recover(&msg, &sigr).unwrap();"},
{"lineNum":"  257","line":"        assert!(recovered_key != pk);"},
{"lineNum":"  258","line":"    }"},
{"lineNum":"  259","line":""},
{"lineNum":"  260","line":"    #[test]"},
{"lineNum":"  261","line":"    fn sign_with_recovery() {"},
{"lineNum":"  262","line":"        let mut s = Secp256k1::new();"},
{"lineNum":"  263","line":"        s.randomize(&mut thread_rng());"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"        let mut msg = [0u8; 32];"},
{"lineNum":"  266","line":"        thread_rng().fill_bytes(&mut msg);"},
{"lineNum":"  267","line":"        let msg = Message::from_slice(&msg).unwrap();"},
{"lineNum":"  268","line":""},
{"lineNum":"  269","line":"        let (sk, pk) = s.generate_keypair(&mut thread_rng());"},
{"lineNum":"  270","line":""},
{"lineNum":"  271","line":"        let sig = s.sign_recoverable(&msg, &sk);"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"        assert_eq!(s.recover(&msg, &sig), Ok(pk));"},
{"lineNum":"  274","line":"    }"},
{"lineNum":"  275","line":""},
{"lineNum":"  276","line":"    #[test]"},
{"lineNum":"  277","line":"    fn bad_recovery() {"},
{"lineNum":"  278","line":"        let mut s = Secp256k1::new();"},
{"lineNum":"  279","line":"        s.randomize(&mut thread_rng());"},
{"lineNum":"  280","line":""},
{"lineNum":"  281","line":"        let msg = Message::from_slice(&[0x55; 32]).unwrap();"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"        // Zero is not a valid sig"},
{"lineNum":"  284","line":"        let sig = RecoverableSignature::from_compact(&[0; 64], RecoveryId(0)).unwrap();"},
{"lineNum":"  285","line":"        assert_eq!(s.recover(&msg, &sig), Err(InvalidSignature));"},
{"lineNum":"  286","line":"        // ...but 111..111 is"},
{"lineNum":"  287","line":"        let sig = RecoverableSignature::from_compact(&[1; 64], RecoveryId(0)).unwrap();"},
{"lineNum":"  288","line":"        assert!(s.recover(&msg, &sig).is_ok());"},
{"lineNum":"  289","line":"    }"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"    #[test]"},
{"lineNum":"  292","line":"    fn test_debug_output() {"},
{"lineNum":"  293","line":"        let sig = RecoverableSignature::from_compact(&["},
{"lineNum":"  294","line":"            0x66, 0x73, 0xff, 0xad, 0x21, 0x47, 0x74, 0x1f,"},
{"lineNum":"  295","line":"            0x04, 0x77, 0x2b, 0x6f, 0x92, 0x1f, 0x0b, 0xa6,"},
{"lineNum":"  296","line":"            0xaf, 0x0c, 0x1e, 0x77, 0xfc, 0x43, 0x9e, 0x65,"},
{"lineNum":"  297","line":"            0xc3, 0x6d, 0xed, 0xf4, 0x09, 0x2e, 0x88, 0x98,"},
{"lineNum":"  298","line":"            0x4c, 0x1a, 0x97, 0x16, 0x52, 0xe0, 0xad, 0xa8,"},
{"lineNum":"  299","line":"            0x80, 0x12, 0x0e, 0xf8, 0x02, 0x5e, 0x70, 0x9f,"},
{"lineNum":"  300","line":"            0xff, 0x20, 0x80, 0xc4, 0xa3, 0x9a, 0xae, 0x06,"},
{"lineNum":"  301","line":"            0x8d, 0x12, 0xee, 0xd0, 0x09, 0xb6, 0x8c, 0x89],"},
{"lineNum":"  302","line":"            RecoveryId(1)).unwrap();"},
{"lineNum":"  303","line":"        assert_eq!(&format!(\"{:?}\", sig), \"RecoverableSignature(98882e09f4ed6dc3659e43fc771e0cafa60b1f926f2b77041f744721adff7366898cb609d0ee128d06ae9aa3c48020ff9f705e02f80e1280a8ade05216971a4c01)\");"},
{"lineNum":"  304","line":"    }"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"    #[test]"},
{"lineNum":"  307","line":"    fn test_recov_sig_serialize_compact() {"},
{"lineNum":"  308","line":"        let recid_in = RecoveryId(1);"},
{"lineNum":"  309","line":"        let bytes_in = &["},
{"lineNum":"  310","line":"            0x66, 0x73, 0xff, 0xad, 0x21, 0x47, 0x74, 0x1f,"},
{"lineNum":"  311","line":"            0x04, 0x77, 0x2b, 0x6f, 0x92, 0x1f, 0x0b, 0xa6,"},
{"lineNum":"  312","line":"            0xaf, 0x0c, 0x1e, 0x77, 0xfc, 0x43, 0x9e, 0x65,"},
{"lineNum":"  313","line":"            0xc3, 0x6d, 0xed, 0xf4, 0x09, 0x2e, 0x88, 0x98,"},
{"lineNum":"  314","line":"            0x4c, 0x1a, 0x97, 0x16, 0x52, 0xe0, 0xad, 0xa8,"},
{"lineNum":"  315","line":"            0x80, 0x12, 0x0e, 0xf8, 0x02, 0x5e, 0x70, 0x9f,"},
{"lineNum":"  316","line":"            0xff, 0x20, 0x80, 0xc4, 0xa3, 0x9a, 0xae, 0x06,"},
{"lineNum":"  317","line":"            0x8d, 0x12, 0xee, 0xd0, 0x09, 0xb6, 0x8c, 0x89];"},
{"lineNum":"  318","line":"        let sig = RecoverableSignature::from_compact("},
{"lineNum":"  319","line":"            bytes_in,"},
{"lineNum":"  320","line":"            recid_in,"},
{"lineNum":"  321","line":"        ).unwrap();"},
{"lineNum":"  322","line":"        let (recid_out, bytes_out) = sig.serialize_compact();"},
{"lineNum":"  323","line":"        assert_eq!(recid_in, recid_out);"},
{"lineNum":"  324","line":"        assert_eq!(&bytes_in[..], &bytes_out[..]);"},
{"lineNum":"  325","line":"    }"},
{"lineNum":"  326","line":""},
{"lineNum":"  327","line":"    #[test]"},
{"lineNum":"  328","line":"    fn test_recov_id_conversion_between_i32() {"},
{"lineNum":"  329","line":"        assert!(RecoveryId::from_i32(-1).is_err());"},
{"lineNum":"  330","line":"        assert!(RecoveryId::from_i32(0).is_ok());"},
{"lineNum":"  331","line":"        assert!(RecoveryId::from_i32(1).is_ok());"},
{"lineNum":"  332","line":"        assert!(RecoveryId::from_i32(2).is_ok());"},
{"lineNum":"  333","line":"        assert!(RecoveryId::from_i32(3).is_ok());"},
{"lineNum":"  334","line":"        assert!(RecoveryId::from_i32(4).is_err());"},
{"lineNum":"  335","line":"        let id0 = RecoveryId::from_i32(0).unwrap();"},
{"lineNum":"  336","line":"        assert_eq!(id0.to_i32(), 0);"},
{"lineNum":"  337","line":"        let id1 = RecoveryId(1);"},
{"lineNum":"  338","line":"        assert_eq!(id1.to_i32(), 1);"},
{"lineNum":"  339","line":"    }"},
{"lineNum":"  340","line":"}"},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":""},
{"lineNum":"  343","line":"#[cfg(all(test, feature = \"unstable\"))]"},
{"lineNum":"  344","line":"mod benches {"},
{"lineNum":"  345","line":"    #[bench]"},
{"lineNum":"  346","line":"    pub fn bench_recover(bh: &mut Bencher) {"},
{"lineNum":"  347","line":"        let s = Secp256k1::new();"},
{"lineNum":"  348","line":"        let mut msg = [0u8; 32];"},
{"lineNum":"  349","line":"        thread_rng().fill_bytes(&mut msg);"},
{"lineNum":"  350","line":"        let msg = Message::from_slice(&msg).unwrap();"},
{"lineNum":"  351","line":"        let (sk, _) = s.generate_keypair(&mut thread_rng());"},
{"lineNum":"  352","line":"        let sig = s.sign_recoverable(&msg, &sk);"},
{"lineNum":"  353","line":""},
{"lineNum":"  354","line":"        bh.iter(|| {"},
{"lineNum":"  355","line":"            let res = s.recover(&msg, &sig).unwrap();"},
{"lineNum":"  356","line":"            black_box(res);"},
{"lineNum":"  357","line":"        });"},
{"lineNum":"  358","line":"    }"},
{"lineNum":"  359","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "ser_de-d029ad6af9d5a7c5", "date" : "2019-08-31 07:54:50", "instrumented" : 49, "covered" : 45,};
var merged_data = [];
