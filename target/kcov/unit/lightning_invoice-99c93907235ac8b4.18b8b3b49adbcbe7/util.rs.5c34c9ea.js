var data = {lines:[
{"lineNum":"    1","line":"// Bitcoin Hashes Library"},
{"lineNum":"    2","line":"// Written in 2018 by"},
{"lineNum":"    3","line":"//   Andrew Poelstra <apoelstra@wpsoftware.net>"},
{"lineNum":"    4","line":"//"},
{"lineNum":"    5","line":"// To the extent possible under law, the author(s) have dedicated all"},
{"lineNum":"    6","line":"// copyright and related and neighboring rights to this software to"},
{"lineNum":"    7","line":"// the public domain worldwide. This software is distributed without"},
{"lineNum":"    8","line":"// any warranty."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// You should have received a copy of the CC0 Public Domain Dedication"},
{"lineNum":"   11","line":"// along with this software."},
{"lineNum":"   12","line":"// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>."},
{"lineNum":"   13","line":"//"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"/// Circular left-shift a 32-bit word"},
{"lineNum":"   16","line":"macro_rules! circular_lshift32 ("},
{"lineNum":"   17","line":"    ($shift:expr, $w:expr) => (($w << $shift) | ($w >> (32 - $shift)))"},
{"lineNum":"   18","line":");"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"macro_rules! circular_lshift64 ("},
{"lineNum":"   21","line":"    ($shift:expr, $w:expr) => (($w << $shift) | ($w >> (64 - $shift)))"},
{"lineNum":"   22","line":");"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"macro_rules! hex_fmt_impl("},
{"lineNum":"   25","line":"    ($imp:ident, $ty:ident) => ("},
{"lineNum":"   26","line":"        impl ::core::fmt::$imp for $ty {"},
{"lineNum":"   27","line":"            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   28","line":"                use hex::{format_hex, format_hex_reverse};"},
{"lineNum":"   29","line":"                if $ty::DISPLAY_BACKWARD {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   30","line":"                    format_hex_reverse(&self.0, f)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   31","line":"                } else {"},
{"lineNum":"   32","line":"                    format_hex(&self.0, f)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":"                }"},
{"lineNum":"   34","line":"            }","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   35","line":"        }"},
{"lineNum":"   36","line":"    )"},
{"lineNum":"   37","line":");"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"macro_rules! index_impl("},
{"lineNum":"   40","line":"    ($ty:ty) => ("},
{"lineNum":"   41","line":"        impl ::core::ops::Index<usize> for $ty {"},
{"lineNum":"   42","line":"            type Output = u8;"},
{"lineNum":"   43","line":"            fn index(&self, index: usize) -> &u8 {"},
{"lineNum":"   44","line":"                &self.0[index]"},
{"lineNum":"   45","line":"            }"},
{"lineNum":"   46","line":"        }"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"        impl ::core::ops::Index<::core::ops::Range<usize>> for $ty {"},
{"lineNum":"   49","line":"            type Output = [u8];"},
{"lineNum":"   50","line":"            fn index(&self, index: ::core::ops::Range<usize>) -> &[u8] {"},
{"lineNum":"   51","line":"                &self.0[index]"},
{"lineNum":"   52","line":"            }"},
{"lineNum":"   53","line":"        }"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"        impl ::core::ops::Index<::core::ops::RangeFrom<usize>> for $ty {"},
{"lineNum":"   56","line":"            type Output = [u8];"},
{"lineNum":"   57","line":"            fn index(&self, index: ::core::ops::RangeFrom<usize>) -> &[u8] {"},
{"lineNum":"   58","line":"                &self.0[index]"},
{"lineNum":"   59","line":"            }"},
{"lineNum":"   60","line":"        }"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"        impl ::core::ops::Index<::core::ops::RangeTo<usize>> for $ty {"},
{"lineNum":"   63","line":"            type Output = [u8];"},
{"lineNum":"   64","line":"            fn index(&self, index: ::core::ops::RangeTo<usize>) -> &[u8] {"},
{"lineNum":"   65","line":"                &self.0[index]"},
{"lineNum":"   66","line":"            }"},
{"lineNum":"   67","line":"        }"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"        impl ::core::ops::Index<::core::ops::RangeFull> for $ty {"},
{"lineNum":"   70","line":"            type Output = [u8];"},
{"lineNum":"   71","line":"            fn index(&self, index: ::core::ops::RangeFull) -> &[u8] {","class":"lineCov","hits":"1","order":"3712","possible_hits":"1",},
{"lineNum":"   72","line":"                &self.0[index]","class":"lineCov","hits":"1","order":"3713","possible_hits":"1",},
{"lineNum":"   73","line":"            }","class":"linePartCov","hits":"1","order":"3714","possible_hits":"2",},
{"lineNum":"   74","line":"        }"},
{"lineNum":"   75","line":"    )"},
{"lineNum":"   76","line":");"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"macro_rules! borrow_slice_impl("},
{"lineNum":"   79","line":"    ($ty:ty) => ("},
{"lineNum":"   80","line":"        impl ::core::borrow::Borrow<[u8]> for $ty {"},
{"lineNum":"   81","line":"            fn borrow(&self) -> &[u8] {"},
{"lineNum":"   82","line":"                &self[..]"},
{"lineNum":"   83","line":"            }"},
{"lineNum":"   84","line":"        }"},
{"lineNum":"   85","line":""},
{"lineNum":"   86","line":"        impl ::core::convert::AsRef<[u8]> for $ty {"},
{"lineNum":"   87","line":"            fn as_ref(&self) -> &[u8] {"},
{"lineNum":"   88","line":"                &self[..]"},
{"lineNum":"   89","line":"            }"},
{"lineNum":"   90","line":"        }"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"        impl ::core::ops::Deref for $ty {"},
{"lineNum":"   93","line":"            type Target = [u8];"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"            fn deref(&self) -> &Self::Target {"},
{"lineNum":"   96","line":"                &self.0"},
{"lineNum":"   97","line":"            }"},
{"lineNum":"   98","line":"        }"},
{"lineNum":"   99","line":"    )"},
{"lineNum":"  100","line":");"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"macro_rules! engine_input_impl("},
{"lineNum":"  103","line":"    () => ("},
{"lineNum":"  104","line":"        #[cfg(not(feature = \"fuzztarget\"))]"},
{"lineNum":"  105","line":"        fn input(&mut self, mut inp: &[u8]) {","class":"lineCov","hits":"1","order":"3469","possible_hits":"1",},
{"lineNum":"  106","line":"            while !inp.is_empty() {","class":"lineCov","hits":"3","order":"3470","possible_hits":"3",},
{"lineNum":"  107","line":"                let buf_idx = self.length % <Self as EngineTrait>::BLOCK_SIZE;","class":"lineCov","hits":"1","order":"3471","possible_hits":"1",},
{"lineNum":"  108","line":"                let rem_len = <Self as EngineTrait>::BLOCK_SIZE - buf_idx;","class":"linePartCov","hits":"1","order":"3472","possible_hits":"2",},
{"lineNum":"  109","line":"                let write_len = cmp::min(rem_len, inp.len());","class":"lineCov","hits":"1","order":"3473","possible_hits":"1",},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"                self.buffer[buf_idx..buf_idx + write_len]","class":"linePartCov","hits":"2","order":"3482","possible_hits":"3",},
{"lineNum":"  112","line":"                    .copy_from_slice(&inp[..write_len]);","class":"lineCov","hits":"1","order":"3487","possible_hits":"1",},
{"lineNum":"  113","line":"                self.length += write_len;","class":"linePartCov","hits":"1","order":"3492","possible_hits":"3",},
{"lineNum":"  114","line":"                if self.length % <Self as EngineTrait>::BLOCK_SIZE == 0 {","class":"lineCov","hits":"2","order":"3494","possible_hits":"2",},
{"lineNum":"  115","line":"                    self.process_block();","class":"lineCov","hits":"1","order":"3495","possible_hits":"1",},
{"lineNum":"  116","line":"                }"},
{"lineNum":"  117","line":"                inp = &inp[write_len..];","class":"lineCov","hits":"1","order":"3625","possible_hits":"1",},
{"lineNum":"  118","line":"            }"},
{"lineNum":"  119","line":"        }","class":"lineCov","hits":"1","order":"3626","possible_hits":"1",},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"        #[cfg(feature = \"fuzztarget\")]"},
{"lineNum":"  122","line":"        fn input(&mut self, inp: &[u8]) {"},
{"lineNum":"  123","line":"            for c in inp {"},
{"lineNum":"  124","line":"                self.buffer[0] ^= *c;"},
{"lineNum":"  125","line":"            }"},
{"lineNum":"  126","line":"            self.length += inp.len();"},
{"lineNum":"  127","line":"        }"},
{"lineNum":"  128","line":"    )"},
{"lineNum":"  129","line":");"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"#[cfg(test)]"},
{"lineNum":"  132","line":"mod test {"},
{"lineNum":"  133","line":"    use Hash;"},
{"lineNum":"  134","line":"    use sha256;"},
{"lineNum":"  135","line":""},
{"lineNum":"  136","line":"    #[test]"},
{"lineNum":"  137","line":"    fn borrow_slice_impl_to_vec() {"},
{"lineNum":"  138","line":"        // Test that the borrow_slice_impl macro gives to_vec."},
{"lineNum":"  139","line":"        let hash = sha256::Hash::hash(&[3, 50]);"},
{"lineNum":"  140","line":"        assert_eq!(hash.to_vec().len(), sha256::Hash::LEN);"},
{"lineNum":"  141","line":"    }"},
{"lineNum":"  142","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "lightning_invoice-99c93907235ac8b4", "date" : "2019-08-31 07:54:49", "instrumented" : 20, "covered" : 15,};
var merged_data = [];
