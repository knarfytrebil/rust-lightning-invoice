var data = {lines:[
{"lineNum":"    1","line":"/*!"},
{"lineNum":"    2","line":"This crate provides convenience methods for encoding and decoding numbers in"},
{"lineNum":"    3","line":"either [big-endian or little-endian order]."},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"The organization of the crate is pretty simple. A trait, [`ByteOrder`], specifies"},
{"lineNum":"    6","line":"byte conversion methods for each type of number in Rust (sans numbers that have"},
{"lineNum":"    7","line":"a platform dependent size like `usize` and `isize`). Two types, [`BigEndian`]"},
{"lineNum":"    8","line":"and [`LittleEndian`] implement these methods. Finally, [`ReadBytesExt`] and"},
{"lineNum":"    9","line":"[`WriteBytesExt`] provide convenience methods available to all types that"},
{"lineNum":"   10","line":"implement [`Read`] and [`Write`]."},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"An alias, [`NetworkEndian`], for [`BigEndian`] is provided to help improve"},
{"lineNum":"   13","line":"code clarity."},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"An additional alias, [`NativeEndian`], is provided for the endianness of the"},
{"lineNum":"   16","line":"local platform. This is convenient when serializing data for use and"},
{"lineNum":"   17","line":"conversions are not desired."},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"# Examples"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"Read unsigned 16 bit big-endian integers from a [`Read`] type:"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"```rust"},
{"lineNum":"   24","line":"use std::io::Cursor;"},
{"lineNum":"   25","line":"use byteorder::{BigEndian, ReadBytesExt};"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"let mut rdr = Cursor::new(vec![2, 5, 3, 0]);"},
{"lineNum":"   28","line":"// Note that we use type parameters to indicate which kind of byte order"},
{"lineNum":"   29","line":"// we want!"},
{"lineNum":"   30","line":"assert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());"},
{"lineNum":"   31","line":"assert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());"},
{"lineNum":"   32","line":"```"},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"Write unsigned 16 bit little-endian integers to a [`Write`] type:"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"```rust"},
{"lineNum":"   37","line":"use byteorder::{LittleEndian, WriteBytesExt};"},
{"lineNum":"   38","line":""},
{"lineNum":"   39","line":"let mut wtr = vec![];"},
{"lineNum":"   40","line":"wtr.write_u16::<LittleEndian>(517).unwrap();"},
{"lineNum":"   41","line":"wtr.write_u16::<LittleEndian>(768).unwrap();"},
{"lineNum":"   42","line":"assert_eq!(wtr, vec![5, 2, 0, 3]);"},
{"lineNum":"   43","line":"```"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"# Optional Features"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"This crate optionally provides support for 128 bit values (`i128` and `u128`)"},
{"lineNum":"   48","line":"when built with the `i128` feature enabled."},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"This crate can also be used without the standard library."},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"# Alternatives"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"Note that as of Rust 1.32, the standard numeric types provide built-in methods"},
{"lineNum":"   55","line":"like `to_le_bytes` and `from_le_bytes`, which support some of the same use"},
{"lineNum":"   56","line":"cases."},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"[big-endian or little-endian order]: https://en.wikipedia.org/wiki/Endianness"},
{"lineNum":"   59","line":"[`ByteOrder`]: trait.ByteOrder.html"},
{"lineNum":"   60","line":"[`BigEndian`]: enum.BigEndian.html"},
{"lineNum":"   61","line":"[`LittleEndian`]: enum.LittleEndian.html"},
{"lineNum":"   62","line":"[`ReadBytesExt`]: trait.ReadBytesExt.html"},
{"lineNum":"   63","line":"[`WriteBytesExt`]: trait.WriteBytesExt.html"},
{"lineNum":"   64","line":"[`NetworkEndian`]: type.NetworkEndian.html"},
{"lineNum":"   65","line":"[`NativeEndian`]: type.NativeEndian.html"},
{"lineNum":"   66","line":"[`Read`]: https://doc.rust-lang.org/std/io/trait.Read.html"},
{"lineNum":"   67","line":"[`Write`]: https://doc.rust-lang.org/std/io/trait.Write.html"},
{"lineNum":"   68","line":"*/"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"#![deny(missing_docs)]"},
{"lineNum":"   71","line":"#![cfg_attr(not(feature = \"std\"), no_std)]"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"#[cfg(feature = \"std\")]"},
{"lineNum":"   74","line":"extern crate core;"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"#[cfg(test)]"},
{"lineNum":"   77","line":"#[macro_use]"},
{"lineNum":"   78","line":"extern crate doc_comment;"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"#[cfg(test)]"},
{"lineNum":"   81","line":"doctest!(\"../README.md\");"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"use core::fmt::Debug;"},
{"lineNum":"   84","line":"use core::hash::Hash;"},
{"lineNum":"   85","line":"use core::ptr::copy_nonoverlapping;"},
{"lineNum":"   86","line":"use core::slice;"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"#[cfg(feature = \"std\")]"},
{"lineNum":"   89","line":"pub use io::{ReadBytesExt, WriteBytesExt};"},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"#[cfg(feature = \"std\")]"},
{"lineNum":"   92","line":"mod io;"},
{"lineNum":"   93","line":""},
{"lineNum":"   94","line":"#[inline]"},
{"lineNum":"   95","line":"fn extend_sign(val: u64, nbytes: usize) -> i64 {"},
{"lineNum":"   96","line":"    let shift = (8 - nbytes) * 8;"},
{"lineNum":"   97","line":"    (val << shift) as i64 >> shift"},
{"lineNum":"   98","line":"}"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"#[cfg(byteorder_i128)]"},
{"lineNum":"  101","line":"#[inline]"},
{"lineNum":"  102","line":"fn extend_sign128(val: u128, nbytes: usize) -> i128 {"},
{"lineNum":"  103","line":"    let shift = (16 - nbytes) * 8;"},
{"lineNum":"  104","line":"    (val << shift) as i128 >> shift"},
{"lineNum":"  105","line":"}"},
{"lineNum":"  106","line":""},
{"lineNum":"  107","line":"#[inline]"},
{"lineNum":"  108","line":"fn unextend_sign(val: i64, nbytes: usize) -> u64 {"},
{"lineNum":"  109","line":"    let shift = (8 - nbytes) * 8;"},
{"lineNum":"  110","line":"    (val << shift) as u64 >> shift"},
{"lineNum":"  111","line":"}"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"#[cfg(byteorder_i128)]"},
{"lineNum":"  114","line":"#[inline]"},
{"lineNum":"  115","line":"fn unextend_sign128(val: i128, nbytes: usize) -> u128 {"},
{"lineNum":"  116","line":"    let shift = (16 - nbytes) * 8;"},
{"lineNum":"  117","line":"    (val << shift) as u128 >> shift"},
{"lineNum":"  118","line":"}"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"#[inline]"},
{"lineNum":"  121","line":"fn pack_size(n: u64) -> usize {"},
{"lineNum":"  122","line":"    if n < 1 << 8 {"},
{"lineNum":"  123","line":"        1"},
{"lineNum":"  124","line":"    } else if n < 1 << 16 {"},
{"lineNum":"  125","line":"        2"},
{"lineNum":"  126","line":"    } else if n < 1 << 24 {"},
{"lineNum":"  127","line":"        3"},
{"lineNum":"  128","line":"    } else if n < 1 << 32 {"},
{"lineNum":"  129","line":"        4"},
{"lineNum":"  130","line":"    } else if n < 1 << 40 {"},
{"lineNum":"  131","line":"        5"},
{"lineNum":"  132","line":"    } else if n < 1 << 48 {"},
{"lineNum":"  133","line":"        6"},
{"lineNum":"  134","line":"    } else if n < 1 << 56 {"},
{"lineNum":"  135","line":"        7"},
{"lineNum":"  136","line":"    } else {"},
{"lineNum":"  137","line":"        8"},
{"lineNum":"  138","line":"    }"},
{"lineNum":"  139","line":"}"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"#[cfg(byteorder_i128)]"},
{"lineNum":"  142","line":"#[inline]"},
{"lineNum":"  143","line":"fn pack_size128(n: u128) -> usize {"},
{"lineNum":"  144","line":"    if n < 1 << 8 {"},
{"lineNum":"  145","line":"        1"},
{"lineNum":"  146","line":"    } else if n < 1 << 16 {"},
{"lineNum":"  147","line":"        2"},
{"lineNum":"  148","line":"    } else if n < 1 << 24 {"},
{"lineNum":"  149","line":"        3"},
{"lineNum":"  150","line":"    } else if n < 1 << 32 {"},
{"lineNum":"  151","line":"        4"},
{"lineNum":"  152","line":"    } else if n < 1 << 40 {"},
{"lineNum":"  153","line":"        5"},
{"lineNum":"  154","line":"    } else if n < 1 << 48 {"},
{"lineNum":"  155","line":"        6"},
{"lineNum":"  156","line":"    } else if n < 1 << 56 {"},
{"lineNum":"  157","line":"        7"},
{"lineNum":"  158","line":"    } else if n < 1 << 64 {"},
{"lineNum":"  159","line":"        8"},
{"lineNum":"  160","line":"    } else if n < 1 << 72 {"},
{"lineNum":"  161","line":"        9"},
{"lineNum":"  162","line":"    } else if n < 1 << 80 {"},
{"lineNum":"  163","line":"        10"},
{"lineNum":"  164","line":"    } else if n < 1 << 88 {"},
{"lineNum":"  165","line":"        11"},
{"lineNum":"  166","line":"    } else if n < 1 << 96 {"},
{"lineNum":"  167","line":"        12"},
{"lineNum":"  168","line":"    } else if n < 1 << 104 {"},
{"lineNum":"  169","line":"        13"},
{"lineNum":"  170","line":"    } else if n < 1 << 112 {"},
{"lineNum":"  171","line":"        14"},
{"lineNum":"  172","line":"    } else if n < 1 << 120 {"},
{"lineNum":"  173","line":"        15"},
{"lineNum":"  174","line":"    } else {"},
{"lineNum":"  175","line":"        16"},
{"lineNum":"  176","line":"    }"},
{"lineNum":"  177","line":"}"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"mod private {"},
{"lineNum":"  180","line":"    /// Sealed stops crates other than byteorder from implementing any traits"},
{"lineNum":"  181","line":"    /// that use it."},
{"lineNum":"  182","line":"    pub trait Sealed{}"},
{"lineNum":"  183","line":"    impl Sealed for super::LittleEndian {}"},
{"lineNum":"  184","line":"    impl Sealed for super::BigEndian {}"},
{"lineNum":"  185","line":"}"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"/// `ByteOrder` describes types that can serialize integers as bytes."},
{"lineNum":"  188","line":"///"},
{"lineNum":"  189","line":"/// Note that `Self` does not appear anywhere in this trait\'s definition!"},
{"lineNum":"  190","line":"/// Therefore, in order to use it, you\'ll need to use syntax like"},
{"lineNum":"  191","line":"/// `T::read_u16(&[0, 1])` where `T` implements `ByteOrder`."},
{"lineNum":"  192","line":"///"},
{"lineNum":"  193","line":"/// This crate provides two types that implement `ByteOrder`: [`BigEndian`]"},
{"lineNum":"  194","line":"/// and [`LittleEndian`]."},
{"lineNum":"  195","line":"/// This trait is sealed and cannot be implemented for callers to avoid"},
{"lineNum":"  196","line":"/// breaking backwards compatibility when adding new derived traits."},
{"lineNum":"  197","line":"///"},
{"lineNum":"  198","line":"/// # Examples"},
{"lineNum":"  199","line":"///"},
{"lineNum":"  200","line":"/// Write and read `u32` numbers in little endian order:"},
{"lineNum":"  201","line":"///"},
{"lineNum":"  202","line":"/// ```rust"},
{"lineNum":"  203","line":"/// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  204","line":"///"},
{"lineNum":"  205","line":"/// let mut buf = [0; 4];"},
{"lineNum":"  206","line":"/// LittleEndian::write_u32(&mut buf, 1_000_000);"},
{"lineNum":"  207","line":"/// assert_eq!(1_000_000, LittleEndian::read_u32(&buf));"},
{"lineNum":"  208","line":"/// ```"},
{"lineNum":"  209","line":"///"},
{"lineNum":"  210","line":"/// Write and read `i16` numbers in big endian order:"},
{"lineNum":"  211","line":"///"},
{"lineNum":"  212","line":"/// ```rust"},
{"lineNum":"  213","line":"/// use byteorder::{ByteOrder, BigEndian};"},
{"lineNum":"  214","line":"///"},
{"lineNum":"  215","line":"/// let mut buf = [0; 2];"},
{"lineNum":"  216","line":"/// BigEndian::write_i16(&mut buf, -5_000);"},
{"lineNum":"  217","line":"/// assert_eq!(-5_000, BigEndian::read_i16(&buf));"},
{"lineNum":"  218","line":"/// ```"},
{"lineNum":"  219","line":"///"},
{"lineNum":"  220","line":"/// [`BigEndian`]: enum.BigEndian.html"},
{"lineNum":"  221","line":"/// [`LittleEndian`]: enum.LittleEndian.html"},
{"lineNum":"  222","line":"pub trait ByteOrder"},
{"lineNum":"  223","line":"    : Clone + Copy + Debug + Default + Eq + Hash + Ord + PartialEq + PartialOrd"},
{"lineNum":"  224","line":"    + private::Sealed"},
{"lineNum":"  225","line":"{"},
{"lineNum":"  226","line":"    /// Reads an unsigned 16 bit integer from `buf`."},
{"lineNum":"  227","line":"    ///"},
{"lineNum":"  228","line":"    /// # Panics"},
{"lineNum":"  229","line":"    ///"},
{"lineNum":"  230","line":"    /// Panics when `buf.len() < 2`."},
{"lineNum":"  231","line":"    fn read_u16(buf: &[u8]) -> u16;"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"    /// Reads an unsigned 24 bit integer from `buf`, stored in u32."},
{"lineNum":"  234","line":"    ///"},
{"lineNum":"  235","line":"    /// # Panics"},
{"lineNum":"  236","line":"    ///"},
{"lineNum":"  237","line":"    /// Panics when `buf.len() < 3`."},
{"lineNum":"  238","line":"    ///"},
{"lineNum":"  239","line":"    /// # Examples"},
{"lineNum":"  240","line":"    ///"},
{"lineNum":"  241","line":"    /// Write and read 24 bit `u32` numbers in little endian order:"},
{"lineNum":"  242","line":"    ///"},
{"lineNum":"  243","line":"    /// ```rust"},
{"lineNum":"  244","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  245","line":"    ///"},
{"lineNum":"  246","line":"    /// let mut buf = [0; 3];"},
{"lineNum":"  247","line":"    /// LittleEndian::write_u24(&mut buf, 1_000_000);"},
{"lineNum":"  248","line":"    /// assert_eq!(1_000_000, LittleEndian::read_u24(&buf));"},
{"lineNum":"  249","line":"    /// ```"},
{"lineNum":"  250","line":"    fn read_u24(buf: &[u8]) -> u32 {"},
{"lineNum":"  251","line":"        Self::read_uint(buf, 3) as u32"},
{"lineNum":"  252","line":"    }"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"    /// Reads an unsigned 32 bit integer from `buf`."},
{"lineNum":"  255","line":"    ///"},
{"lineNum":"  256","line":"    /// # Panics"},
{"lineNum":"  257","line":"    ///"},
{"lineNum":"  258","line":"    /// Panics when `buf.len() < 4`."},
{"lineNum":"  259","line":"    ///"},
{"lineNum":"  260","line":"    /// # Examples"},
{"lineNum":"  261","line":"    ///"},
{"lineNum":"  262","line":"    /// Write and read `u32` numbers in little endian order:"},
{"lineNum":"  263","line":"    ///"},
{"lineNum":"  264","line":"    /// ```rust"},
{"lineNum":"  265","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  266","line":"    ///"},
{"lineNum":"  267","line":"    /// let mut buf = [0; 4];"},
{"lineNum":"  268","line":"    /// LittleEndian::write_u32(&mut buf, 1_000_000);"},
{"lineNum":"  269","line":"    /// assert_eq!(1_000_000, LittleEndian::read_u32(&buf));"},
{"lineNum":"  270","line":"    /// ```"},
{"lineNum":"  271","line":"    fn read_u32(buf: &[u8]) -> u32;"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"    /// Reads an unsigned 48 bit integer from `buf`, stored in u64."},
{"lineNum":"  274","line":"    ///"},
{"lineNum":"  275","line":"    /// # Panics"},
{"lineNum":"  276","line":"    ///"},
{"lineNum":"  277","line":"    /// Panics when `buf.len() < 6`."},
{"lineNum":"  278","line":"    ///"},
{"lineNum":"  279","line":"    /// # Examples"},
{"lineNum":"  280","line":"    ///"},
{"lineNum":"  281","line":"    /// Write and read 48 bit `u64` numbers in little endian order:"},
{"lineNum":"  282","line":"    ///"},
{"lineNum":"  283","line":"    /// ```rust"},
{"lineNum":"  284","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  285","line":"    ///"},
{"lineNum":"  286","line":"    /// let mut buf = [0; 6];"},
{"lineNum":"  287","line":"    /// LittleEndian::write_u48(&mut buf, 1_000_000_000_000);"},
{"lineNum":"  288","line":"    /// assert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));"},
{"lineNum":"  289","line":"    /// ```"},
{"lineNum":"  290","line":"    fn read_u48(buf: &[u8]) -> u64 {"},
{"lineNum":"  291","line":"        Self::read_uint(buf, 6) as u64"},
{"lineNum":"  292","line":"    }"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"    /// Reads an unsigned 64 bit integer from `buf`."},
{"lineNum":"  295","line":"    ///"},
{"lineNum":"  296","line":"    /// # Panics"},
{"lineNum":"  297","line":"    ///"},
{"lineNum":"  298","line":"    /// Panics when `buf.len() < 8`."},
{"lineNum":"  299","line":"    ///"},
{"lineNum":"  300","line":"    /// # Examples"},
{"lineNum":"  301","line":"    ///"},
{"lineNum":"  302","line":"    /// Write and read `u64` numbers in little endian order:"},
{"lineNum":"  303","line":"    ///"},
{"lineNum":"  304","line":"    /// ```rust"},
{"lineNum":"  305","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  306","line":"    ///"},
{"lineNum":"  307","line":"    /// let mut buf = [0; 8];"},
{"lineNum":"  308","line":"    /// LittleEndian::write_u64(&mut buf, 1_000_000);"},
{"lineNum":"  309","line":"    /// assert_eq!(1_000_000, LittleEndian::read_u64(&buf));"},
{"lineNum":"  310","line":"    /// ```"},
{"lineNum":"  311","line":"    fn read_u64(buf: &[u8]) -> u64;"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"    /// Reads an unsigned 128 bit integer from `buf`."},
{"lineNum":"  314","line":"    ///"},
{"lineNum":"  315","line":"    /// # Panics"},
{"lineNum":"  316","line":"    ///"},
{"lineNum":"  317","line":"    /// Panics when `buf.len() < 16`."},
{"lineNum":"  318","line":"    ///"},
{"lineNum":"  319","line":"    /// # Examples"},
{"lineNum":"  320","line":"    ///"},
{"lineNum":"  321","line":"    /// Write and read `u128` numbers in little endian order:"},
{"lineNum":"  322","line":"    ///"},
{"lineNum":"  323","line":"    /// ```rust"},
{"lineNum":"  324","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  325","line":"    ///"},
{"lineNum":"  326","line":"    /// let mut buf = [0; 16];"},
{"lineNum":"  327","line":"    /// LittleEndian::write_u128(&mut buf, 1_000_000);"},
{"lineNum":"  328","line":"    /// assert_eq!(1_000_000, LittleEndian::read_u128(&buf));"},
{"lineNum":"  329","line":"    /// ```"},
{"lineNum":"  330","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":"  331","line":"    fn read_u128(buf: &[u8]) -> u128;"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"    /// Reads an unsigned n-bytes integer from `buf`."},
{"lineNum":"  334","line":"    ///"},
{"lineNum":"  335","line":"    /// # Panics"},
{"lineNum":"  336","line":"    ///"},
{"lineNum":"  337","line":"    /// Panics when `nbytes < 1` or `nbytes > 8` or"},
{"lineNum":"  338","line":"    /// `buf.len() < nbytes`"},
{"lineNum":"  339","line":"    ///"},
{"lineNum":"  340","line":"    /// # Examples"},
{"lineNum":"  341","line":"    ///"},
{"lineNum":"  342","line":"    /// Write and read an n-byte number in little endian order:"},
{"lineNum":"  343","line":"    ///"},
{"lineNum":"  344","line":"    /// ```rust"},
{"lineNum":"  345","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  346","line":"    ///"},
{"lineNum":"  347","line":"    /// let mut buf = [0; 3];"},
{"lineNum":"  348","line":"    /// LittleEndian::write_uint(&mut buf, 1_000_000, 3);"},
{"lineNum":"  349","line":"    /// assert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));"},
{"lineNum":"  350","line":"    /// ```"},
{"lineNum":"  351","line":"    fn read_uint(buf: &[u8], nbytes: usize) -> u64;"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"    /// Reads an unsigned n-bytes integer from `buf`."},
{"lineNum":"  354","line":"    ///"},
{"lineNum":"  355","line":"    /// # Panics"},
{"lineNum":"  356","line":"    ///"},
{"lineNum":"  357","line":"    /// Panics when `nbytes < 1` or `nbytes > 16` or"},
{"lineNum":"  358","line":"    /// `buf.len() < nbytes`"},
{"lineNum":"  359","line":"    ///"},
{"lineNum":"  360","line":"    /// # Examples"},
{"lineNum":"  361","line":"    ///"},
{"lineNum":"  362","line":"    /// Write and read an n-byte number in little endian order:"},
{"lineNum":"  363","line":"    ///"},
{"lineNum":"  364","line":"    /// ```rust"},
{"lineNum":"  365","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  366","line":"    ///"},
{"lineNum":"  367","line":"    /// let mut buf = [0; 3];"},
{"lineNum":"  368","line":"    /// LittleEndian::write_uint128(&mut buf, 1_000_000, 3);"},
{"lineNum":"  369","line":"    /// assert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));"},
{"lineNum":"  370","line":"    /// ```"},
{"lineNum":"  371","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":"  372","line":"    fn read_uint128(buf: &[u8], nbytes: usize) -> u128;"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"    /// Writes an unsigned 16 bit integer `n` to `buf`."},
{"lineNum":"  375","line":"    ///"},
{"lineNum":"  376","line":"    /// # Panics"},
{"lineNum":"  377","line":"    ///"},
{"lineNum":"  378","line":"    /// Panics when `buf.len() < 2`."},
{"lineNum":"  379","line":"    ///"},
{"lineNum":"  380","line":"    /// # Examples"},
{"lineNum":"  381","line":"    ///"},
{"lineNum":"  382","line":"    /// Write and read `u16` numbers in little endian order:"},
{"lineNum":"  383","line":"    ///"},
{"lineNum":"  384","line":"    /// ```rust"},
{"lineNum":"  385","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  386","line":"    ///"},
{"lineNum":"  387","line":"    /// let mut buf = [0; 2];"},
{"lineNum":"  388","line":"    /// LittleEndian::write_u16(&mut buf, 1_000);"},
{"lineNum":"  389","line":"    /// assert_eq!(1_000, LittleEndian::read_u16(&buf));"},
{"lineNum":"  390","line":"    /// ```"},
{"lineNum":"  391","line":"    fn write_u16(buf: &mut [u8], n: u16);"},
{"lineNum":"  392","line":""},
{"lineNum":"  393","line":"    /// Writes an unsigned 24 bit integer `n` to `buf`, stored in u32."},
{"lineNum":"  394","line":"    ///"},
{"lineNum":"  395","line":"    /// # Panics"},
{"lineNum":"  396","line":"    ///"},
{"lineNum":"  397","line":"    /// Panics when `buf.len() < 3`."},
{"lineNum":"  398","line":"    ///"},
{"lineNum":"  399","line":"    /// # Examples"},
{"lineNum":"  400","line":"    ///"},
{"lineNum":"  401","line":"    /// Write and read 24 bit `u32` numbers in little endian order:"},
{"lineNum":"  402","line":"    ///"},
{"lineNum":"  403","line":"    /// ```rust"},
{"lineNum":"  404","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  405","line":"    ///"},
{"lineNum":"  406","line":"    /// let mut buf = [0; 3];"},
{"lineNum":"  407","line":"    /// LittleEndian::write_u24(&mut buf, 1_000_000);"},
{"lineNum":"  408","line":"    /// assert_eq!(1_000_000, LittleEndian::read_u24(&buf));"},
{"lineNum":"  409","line":"    /// ```"},
{"lineNum":"  410","line":"    fn write_u24(buf: &mut [u8], n: u32) {"},
{"lineNum":"  411","line":"        Self::write_uint(buf, n as u64, 3)"},
{"lineNum":"  412","line":"    }"},
{"lineNum":"  413","line":""},
{"lineNum":"  414","line":"    /// Writes an unsigned 32 bit integer `n` to `buf`."},
{"lineNum":"  415","line":"    ///"},
{"lineNum":"  416","line":"    /// # Panics"},
{"lineNum":"  417","line":"    ///"},
{"lineNum":"  418","line":"    /// Panics when `buf.len() < 4`."},
{"lineNum":"  419","line":"    ///"},
{"lineNum":"  420","line":"    /// # Examples"},
{"lineNum":"  421","line":"    ///"},
{"lineNum":"  422","line":"    /// Write and read `u32` numbers in little endian order:"},
{"lineNum":"  423","line":"    ///"},
{"lineNum":"  424","line":"    /// ```rust"},
{"lineNum":"  425","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  426","line":"    ///"},
{"lineNum":"  427","line":"    /// let mut buf = [0; 4];"},
{"lineNum":"  428","line":"    /// LittleEndian::write_u32(&mut buf, 1_000_000);"},
{"lineNum":"  429","line":"    /// assert_eq!(1_000_000, LittleEndian::read_u32(&buf));"},
{"lineNum":"  430","line":"    /// ```"},
{"lineNum":"  431","line":"    fn write_u32(buf: &mut [u8], n: u32);"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"    /// Writes an unsigned 48 bit integer `n` to `buf`, stored in u64."},
{"lineNum":"  434","line":"    ///"},
{"lineNum":"  435","line":"    /// # Panics"},
{"lineNum":"  436","line":"    ///"},
{"lineNum":"  437","line":"    /// Panics when `buf.len() < 6`."},
{"lineNum":"  438","line":"    ///"},
{"lineNum":"  439","line":"    /// # Examples"},
{"lineNum":"  440","line":"    ///"},
{"lineNum":"  441","line":"    /// Write and read 48 bit `u64` numbers in little endian order:"},
{"lineNum":"  442","line":"    ///"},
{"lineNum":"  443","line":"    /// ```rust"},
{"lineNum":"  444","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  445","line":"    ///"},
{"lineNum":"  446","line":"    /// let mut buf = [0; 6];"},
{"lineNum":"  447","line":"    /// LittleEndian::write_u48(&mut buf, 1_000_000_000_000);"},
{"lineNum":"  448","line":"    /// assert_eq!(1_000_000_000_000, LittleEndian::read_u48(&buf));"},
{"lineNum":"  449","line":"    /// ```"},
{"lineNum":"  450","line":"    fn write_u48(buf: &mut [u8], n: u64) {"},
{"lineNum":"  451","line":"        Self::write_uint(buf, n as u64, 6)"},
{"lineNum":"  452","line":"    }"},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"    /// Writes an unsigned 64 bit integer `n` to `buf`."},
{"lineNum":"  455","line":"    ///"},
{"lineNum":"  456","line":"    /// # Panics"},
{"lineNum":"  457","line":"    ///"},
{"lineNum":"  458","line":"    /// Panics when `buf.len() < 8`."},
{"lineNum":"  459","line":"    ///"},
{"lineNum":"  460","line":"    /// # Examples"},
{"lineNum":"  461","line":"    ///"},
{"lineNum":"  462","line":"    /// Write and read `u64` numbers in little endian order:"},
{"lineNum":"  463","line":"    ///"},
{"lineNum":"  464","line":"    /// ```rust"},
{"lineNum":"  465","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  466","line":"    ///"},
{"lineNum":"  467","line":"    /// let mut buf = [0; 8];"},
{"lineNum":"  468","line":"    /// LittleEndian::write_u64(&mut buf, 1_000_000);"},
{"lineNum":"  469","line":"    /// assert_eq!(1_000_000, LittleEndian::read_u64(&buf));"},
{"lineNum":"  470","line":"    /// ```"},
{"lineNum":"  471","line":"    fn write_u64(buf: &mut [u8], n: u64);"},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"    /// Writes an unsigned 128 bit integer `n` to `buf`."},
{"lineNum":"  474","line":"    ///"},
{"lineNum":"  475","line":"    /// # Panics"},
{"lineNum":"  476","line":"    ///"},
{"lineNum":"  477","line":"    /// Panics when `buf.len() < 16`."},
{"lineNum":"  478","line":"    ///"},
{"lineNum":"  479","line":"    /// # Examples"},
{"lineNum":"  480","line":"    ///"},
{"lineNum":"  481","line":"    /// Write and read `u128` numbers in little endian order:"},
{"lineNum":"  482","line":"    ///"},
{"lineNum":"  483","line":"    /// ```rust"},
{"lineNum":"  484","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  485","line":"    ///"},
{"lineNum":"  486","line":"    /// let mut buf = [0; 16];"},
{"lineNum":"  487","line":"    /// LittleEndian::write_u128(&mut buf, 1_000_000);"},
{"lineNum":"  488","line":"    /// assert_eq!(1_000_000, LittleEndian::read_u128(&buf));"},
{"lineNum":"  489","line":"    /// ```"},
{"lineNum":"  490","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":"  491","line":"    fn write_u128(buf: &mut [u8], n: u128);"},
{"lineNum":"  492","line":""},
{"lineNum":"  493","line":"    /// Writes an unsigned integer `n` to `buf` using only `nbytes`."},
{"lineNum":"  494","line":"    ///"},
{"lineNum":"  495","line":"    /// # Panics"},
{"lineNum":"  496","line":"    ///"},
{"lineNum":"  497","line":"    /// If `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then"},
{"lineNum":"  498","line":"    /// this method panics."},
{"lineNum":"  499","line":"    ///"},
{"lineNum":"  500","line":"    /// # Examples"},
{"lineNum":"  501","line":"    ///"},
{"lineNum":"  502","line":"    /// Write and read an n-byte number in little endian order:"},
{"lineNum":"  503","line":"    ///"},
{"lineNum":"  504","line":"    /// ```rust"},
{"lineNum":"  505","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  506","line":"    ///"},
{"lineNum":"  507","line":"    /// let mut buf = [0; 3];"},
{"lineNum":"  508","line":"    /// LittleEndian::write_uint(&mut buf, 1_000_000, 3);"},
{"lineNum":"  509","line":"    /// assert_eq!(1_000_000, LittleEndian::read_uint(&buf, 3));"},
{"lineNum":"  510","line":"    /// ```"},
{"lineNum":"  511","line":"    fn write_uint(buf: &mut [u8], n: u64, nbytes: usize);"},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"    /// Writes an unsigned integer `n` to `buf` using only `nbytes`."},
{"lineNum":"  514","line":"    ///"},
{"lineNum":"  515","line":"    /// # Panics"},
{"lineNum":"  516","line":"    ///"},
{"lineNum":"  517","line":"    /// If `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then"},
{"lineNum":"  518","line":"    /// this method panics."},
{"lineNum":"  519","line":"    ///"},
{"lineNum":"  520","line":"    /// # Examples"},
{"lineNum":"  521","line":"    ///"},
{"lineNum":"  522","line":"    /// Write and read an n-byte number in little endian order:"},
{"lineNum":"  523","line":"    ///"},
{"lineNum":"  524","line":"    /// ```rust"},
{"lineNum":"  525","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  526","line":"    ///"},
{"lineNum":"  527","line":"    /// let mut buf = [0; 3];"},
{"lineNum":"  528","line":"    /// LittleEndian::write_uint128(&mut buf, 1_000_000, 3);"},
{"lineNum":"  529","line":"    /// assert_eq!(1_000_000, LittleEndian::read_uint128(&buf, 3));"},
{"lineNum":"  530","line":"    /// ```"},
{"lineNum":"  531","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":"  532","line":"    fn write_uint128(buf: &mut [u8], n: u128, nbytes: usize);"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"    /// Reads a signed 16 bit integer from `buf`."},
{"lineNum":"  535","line":"    ///"},
{"lineNum":"  536","line":"    /// # Panics"},
{"lineNum":"  537","line":"    ///"},
{"lineNum":"  538","line":"    /// Panics when `buf.len() < 2`."},
{"lineNum":"  539","line":"    ///"},
{"lineNum":"  540","line":"    /// # Examples"},
{"lineNum":"  541","line":"    ///"},
{"lineNum":"  542","line":"    /// Write and read `i16` numbers in little endian order:"},
{"lineNum":"  543","line":"    ///"},
{"lineNum":"  544","line":"    /// ```rust"},
{"lineNum":"  545","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  546","line":"    ///"},
{"lineNum":"  547","line":"    /// let mut buf = [0; 2];"},
{"lineNum":"  548","line":"    /// LittleEndian::write_i16(&mut buf, -1_000);"},
{"lineNum":"  549","line":"    /// assert_eq!(-1_000, LittleEndian::read_i16(&buf));"},
{"lineNum":"  550","line":"    /// ```"},
{"lineNum":"  551","line":"    #[inline]"},
{"lineNum":"  552","line":"    fn read_i16(buf: &[u8]) -> i16 {"},
{"lineNum":"  553","line":"        Self::read_u16(buf) as i16"},
{"lineNum":"  554","line":"    }"},
{"lineNum":"  555","line":""},
{"lineNum":"  556","line":"    /// Reads a signed 24 bit integer from `buf`, stored in i32."},
{"lineNum":"  557","line":"    ///"},
{"lineNum":"  558","line":"    /// # Panics"},
{"lineNum":"  559","line":"    ///"},
{"lineNum":"  560","line":"    /// Panics when `buf.len() < 3`."},
{"lineNum":"  561","line":"    ///"},
{"lineNum":"  562","line":"    /// # Examples"},
{"lineNum":"  563","line":"    ///"},
{"lineNum":"  564","line":"    /// Write and read 24 bit `i32` numbers in little endian order:"},
{"lineNum":"  565","line":"    ///"},
{"lineNum":"  566","line":"    /// ```rust"},
{"lineNum":"  567","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  568","line":"    ///"},
{"lineNum":"  569","line":"    /// let mut buf = [0; 3];"},
{"lineNum":"  570","line":"    /// LittleEndian::write_i24(&mut buf, -1_000_000);"},
{"lineNum":"  571","line":"    /// assert_eq!(-1_000_000, LittleEndian::read_i24(&buf));"},
{"lineNum":"  572","line":"    /// ```"},
{"lineNum":"  573","line":"    #[inline]"},
{"lineNum":"  574","line":"    fn read_i24(buf: &[u8]) -> i32 {"},
{"lineNum":"  575","line":"        Self::read_int(buf, 3) as i32"},
{"lineNum":"  576","line":"    }"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"    /// Reads a signed 32 bit integer from `buf`."},
{"lineNum":"  579","line":"    ///"},
{"lineNum":"  580","line":"    /// # Panics"},
{"lineNum":"  581","line":"    ///"},
{"lineNum":"  582","line":"    /// Panics when `buf.len() < 4`."},
{"lineNum":"  583","line":"    ///"},
{"lineNum":"  584","line":"    /// # Examples"},
{"lineNum":"  585","line":"    ///"},
{"lineNum":"  586","line":"    /// Write and read `i32` numbers in little endian order:"},
{"lineNum":"  587","line":"    ///"},
{"lineNum":"  588","line":"    /// ```rust"},
{"lineNum":"  589","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  590","line":"    ///"},
{"lineNum":"  591","line":"    /// let mut buf = [0; 4];"},
{"lineNum":"  592","line":"    /// LittleEndian::write_i32(&mut buf, -1_000_000);"},
{"lineNum":"  593","line":"    /// assert_eq!(-1_000_000, LittleEndian::read_i32(&buf));"},
{"lineNum":"  594","line":"    /// ```"},
{"lineNum":"  595","line":"    #[inline]"},
{"lineNum":"  596","line":"    fn read_i32(buf: &[u8]) -> i32 {"},
{"lineNum":"  597","line":"        Self::read_u32(buf) as i32"},
{"lineNum":"  598","line":"    }"},
{"lineNum":"  599","line":""},
{"lineNum":"  600","line":"    /// Reads a signed 48 bit integer from `buf`, stored in i64."},
{"lineNum":"  601","line":"    ///"},
{"lineNum":"  602","line":"    /// # Panics"},
{"lineNum":"  603","line":"    ///"},
{"lineNum":"  604","line":"    /// Panics when `buf.len() < 6`."},
{"lineNum":"  605","line":"    ///"},
{"lineNum":"  606","line":"    /// # Examples"},
{"lineNum":"  607","line":"    ///"},
{"lineNum":"  608","line":"    /// Write and read 48 bit `i64` numbers in little endian order:"},
{"lineNum":"  609","line":"    ///"},
{"lineNum":"  610","line":"    /// ```rust"},
{"lineNum":"  611","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  612","line":"    ///"},
{"lineNum":"  613","line":"    /// let mut buf = [0; 6];"},
{"lineNum":"  614","line":"    /// LittleEndian::write_i48(&mut buf, -1_000_000_000_000);"},
{"lineNum":"  615","line":"    /// assert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));"},
{"lineNum":"  616","line":"    /// ```"},
{"lineNum":"  617","line":"    #[inline]"},
{"lineNum":"  618","line":"    fn read_i48(buf: &[u8]) -> i64 {"},
{"lineNum":"  619","line":"        Self::read_int(buf, 6) as i64"},
{"lineNum":"  620","line":"    }"},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"    /// Reads a signed 64 bit integer from `buf`."},
{"lineNum":"  623","line":"    ///"},
{"lineNum":"  624","line":"    /// # Panics"},
{"lineNum":"  625","line":"    ///"},
{"lineNum":"  626","line":"    /// Panics when `buf.len() < 8`."},
{"lineNum":"  627","line":"    ///"},
{"lineNum":"  628","line":"    /// # Examples"},
{"lineNum":"  629","line":"    ///"},
{"lineNum":"  630","line":"    /// Write and read `i64` numbers in little endian order:"},
{"lineNum":"  631","line":"    ///"},
{"lineNum":"  632","line":"    /// ```rust"},
{"lineNum":"  633","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  634","line":"    ///"},
{"lineNum":"  635","line":"    /// let mut buf = [0; 8];"},
{"lineNum":"  636","line":"    /// LittleEndian::write_i64(&mut buf, -1_000_000_000);"},
{"lineNum":"  637","line":"    /// assert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));"},
{"lineNum":"  638","line":"    /// ```"},
{"lineNum":"  639","line":"    #[inline]"},
{"lineNum":"  640","line":"    fn read_i64(buf: &[u8]) -> i64 {"},
{"lineNum":"  641","line":"        Self::read_u64(buf) as i64"},
{"lineNum":"  642","line":"    }"},
{"lineNum":"  643","line":""},
{"lineNum":"  644","line":"    /// Reads a signed 128 bit integer from `buf`."},
{"lineNum":"  645","line":"    ///"},
{"lineNum":"  646","line":"    /// # Panics"},
{"lineNum":"  647","line":"    ///"},
{"lineNum":"  648","line":"    /// Panics when `buf.len() < 16`."},
{"lineNum":"  649","line":"    ///"},
{"lineNum":"  650","line":"    /// # Examples"},
{"lineNum":"  651","line":"    ///"},
{"lineNum":"  652","line":"    /// Write and read `i128` numbers in little endian order:"},
{"lineNum":"  653","line":"    ///"},
{"lineNum":"  654","line":"    /// ```rust"},
{"lineNum":"  655","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  656","line":"    ///"},
{"lineNum":"  657","line":"    /// let mut buf = [0; 16];"},
{"lineNum":"  658","line":"    /// LittleEndian::write_i128(&mut buf, -1_000_000_000);"},
{"lineNum":"  659","line":"    /// assert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));"},
{"lineNum":"  660","line":"    /// ```"},
{"lineNum":"  661","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":"  662","line":"    #[inline]"},
{"lineNum":"  663","line":"    fn read_i128(buf: &[u8]) -> i128 {"},
{"lineNum":"  664","line":"        Self::read_u128(buf) as i128"},
{"lineNum":"  665","line":"    }"},
{"lineNum":"  666","line":""},
{"lineNum":"  667","line":"    /// Reads a signed n-bytes integer from `buf`."},
{"lineNum":"  668","line":"    ///"},
{"lineNum":"  669","line":"    /// # Panics"},
{"lineNum":"  670","line":"    ///"},
{"lineNum":"  671","line":"    /// Panics when `nbytes < 1` or `nbytes > 8` or"},
{"lineNum":"  672","line":"    /// `buf.len() < nbytes`"},
{"lineNum":"  673","line":"    ///"},
{"lineNum":"  674","line":"    /// # Examples"},
{"lineNum":"  675","line":"    ///"},
{"lineNum":"  676","line":"    /// Write and read n-length signed numbers in little endian order:"},
{"lineNum":"  677","line":"    ///"},
{"lineNum":"  678","line":"    /// ```rust"},
{"lineNum":"  679","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  680","line":"    ///"},
{"lineNum":"  681","line":"    /// let mut buf = [0; 3];"},
{"lineNum":"  682","line":"    /// LittleEndian::write_int(&mut buf, -1_000, 3);"},
{"lineNum":"  683","line":"    /// assert_eq!(-1_000, LittleEndian::read_int(&buf, 3));"},
{"lineNum":"  684","line":"    /// ```"},
{"lineNum":"  685","line":"    #[inline]"},
{"lineNum":"  686","line":"    fn read_int(buf: &[u8], nbytes: usize) -> i64 {"},
{"lineNum":"  687","line":"        extend_sign(Self::read_uint(buf, nbytes), nbytes)"},
{"lineNum":"  688","line":"    }"},
{"lineNum":"  689","line":""},
{"lineNum":"  690","line":"    /// Reads a signed n-bytes integer from `buf`."},
{"lineNum":"  691","line":"    ///"},
{"lineNum":"  692","line":"    /// # Panics"},
{"lineNum":"  693","line":"    ///"},
{"lineNum":"  694","line":"    /// Panics when `nbytes < 1` or `nbytes > 16` or"},
{"lineNum":"  695","line":"    /// `buf.len() < nbytes`"},
{"lineNum":"  696","line":"    ///"},
{"lineNum":"  697","line":"    /// # Examples"},
{"lineNum":"  698","line":"    ///"},
{"lineNum":"  699","line":"    /// Write and read n-length signed numbers in little endian order:"},
{"lineNum":"  700","line":"    ///"},
{"lineNum":"  701","line":"    /// ```rust"},
{"lineNum":"  702","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  703","line":"    ///"},
{"lineNum":"  704","line":"    /// let mut buf = [0; 3];"},
{"lineNum":"  705","line":"    /// LittleEndian::write_int128(&mut buf, -1_000, 3);"},
{"lineNum":"  706","line":"    /// assert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));"},
{"lineNum":"  707","line":"    /// ```"},
{"lineNum":"  708","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":"  709","line":"    #[inline]"},
{"lineNum":"  710","line":"    fn read_int128(buf: &[u8], nbytes: usize) -> i128 {"},
{"lineNum":"  711","line":"        extend_sign128(Self::read_uint128(buf, nbytes), nbytes)"},
{"lineNum":"  712","line":"    }"},
{"lineNum":"  713","line":""},
{"lineNum":"  714","line":"    /// Reads a IEEE754 single-precision (4 bytes) floating point number."},
{"lineNum":"  715","line":"    ///"},
{"lineNum":"  716","line":"    /// # Panics"},
{"lineNum":"  717","line":"    ///"},
{"lineNum":"  718","line":"    /// Panics when `buf.len() < 4`."},
{"lineNum":"  719","line":"    ///"},
{"lineNum":"  720","line":"    /// # Examples"},
{"lineNum":"  721","line":"    ///"},
{"lineNum":"  722","line":"    /// Write and read `f32` numbers in little endian order:"},
{"lineNum":"  723","line":"    ///"},
{"lineNum":"  724","line":"    /// ```rust"},
{"lineNum":"  725","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  726","line":"    ///"},
{"lineNum":"  727","line":"    /// let e = 2.71828;"},
{"lineNum":"  728","line":"    /// let mut buf = [0; 4];"},
{"lineNum":"  729","line":"    /// LittleEndian::write_f32(&mut buf, e);"},
{"lineNum":"  730","line":"    /// assert_eq!(e, LittleEndian::read_f32(&buf));"},
{"lineNum":"  731","line":"    /// ```"},
{"lineNum":"  732","line":"    #[inline]"},
{"lineNum":"  733","line":"    fn read_f32(buf: &[u8]) -> f32 {"},
{"lineNum":"  734","line":"        unsafe { *(&Self::read_u32(buf) as *const u32 as *const f32) }"},
{"lineNum":"  735","line":"    }"},
{"lineNum":"  736","line":""},
{"lineNum":"  737","line":"    /// Reads a IEEE754 double-precision (8 bytes) floating point number."},
{"lineNum":"  738","line":"    ///"},
{"lineNum":"  739","line":"    /// # Panics"},
{"lineNum":"  740","line":"    ///"},
{"lineNum":"  741","line":"    /// Panics when `buf.len() < 8`."},
{"lineNum":"  742","line":"    ///"},
{"lineNum":"  743","line":"    /// # Examples"},
{"lineNum":"  744","line":"    ///"},
{"lineNum":"  745","line":"    /// Write and read `f64` numbers in little endian order:"},
{"lineNum":"  746","line":"    ///"},
{"lineNum":"  747","line":"    /// ```rust"},
{"lineNum":"  748","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  749","line":"    ///"},
{"lineNum":"  750","line":"    /// let phi = 1.6180339887;"},
{"lineNum":"  751","line":"    /// let mut buf = [0; 8];"},
{"lineNum":"  752","line":"    /// LittleEndian::write_f64(&mut buf, phi);"},
{"lineNum":"  753","line":"    /// assert_eq!(phi, LittleEndian::read_f64(&buf));"},
{"lineNum":"  754","line":"    /// ```"},
{"lineNum":"  755","line":"    #[inline]"},
{"lineNum":"  756","line":"    fn read_f64(buf: &[u8]) -> f64 {"},
{"lineNum":"  757","line":"        unsafe { *(&Self::read_u64(buf) as *const u64 as *const f64) }"},
{"lineNum":"  758","line":"    }"},
{"lineNum":"  759","line":""},
{"lineNum":"  760","line":"    /// Writes a signed 16 bit integer `n` to `buf`."},
{"lineNum":"  761","line":"    ///"},
{"lineNum":"  762","line":"    /// # Panics"},
{"lineNum":"  763","line":"    ///"},
{"lineNum":"  764","line":"    /// Panics when `buf.len() < 2`."},
{"lineNum":"  765","line":"    ///"},
{"lineNum":"  766","line":"    /// # Examples"},
{"lineNum":"  767","line":"    ///"},
{"lineNum":"  768","line":"    /// Write and read `i16` numbers in little endian order:"},
{"lineNum":"  769","line":"    ///"},
{"lineNum":"  770","line":"    /// ```rust"},
{"lineNum":"  771","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  772","line":"    ///"},
{"lineNum":"  773","line":"    /// let mut buf = [0; 2];"},
{"lineNum":"  774","line":"    /// LittleEndian::write_i16(&mut buf, -1_000);"},
{"lineNum":"  775","line":"    /// assert_eq!(-1_000, LittleEndian::read_i16(&buf));"},
{"lineNum":"  776","line":"    /// ```"},
{"lineNum":"  777","line":"    #[inline]"},
{"lineNum":"  778","line":"    fn write_i16(buf: &mut [u8], n: i16) {"},
{"lineNum":"  779","line":"        Self::write_u16(buf, n as u16)"},
{"lineNum":"  780","line":"    }"},
{"lineNum":"  781","line":""},
{"lineNum":"  782","line":"    /// Writes a signed 24 bit integer `n` to `buf`, stored in i32."},
{"lineNum":"  783","line":"    ///"},
{"lineNum":"  784","line":"    /// # Panics"},
{"lineNum":"  785","line":"    ///"},
{"lineNum":"  786","line":"    /// Panics when `buf.len() < 3`."},
{"lineNum":"  787","line":"    ///"},
{"lineNum":"  788","line":"    /// # Examples"},
{"lineNum":"  789","line":"    ///"},
{"lineNum":"  790","line":"    /// Write and read 24 bit `i32` numbers in little endian order:"},
{"lineNum":"  791","line":"    ///"},
{"lineNum":"  792","line":"    /// ```rust"},
{"lineNum":"  793","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  794","line":"    ///"},
{"lineNum":"  795","line":"    /// let mut buf = [0; 3];"},
{"lineNum":"  796","line":"    /// LittleEndian::write_i24(&mut buf, -1_000_000);"},
{"lineNum":"  797","line":"    /// assert_eq!(-1_000_000, LittleEndian::read_i24(&buf));"},
{"lineNum":"  798","line":"    /// ```"},
{"lineNum":"  799","line":"    #[inline]"},
{"lineNum":"  800","line":"    fn write_i24(buf: &mut [u8], n: i32) {"},
{"lineNum":"  801","line":"        Self::write_int(buf, n as i64, 3)"},
{"lineNum":"  802","line":"    }"},
{"lineNum":"  803","line":""},
{"lineNum":"  804","line":"    /// Writes a signed 32 bit integer `n` to `buf`."},
{"lineNum":"  805","line":"    ///"},
{"lineNum":"  806","line":"    /// # Panics"},
{"lineNum":"  807","line":"    ///"},
{"lineNum":"  808","line":"    /// Panics when `buf.len() < 4`."},
{"lineNum":"  809","line":"    ///"},
{"lineNum":"  810","line":"    /// # Examples"},
{"lineNum":"  811","line":"    ///"},
{"lineNum":"  812","line":"    /// Write and read `i32` numbers in little endian order:"},
{"lineNum":"  813","line":"    ///"},
{"lineNum":"  814","line":"    /// ```rust"},
{"lineNum":"  815","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  816","line":"    ///"},
{"lineNum":"  817","line":"    /// let mut buf = [0; 4];"},
{"lineNum":"  818","line":"    /// LittleEndian::write_i32(&mut buf, -1_000_000);"},
{"lineNum":"  819","line":"    /// assert_eq!(-1_000_000, LittleEndian::read_i32(&buf));"},
{"lineNum":"  820","line":"    /// ```"},
{"lineNum":"  821","line":"    #[inline]"},
{"lineNum":"  822","line":"    fn write_i32(buf: &mut [u8], n: i32) {"},
{"lineNum":"  823","line":"        Self::write_u32(buf, n as u32)"},
{"lineNum":"  824","line":"    }"},
{"lineNum":"  825","line":""},
{"lineNum":"  826","line":"    /// Writes a signed 48 bit integer `n` to `buf`, stored in i64."},
{"lineNum":"  827","line":"    ///"},
{"lineNum":"  828","line":"    /// # Panics"},
{"lineNum":"  829","line":"    ///"},
{"lineNum":"  830","line":"    /// Panics when `buf.len() < 6`."},
{"lineNum":"  831","line":"    ///"},
{"lineNum":"  832","line":"    /// # Examples"},
{"lineNum":"  833","line":"    ///"},
{"lineNum":"  834","line":"    /// Write and read 48 bit `i64` numbers in little endian order:"},
{"lineNum":"  835","line":"    ///"},
{"lineNum":"  836","line":"    /// ```rust"},
{"lineNum":"  837","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  838","line":"    ///"},
{"lineNum":"  839","line":"    /// let mut buf = [0; 6];"},
{"lineNum":"  840","line":"    /// LittleEndian::write_i48(&mut buf, -1_000_000_000_000);"},
{"lineNum":"  841","line":"    /// assert_eq!(-1_000_000_000_000, LittleEndian::read_i48(&buf));"},
{"lineNum":"  842","line":"    /// ```"},
{"lineNum":"  843","line":"    #[inline]"},
{"lineNum":"  844","line":"    fn write_i48(buf: &mut [u8], n: i64) {"},
{"lineNum":"  845","line":"        Self::write_int(buf, n as i64, 6)"},
{"lineNum":"  846","line":"    }"},
{"lineNum":"  847","line":""},
{"lineNum":"  848","line":"    /// Writes a signed 64 bit integer `n` to `buf`."},
{"lineNum":"  849","line":"    ///"},
{"lineNum":"  850","line":"    /// # Panics"},
{"lineNum":"  851","line":"    ///"},
{"lineNum":"  852","line":"    /// Panics when `buf.len() < 8`."},
{"lineNum":"  853","line":"    ///"},
{"lineNum":"  854","line":"    /// # Examples"},
{"lineNum":"  855","line":"    ///"},
{"lineNum":"  856","line":"    /// Write and read `i64` numbers in little endian order:"},
{"lineNum":"  857","line":"    ///"},
{"lineNum":"  858","line":"    /// ```rust"},
{"lineNum":"  859","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  860","line":"    ///"},
{"lineNum":"  861","line":"    /// let mut buf = [0; 8];"},
{"lineNum":"  862","line":"    /// LittleEndian::write_i64(&mut buf, -1_000_000_000);"},
{"lineNum":"  863","line":"    /// assert_eq!(-1_000_000_000, LittleEndian::read_i64(&buf));"},
{"lineNum":"  864","line":"    /// ```"},
{"lineNum":"  865","line":"    #[inline]"},
{"lineNum":"  866","line":"    fn write_i64(buf: &mut [u8], n: i64) {"},
{"lineNum":"  867","line":"        Self::write_u64(buf, n as u64)"},
{"lineNum":"  868","line":"    }"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"    /// Writes a signed 128 bit integer `n` to `buf`."},
{"lineNum":"  871","line":"    ///"},
{"lineNum":"  872","line":"    /// # Panics"},
{"lineNum":"  873","line":"    ///"},
{"lineNum":"  874","line":"    /// Panics when `buf.len() < 16`."},
{"lineNum":"  875","line":"    ///"},
{"lineNum":"  876","line":"    /// # Examples"},
{"lineNum":"  877","line":"    ///"},
{"lineNum":"  878","line":"    /// Write and read n-byte `i128` numbers in little endian order:"},
{"lineNum":"  879","line":"    ///"},
{"lineNum":"  880","line":"    /// ```rust"},
{"lineNum":"  881","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  882","line":"    ///"},
{"lineNum":"  883","line":"    /// let mut buf = [0; 16];"},
{"lineNum":"  884","line":"    /// LittleEndian::write_i128(&mut buf, -1_000_000_000);"},
{"lineNum":"  885","line":"    /// assert_eq!(-1_000_000_000, LittleEndian::read_i128(&buf));"},
{"lineNum":"  886","line":"    /// ```"},
{"lineNum":"  887","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":"  888","line":"    #[inline]"},
{"lineNum":"  889","line":"    fn write_i128(buf: &mut [u8], n: i128) {"},
{"lineNum":"  890","line":"        Self::write_u128(buf, n as u128)"},
{"lineNum":"  891","line":"    }"},
{"lineNum":"  892","line":""},
{"lineNum":"  893","line":"    /// Writes a signed integer `n` to `buf` using only `nbytes`."},
{"lineNum":"  894","line":"    ///"},
{"lineNum":"  895","line":"    /// # Panics"},
{"lineNum":"  896","line":"    ///"},
{"lineNum":"  897","line":"    /// If `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then"},
{"lineNum":"  898","line":"    /// this method panics."},
{"lineNum":"  899","line":"    ///"},
{"lineNum":"  900","line":"    /// # Examples"},
{"lineNum":"  901","line":"    ///"},
{"lineNum":"  902","line":"    /// Write and read an n-byte number in little endian order:"},
{"lineNum":"  903","line":"    ///"},
{"lineNum":"  904","line":"    /// ```rust"},
{"lineNum":"  905","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  906","line":"    ///"},
{"lineNum":"  907","line":"    /// let mut buf = [0; 3];"},
{"lineNum":"  908","line":"    /// LittleEndian::write_int(&mut buf, -1_000, 3);"},
{"lineNum":"  909","line":"    /// assert_eq!(-1_000, LittleEndian::read_int(&buf, 3));"},
{"lineNum":"  910","line":"    /// ```"},
{"lineNum":"  911","line":"    #[inline]"},
{"lineNum":"  912","line":"    fn write_int(buf: &mut [u8], n: i64, nbytes: usize) {"},
{"lineNum":"  913","line":"        Self::write_uint(buf, unextend_sign(n, nbytes), nbytes)"},
{"lineNum":"  914","line":"    }"},
{"lineNum":"  915","line":""},
{"lineNum":"  916","line":"    /// Writes a signed integer `n` to `buf` using only `nbytes`."},
{"lineNum":"  917","line":"    ///"},
{"lineNum":"  918","line":"    /// # Panics"},
{"lineNum":"  919","line":"    ///"},
{"lineNum":"  920","line":"    /// If `n` is not representable in `nbytes`, or if `nbytes` is `> 16`, then"},
{"lineNum":"  921","line":"    /// this method panics."},
{"lineNum":"  922","line":"    ///"},
{"lineNum":"  923","line":"    /// # Examples"},
{"lineNum":"  924","line":"    ///"},
{"lineNum":"  925","line":"    /// Write and read n-length signed numbers in little endian order:"},
{"lineNum":"  926","line":"    ///"},
{"lineNum":"  927","line":"    /// ```rust"},
{"lineNum":"  928","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  929","line":"    ///"},
{"lineNum":"  930","line":"    /// let mut buf = [0; 3];"},
{"lineNum":"  931","line":"    /// LittleEndian::write_int128(&mut buf, -1_000, 3);"},
{"lineNum":"  932","line":"    /// assert_eq!(-1_000, LittleEndian::read_int128(&buf, 3));"},
{"lineNum":"  933","line":"    /// ```"},
{"lineNum":"  934","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":"  935","line":"    #[inline]"},
{"lineNum":"  936","line":"    fn write_int128(buf: &mut [u8], n: i128, nbytes: usize) {"},
{"lineNum":"  937","line":"        Self::write_uint128(buf, unextend_sign128(n, nbytes), nbytes)"},
{"lineNum":"  938","line":"    }"},
{"lineNum":"  939","line":""},
{"lineNum":"  940","line":"    /// Writes a IEEE754 single-precision (4 bytes) floating point number."},
{"lineNum":"  941","line":"    ///"},
{"lineNum":"  942","line":"    /// # Panics"},
{"lineNum":"  943","line":"    ///"},
{"lineNum":"  944","line":"    /// Panics when `buf.len() < 4`."},
{"lineNum":"  945","line":"    ///"},
{"lineNum":"  946","line":"    /// # Examples"},
{"lineNum":"  947","line":"    ///"},
{"lineNum":"  948","line":"    /// Write and read `f32` numbers in little endian order:"},
{"lineNum":"  949","line":"    ///"},
{"lineNum":"  950","line":"    /// ```rust"},
{"lineNum":"  951","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  952","line":"    ///"},
{"lineNum":"  953","line":"    /// let e = 2.71828;"},
{"lineNum":"  954","line":"    /// let mut buf = [0; 4];"},
{"lineNum":"  955","line":"    /// LittleEndian::write_f32(&mut buf, e);"},
{"lineNum":"  956","line":"    /// assert_eq!(e, LittleEndian::read_f32(&buf));"},
{"lineNum":"  957","line":"    /// ```"},
{"lineNum":"  958","line":"    #[inline]"},
{"lineNum":"  959","line":"    fn write_f32(buf: &mut [u8], n: f32) {"},
{"lineNum":"  960","line":"        let n = unsafe { *(&n as *const f32 as *const u32) };"},
{"lineNum":"  961","line":"        Self::write_u32(buf, n)"},
{"lineNum":"  962","line":"    }"},
{"lineNum":"  963","line":""},
{"lineNum":"  964","line":"    /// Writes a IEEE754 double-precision (8 bytes) floating point number."},
{"lineNum":"  965","line":"    ///"},
{"lineNum":"  966","line":"    /// # Panics"},
{"lineNum":"  967","line":"    ///"},
{"lineNum":"  968","line":"    /// Panics when `buf.len() < 8`."},
{"lineNum":"  969","line":"    ///"},
{"lineNum":"  970","line":"    /// # Examples"},
{"lineNum":"  971","line":"    ///"},
{"lineNum":"  972","line":"    /// Write and read `f64` numbers in little endian order:"},
{"lineNum":"  973","line":"    ///"},
{"lineNum":"  974","line":"    /// ```rust"},
{"lineNum":"  975","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":"  976","line":"    ///"},
{"lineNum":"  977","line":"    /// let phi = 1.6180339887;"},
{"lineNum":"  978","line":"    /// let mut buf = [0; 8];"},
{"lineNum":"  979","line":"    /// LittleEndian::write_f64(&mut buf, phi);"},
{"lineNum":"  980","line":"    /// assert_eq!(phi, LittleEndian::read_f64(&buf));"},
{"lineNum":"  981","line":"    /// ```"},
{"lineNum":"  982","line":"    #[inline]"},
{"lineNum":"  983","line":"    fn write_f64(buf: &mut [u8], n: f64) {"},
{"lineNum":"  984","line":"        let n = unsafe { *(&n as *const f64 as *const u64) };"},
{"lineNum":"  985","line":"        Self::write_u64(buf, n)"},
{"lineNum":"  986","line":"    }"},
{"lineNum":"  987","line":""},
{"lineNum":"  988","line":"    /// Reads unsigned 16 bit integers from `src` into `dst`."},
{"lineNum":"  989","line":"    ///"},
{"lineNum":"  990","line":"    /// # Panics"},
{"lineNum":"  991","line":"    ///"},
{"lineNum":"  992","line":"    /// Panics when `src.len() != 2*dst.len()`."},
{"lineNum":"  993","line":"    ///"},
{"lineNum":"  994","line":"    /// # Examples"},
{"lineNum":"  995","line":"    ///"},
{"lineNum":"  996","line":"    /// Write and read `u16` numbers in little endian order:"},
{"lineNum":"  997","line":"    ///"},
{"lineNum":"  998","line":"    /// ```rust"},
{"lineNum":"  999","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1000","line":"    ///"},
{"lineNum":" 1001","line":"    /// let mut bytes = [0; 8];"},
{"lineNum":" 1002","line":"    /// let numbers_given = [1, 2, 0xf00f, 0xffee];"},
{"lineNum":" 1003","line":"    /// LittleEndian::write_u16_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1004","line":"    ///"},
{"lineNum":" 1005","line":"    /// let mut numbers_got = [0; 4];"},
{"lineNum":" 1006","line":"    /// LittleEndian::read_u16_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1007","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1008","line":"    /// ```"},
{"lineNum":" 1009","line":"    fn read_u16_into(src: &[u8], dst: &mut [u16]);"},
{"lineNum":" 1010","line":""},
{"lineNum":" 1011","line":"    /// Reads unsigned 32 bit integers from `src` into `dst`."},
{"lineNum":" 1012","line":"    ///"},
{"lineNum":" 1013","line":"    /// # Panics"},
{"lineNum":" 1014","line":"    ///"},
{"lineNum":" 1015","line":"    /// Panics when `src.len() != 4*dst.len()`."},
{"lineNum":" 1016","line":"    ///"},
{"lineNum":" 1017","line":"    /// # Examples"},
{"lineNum":" 1018","line":"    ///"},
{"lineNum":" 1019","line":"    /// Write and read `u32` numbers in little endian order:"},
{"lineNum":" 1020","line":"    ///"},
{"lineNum":" 1021","line":"    /// ```rust"},
{"lineNum":" 1022","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1023","line":"    ///"},
{"lineNum":" 1024","line":"    /// let mut bytes = [0; 16];"},
{"lineNum":" 1025","line":"    /// let numbers_given = [1, 2, 0xf00f, 0xffee];"},
{"lineNum":" 1026","line":"    /// LittleEndian::write_u32_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1027","line":"    ///"},
{"lineNum":" 1028","line":"    /// let mut numbers_got = [0; 4];"},
{"lineNum":" 1029","line":"    /// LittleEndian::read_u32_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1030","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1031","line":"    /// ```"},
{"lineNum":" 1032","line":"    fn read_u32_into(src: &[u8], dst: &mut [u32]);"},
{"lineNum":" 1033","line":""},
{"lineNum":" 1034","line":"    /// Reads unsigned 64 bit integers from `src` into `dst`."},
{"lineNum":" 1035","line":"    ///"},
{"lineNum":" 1036","line":"    /// # Panics"},
{"lineNum":" 1037","line":"    ///"},
{"lineNum":" 1038","line":"    /// Panics when `src.len() != 8*dst.len()`."},
{"lineNum":" 1039","line":"    ///"},
{"lineNum":" 1040","line":"    /// # Examples"},
{"lineNum":" 1041","line":"    ///"},
{"lineNum":" 1042","line":"    /// Write and read `u64` numbers in little endian order:"},
{"lineNum":" 1043","line":"    ///"},
{"lineNum":" 1044","line":"    /// ```rust"},
{"lineNum":" 1045","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1046","line":"    ///"},
{"lineNum":" 1047","line":"    /// let mut bytes = [0; 32];"},
{"lineNum":" 1048","line":"    /// let numbers_given = [1, 2, 0xf00f, 0xffee];"},
{"lineNum":" 1049","line":"    /// LittleEndian::write_u64_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1050","line":"    ///"},
{"lineNum":" 1051","line":"    /// let mut numbers_got = [0; 4];"},
{"lineNum":" 1052","line":"    /// LittleEndian::read_u64_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1053","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1054","line":"    /// ```"},
{"lineNum":" 1055","line":"    fn read_u64_into(src: &[u8], dst: &mut [u64]);"},
{"lineNum":" 1056","line":""},
{"lineNum":" 1057","line":"    /// Reads unsigned 128 bit integers from `src` into `dst`."},
{"lineNum":" 1058","line":"    ///"},
{"lineNum":" 1059","line":"    /// # Panics"},
{"lineNum":" 1060","line":"    ///"},
{"lineNum":" 1061","line":"    /// Panics when `src.len() != 16*dst.len()`."},
{"lineNum":" 1062","line":"    ///"},
{"lineNum":" 1063","line":"    /// # Examples"},
{"lineNum":" 1064","line":"    ///"},
{"lineNum":" 1065","line":"    /// Write and read `u128` numbers in little endian order:"},
{"lineNum":" 1066","line":"    ///"},
{"lineNum":" 1067","line":"    /// ```rust"},
{"lineNum":" 1068","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1069","line":"    ///"},
{"lineNum":" 1070","line":"    /// let mut bytes = [0; 64];"},
{"lineNum":" 1071","line":"    /// let numbers_given = [1, 2, 0xf00f, 0xffee];"},
{"lineNum":" 1072","line":"    /// LittleEndian::write_u128_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1073","line":"    ///"},
{"lineNum":" 1074","line":"    /// let mut numbers_got = [0; 4];"},
{"lineNum":" 1075","line":"    /// LittleEndian::read_u128_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1076","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1077","line":"    /// ```"},
{"lineNum":" 1078","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 1079","line":"    fn read_u128_into(src: &[u8], dst: &mut [u128]);"},
{"lineNum":" 1080","line":""},
{"lineNum":" 1081","line":"    /// Reads signed 16 bit integers from `src` to `dst`."},
{"lineNum":" 1082","line":"    ///"},
{"lineNum":" 1083","line":"    /// # Panics"},
{"lineNum":" 1084","line":"    ///"},
{"lineNum":" 1085","line":"    /// Panics when `buf.len() != 2*dst.len()`."},
{"lineNum":" 1086","line":"    ///"},
{"lineNum":" 1087","line":"    /// # Examples"},
{"lineNum":" 1088","line":"    ///"},
{"lineNum":" 1089","line":"    /// Write and read `i16` numbers in little endian order:"},
{"lineNum":" 1090","line":"    ///"},
{"lineNum":" 1091","line":"    /// ```rust"},
{"lineNum":" 1092","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1093","line":"    ///"},
{"lineNum":" 1094","line":"    /// let mut bytes = [0; 8];"},
{"lineNum":" 1095","line":"    /// let numbers_given = [1, 2, 0x0f, 0xee];"},
{"lineNum":" 1096","line":"    /// LittleEndian::write_i16_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1097","line":"    ///"},
{"lineNum":" 1098","line":"    /// let mut numbers_got = [0; 4];"},
{"lineNum":" 1099","line":"    /// LittleEndian::read_i16_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1100","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1101","line":"    /// ```"},
{"lineNum":" 1102","line":"    #[inline]"},
{"lineNum":" 1103","line":"    fn read_i16_into(src: &[u8], dst: &mut [i16]) {"},
{"lineNum":" 1104","line":"        let dst = unsafe {"},
{"lineNum":" 1105","line":"            slice::from_raw_parts_mut(dst.as_mut_ptr() as *mut u16, dst.len())"},
{"lineNum":" 1106","line":"        };"},
{"lineNum":" 1107","line":"        Self::read_u16_into(src, dst)"},
{"lineNum":" 1108","line":"    }"},
{"lineNum":" 1109","line":""},
{"lineNum":" 1110","line":"    /// Reads signed 32 bit integers from `src` into `dst`."},
{"lineNum":" 1111","line":"    ///"},
{"lineNum":" 1112","line":"    /// # Panics"},
{"lineNum":" 1113","line":"    ///"},
{"lineNum":" 1114","line":"    /// Panics when `src.len() != 4*dst.len()`."},
{"lineNum":" 1115","line":"    ///"},
{"lineNum":" 1116","line":"    /// # Examples"},
{"lineNum":" 1117","line":"    ///"},
{"lineNum":" 1118","line":"    /// Write and read `i32` numbers in little endian order:"},
{"lineNum":" 1119","line":"    ///"},
{"lineNum":" 1120","line":"    /// ```rust"},
{"lineNum":" 1121","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1122","line":"    ///"},
{"lineNum":" 1123","line":"    /// let mut bytes = [0; 16];"},
{"lineNum":" 1124","line":"    /// let numbers_given = [1, 2, 0xf00f, 0xffee];"},
{"lineNum":" 1125","line":"    /// LittleEndian::write_i32_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1126","line":"    ///"},
{"lineNum":" 1127","line":"    /// let mut numbers_got = [0; 4];"},
{"lineNum":" 1128","line":"    /// LittleEndian::read_i32_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1129","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1130","line":"    /// ```"},
{"lineNum":" 1131","line":"    #[inline]"},
{"lineNum":" 1132","line":"    fn read_i32_into(src: &[u8], dst: &mut [i32]) {"},
{"lineNum":" 1133","line":"        let dst = unsafe {"},
{"lineNum":" 1134","line":"            slice::from_raw_parts_mut(dst.as_mut_ptr() as *mut u32, dst.len())"},
{"lineNum":" 1135","line":"        };"},
{"lineNum":" 1136","line":"        Self::read_u32_into(src, dst);"},
{"lineNum":" 1137","line":"    }"},
{"lineNum":" 1138","line":""},
{"lineNum":" 1139","line":"    /// Reads signed 64 bit integers from `src` into `dst`."},
{"lineNum":" 1140","line":"    ///"},
{"lineNum":" 1141","line":"    /// # Panics"},
{"lineNum":" 1142","line":"    ///"},
{"lineNum":" 1143","line":"    /// Panics when `src.len() != 8*dst.len()`."},
{"lineNum":" 1144","line":"    ///"},
{"lineNum":" 1145","line":"    /// # Examples"},
{"lineNum":" 1146","line":"    ///"},
{"lineNum":" 1147","line":"    /// Write and read `i64` numbers in little endian order:"},
{"lineNum":" 1148","line":"    ///"},
{"lineNum":" 1149","line":"    /// ```rust"},
{"lineNum":" 1150","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1151","line":"    ///"},
{"lineNum":" 1152","line":"    /// let mut bytes = [0; 32];"},
{"lineNum":" 1153","line":"    /// let numbers_given = [1, 2, 0xf00f, 0xffee];"},
{"lineNum":" 1154","line":"    /// LittleEndian::write_i64_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1155","line":"    ///"},
{"lineNum":" 1156","line":"    /// let mut numbers_got = [0; 4];"},
{"lineNum":" 1157","line":"    /// LittleEndian::read_i64_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1158","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1159","line":"    /// ```"},
{"lineNum":" 1160","line":"    #[inline]"},
{"lineNum":" 1161","line":"    fn read_i64_into(src: &[u8], dst: &mut [i64]) {"},
{"lineNum":" 1162","line":"        let dst = unsafe {"},
{"lineNum":" 1163","line":"            slice::from_raw_parts_mut(dst.as_mut_ptr() as *mut u64, dst.len())"},
{"lineNum":" 1164","line":"        };"},
{"lineNum":" 1165","line":"        Self::read_u64_into(src, dst);"},
{"lineNum":" 1166","line":"    }"},
{"lineNum":" 1167","line":""},
{"lineNum":" 1168","line":"    /// Reads signed 128 bit integers from `src` into `dst`."},
{"lineNum":" 1169","line":"    ///"},
{"lineNum":" 1170","line":"    /// # Panics"},
{"lineNum":" 1171","line":"    ///"},
{"lineNum":" 1172","line":"    /// Panics when `src.len() != 16*dst.len()`."},
{"lineNum":" 1173","line":"    ///"},
{"lineNum":" 1174","line":"    /// # Examples"},
{"lineNum":" 1175","line":"    ///"},
{"lineNum":" 1176","line":"    /// Write and read `i128` numbers in little endian order:"},
{"lineNum":" 1177","line":"    ///"},
{"lineNum":" 1178","line":"    /// ```rust"},
{"lineNum":" 1179","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1180","line":"    ///"},
{"lineNum":" 1181","line":"    /// let mut bytes = [0; 64];"},
{"lineNum":" 1182","line":"    /// let numbers_given = [1, 2, 0xf00f, 0xffee];"},
{"lineNum":" 1183","line":"    /// LittleEndian::write_i128_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1184","line":"    ///"},
{"lineNum":" 1185","line":"    /// let mut numbers_got = [0; 4];"},
{"lineNum":" 1186","line":"    /// LittleEndian::read_i128_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1187","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1188","line":"    /// ```"},
{"lineNum":" 1189","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 1190","line":"    #[inline]"},
{"lineNum":" 1191","line":"    fn read_i128_into(src: &[u8], dst: &mut [i128]) {"},
{"lineNum":" 1192","line":"        let dst = unsafe {"},
{"lineNum":" 1193","line":"            slice::from_raw_parts_mut(dst.as_mut_ptr() as *mut u128, dst.len())"},
{"lineNum":" 1194","line":"        };"},
{"lineNum":" 1195","line":"        Self::read_u128_into(src, dst);"},
{"lineNum":" 1196","line":"    }"},
{"lineNum":" 1197","line":""},
{"lineNum":" 1198","line":"    /// Reads IEEE754 single-precision (4 bytes) floating point numbers from"},
{"lineNum":" 1199","line":"    /// `src` into `dst`."},
{"lineNum":" 1200","line":"    ///"},
{"lineNum":" 1201","line":"    /// # Panics"},
{"lineNum":" 1202","line":"    ///"},
{"lineNum":" 1203","line":"    /// Panics when `src.len() != 4*dst.len()`."},
{"lineNum":" 1204","line":"    ///"},
{"lineNum":" 1205","line":"    /// # Examples"},
{"lineNum":" 1206","line":"    ///"},
{"lineNum":" 1207","line":"    /// Write and read `f32` numbers in little endian order:"},
{"lineNum":" 1208","line":"    ///"},
{"lineNum":" 1209","line":"    /// ```rust"},
{"lineNum":" 1210","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1211","line":"    ///"},
{"lineNum":" 1212","line":"    /// let mut bytes = [0; 16];"},
{"lineNum":" 1213","line":"    /// let numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];"},
{"lineNum":" 1214","line":"    /// LittleEndian::write_f32_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1215","line":"    ///"},
{"lineNum":" 1216","line":"    /// let mut numbers_got = [0.0; 4];"},
{"lineNum":" 1217","line":"    /// LittleEndian::read_f32_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1218","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1219","line":"    /// ```"},
{"lineNum":" 1220","line":"    #[inline]"},
{"lineNum":" 1221","line":"    fn read_f32_into(src: &[u8], dst: &mut [f32]) {"},
{"lineNum":" 1222","line":"        let dst = unsafe {"},
{"lineNum":" 1223","line":"            slice::from_raw_parts_mut(dst.as_mut_ptr() as *mut u32, dst.len())"},
{"lineNum":" 1224","line":"        };"},
{"lineNum":" 1225","line":"        Self::read_u32_into(src, dst);"},
{"lineNum":" 1226","line":"    }"},
{"lineNum":" 1227","line":""},
{"lineNum":" 1228","line":"    /// **DEPRECATED**."},
{"lineNum":" 1229","line":"    ///"},
{"lineNum":" 1230","line":"    /// This method is deprecated. Use `read_f32_into` instead."},
{"lineNum":" 1231","line":"    /// Reads IEEE754 single-precision (4 bytes) floating point numbers from"},
{"lineNum":" 1232","line":"    /// `src` into `dst`."},
{"lineNum":" 1233","line":"    ///"},
{"lineNum":" 1234","line":"    /// # Panics"},
{"lineNum":" 1235","line":"    ///"},
{"lineNum":" 1236","line":"    /// Panics when `src.len() != 4*dst.len()`."},
{"lineNum":" 1237","line":"    ///"},
{"lineNum":" 1238","line":"    /// # Examples"},
{"lineNum":" 1239","line":"    ///"},
{"lineNum":" 1240","line":"    /// Write and read `f32` numbers in little endian order:"},
{"lineNum":" 1241","line":"    ///"},
{"lineNum":" 1242","line":"    /// ```rust"},
{"lineNum":" 1243","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1244","line":"    ///"},
{"lineNum":" 1245","line":"    /// let mut bytes = [0; 16];"},
{"lineNum":" 1246","line":"    /// let numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];"},
{"lineNum":" 1247","line":"    /// LittleEndian::write_f32_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1248","line":"    ///"},
{"lineNum":" 1249","line":"    /// let mut numbers_got = [0.0; 4];"},
{"lineNum":" 1250","line":"    /// LittleEndian::read_f32_into_unchecked(&bytes, &mut numbers_got);"},
{"lineNum":" 1251","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1252","line":"    /// ```"},
{"lineNum":" 1253","line":"    #[inline]"},
{"lineNum":" 1254","line":"    #[deprecated(since=\"1.3.0\", note=\"please use `read_f32_into` instead\")]"},
{"lineNum":" 1255","line":"    fn read_f32_into_unchecked(src: &[u8], dst: &mut [f32]) {"},
{"lineNum":" 1256","line":"        Self::read_f32_into(src, dst);"},
{"lineNum":" 1257","line":"    }"},
{"lineNum":" 1258","line":""},
{"lineNum":" 1259","line":"    /// Reads IEEE754 single-precision (4 bytes) floating point numbers from"},
{"lineNum":" 1260","line":"    /// `src` into `dst`."},
{"lineNum":" 1261","line":"    ///"},
{"lineNum":" 1262","line":"    /// # Panics"},
{"lineNum":" 1263","line":"    ///"},
{"lineNum":" 1264","line":"    /// Panics when `src.len() != 8*dst.len()`."},
{"lineNum":" 1265","line":"    ///"},
{"lineNum":" 1266","line":"    /// # Examples"},
{"lineNum":" 1267","line":"    ///"},
{"lineNum":" 1268","line":"    /// Write and read `f64` numbers in little endian order:"},
{"lineNum":" 1269","line":"    ///"},
{"lineNum":" 1270","line":"    /// ```rust"},
{"lineNum":" 1271","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1272","line":"    ///"},
{"lineNum":" 1273","line":"    /// let mut bytes = [0; 32];"},
{"lineNum":" 1274","line":"    /// let numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];"},
{"lineNum":" 1275","line":"    /// LittleEndian::write_f64_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1276","line":"    ///"},
{"lineNum":" 1277","line":"    /// let mut numbers_got = [0.0; 4];"},
{"lineNum":" 1278","line":"    /// LittleEndian::read_f64_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1279","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1280","line":"    /// ```"},
{"lineNum":" 1281","line":"    #[inline]"},
{"lineNum":" 1282","line":"    fn read_f64_into(src: &[u8], dst: &mut [f64]) {"},
{"lineNum":" 1283","line":"        let dst = unsafe {"},
{"lineNum":" 1284","line":"            slice::from_raw_parts_mut(dst.as_mut_ptr() as *mut u64, dst.len())"},
{"lineNum":" 1285","line":"        };"},
{"lineNum":" 1286","line":"        Self::read_u64_into(src, dst);"},
{"lineNum":" 1287","line":"    }"},
{"lineNum":" 1288","line":""},
{"lineNum":" 1289","line":"    /// **DEPRECATED**."},
{"lineNum":" 1290","line":"    ///"},
{"lineNum":" 1291","line":"    /// This method is deprecated. Use `read_f64_into` instead."},
{"lineNum":" 1292","line":"    ///"},
{"lineNum":" 1293","line":"    /// Reads IEEE754 single-precision (4 bytes) floating point numbers from"},
{"lineNum":" 1294","line":"    /// `src` into `dst`."},
{"lineNum":" 1295","line":"    ///"},
{"lineNum":" 1296","line":"    /// # Panics"},
{"lineNum":" 1297","line":"    ///"},
{"lineNum":" 1298","line":"    /// Panics when `src.len() != 8*dst.len()`."},
{"lineNum":" 1299","line":"    ///"},
{"lineNum":" 1300","line":"    /// # Examples"},
{"lineNum":" 1301","line":"    ///"},
{"lineNum":" 1302","line":"    /// Write and read `f64` numbers in little endian order:"},
{"lineNum":" 1303","line":"    ///"},
{"lineNum":" 1304","line":"    /// ```rust"},
{"lineNum":" 1305","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1306","line":"    ///"},
{"lineNum":" 1307","line":"    /// let mut bytes = [0; 32];"},
{"lineNum":" 1308","line":"    /// let numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];"},
{"lineNum":" 1309","line":"    /// LittleEndian::write_f64_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1310","line":"    ///"},
{"lineNum":" 1311","line":"    /// let mut numbers_got = [0.0; 4];"},
{"lineNum":" 1312","line":"    /// LittleEndian::read_f64_into_unchecked(&bytes, &mut numbers_got);"},
{"lineNum":" 1313","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1314","line":"    /// ```"},
{"lineNum":" 1315","line":"    #[inline]"},
{"lineNum":" 1316","line":"    #[deprecated(since=\"1.3.0\", note=\"please use `read_f64_into` instead\")]"},
{"lineNum":" 1317","line":"    fn read_f64_into_unchecked(src: &[u8], dst: &mut [f64]) {"},
{"lineNum":" 1318","line":"        Self::read_f64_into(src, dst);"},
{"lineNum":" 1319","line":"    }"},
{"lineNum":" 1320","line":""},
{"lineNum":" 1321","line":"    /// Writes unsigned 16 bit integers from `src` into `dst`."},
{"lineNum":" 1322","line":"    ///"},
{"lineNum":" 1323","line":"    /// # Panics"},
{"lineNum":" 1324","line":"    ///"},
{"lineNum":" 1325","line":"    /// Panics when `dst.len() != 2*src.len()`."},
{"lineNum":" 1326","line":"    ///"},
{"lineNum":" 1327","line":"    /// # Examples"},
{"lineNum":" 1328","line":"    ///"},
{"lineNum":" 1329","line":"    /// Write and read `u16` numbers in little endian order:"},
{"lineNum":" 1330","line":"    ///"},
{"lineNum":" 1331","line":"    /// ```rust"},
{"lineNum":" 1332","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1333","line":"    ///"},
{"lineNum":" 1334","line":"    /// let mut bytes = [0; 8];"},
{"lineNum":" 1335","line":"    /// let numbers_given = [1, 2, 0xf00f, 0xffee];"},
{"lineNum":" 1336","line":"    /// LittleEndian::write_u16_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1337","line":"    ///"},
{"lineNum":" 1338","line":"    /// let mut numbers_got = [0; 4];"},
{"lineNum":" 1339","line":"    /// LittleEndian::read_u16_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1340","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1341","line":"    /// ```"},
{"lineNum":" 1342","line":"    fn write_u16_into(src: &[u16], dst: &mut [u8]);"},
{"lineNum":" 1343","line":""},
{"lineNum":" 1344","line":"    /// Writes unsigned 32 bit integers from `src` into `dst`."},
{"lineNum":" 1345","line":"    ///"},
{"lineNum":" 1346","line":"    /// # Panics"},
{"lineNum":" 1347","line":"    ///"},
{"lineNum":" 1348","line":"    /// Panics when `dst.len() != 4*src.len()`."},
{"lineNum":" 1349","line":"    ///"},
{"lineNum":" 1350","line":"    /// # Examples"},
{"lineNum":" 1351","line":"    ///"},
{"lineNum":" 1352","line":"    /// Write and read `u32` numbers in little endian order:"},
{"lineNum":" 1353","line":"    ///"},
{"lineNum":" 1354","line":"    /// ```rust"},
{"lineNum":" 1355","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1356","line":"    ///"},
{"lineNum":" 1357","line":"    /// let mut bytes = [0; 16];"},
{"lineNum":" 1358","line":"    /// let numbers_given = [1, 2, 0xf00f, 0xffee];"},
{"lineNum":" 1359","line":"    /// LittleEndian::write_u32_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1360","line":"    ///"},
{"lineNum":" 1361","line":"    /// let mut numbers_got = [0; 4];"},
{"lineNum":" 1362","line":"    /// LittleEndian::read_u32_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1363","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1364","line":"    /// ```"},
{"lineNum":" 1365","line":"    fn write_u32_into(src: &[u32], dst: &mut [u8]);"},
{"lineNum":" 1366","line":""},
{"lineNum":" 1367","line":"    /// Writes unsigned 64 bit integers from `src` into `dst`."},
{"lineNum":" 1368","line":"    ///"},
{"lineNum":" 1369","line":"    /// # Panics"},
{"lineNum":" 1370","line":"    ///"},
{"lineNum":" 1371","line":"    /// Panics when `dst.len() != 8*src.len()`."},
{"lineNum":" 1372","line":"    ///"},
{"lineNum":" 1373","line":"    /// # Examples"},
{"lineNum":" 1374","line":"    ///"},
{"lineNum":" 1375","line":"    /// Write and read `u64` numbers in little endian order:"},
{"lineNum":" 1376","line":"    ///"},
{"lineNum":" 1377","line":"    /// ```rust"},
{"lineNum":" 1378","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1379","line":"    ///"},
{"lineNum":" 1380","line":"    /// let mut bytes = [0; 32];"},
{"lineNum":" 1381","line":"    /// let numbers_given = [1, 2, 0xf00f, 0xffee];"},
{"lineNum":" 1382","line":"    /// LittleEndian::write_u64_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1383","line":"    ///"},
{"lineNum":" 1384","line":"    /// let mut numbers_got = [0; 4];"},
{"lineNum":" 1385","line":"    /// LittleEndian::read_u64_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1386","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1387","line":"    /// ```"},
{"lineNum":" 1388","line":"    fn write_u64_into(src: &[u64], dst: &mut [u8]);"},
{"lineNum":" 1389","line":""},
{"lineNum":" 1390","line":"    /// Writes unsigned 128 bit integers from `src` into `dst`."},
{"lineNum":" 1391","line":"    ///"},
{"lineNum":" 1392","line":"    /// # Panics"},
{"lineNum":" 1393","line":"    ///"},
{"lineNum":" 1394","line":"    /// Panics when `dst.len() != 16*src.len()`."},
{"lineNum":" 1395","line":"    ///"},
{"lineNum":" 1396","line":"    /// # Examples"},
{"lineNum":" 1397","line":"    ///"},
{"lineNum":" 1398","line":"    /// Write and read `u128` numbers in little endian order:"},
{"lineNum":" 1399","line":"    ///"},
{"lineNum":" 1400","line":"    /// ```rust"},
{"lineNum":" 1401","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1402","line":"    ///"},
{"lineNum":" 1403","line":"    /// let mut bytes = [0; 64];"},
{"lineNum":" 1404","line":"    /// let numbers_given = [1, 2, 0xf00f, 0xffee];"},
{"lineNum":" 1405","line":"    /// LittleEndian::write_u128_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1406","line":"    ///"},
{"lineNum":" 1407","line":"    /// let mut numbers_got = [0; 4];"},
{"lineNum":" 1408","line":"    /// LittleEndian::read_u128_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1409","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1410","line":"    /// ```"},
{"lineNum":" 1411","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 1412","line":"    fn write_u128_into(src: &[u128], dst: &mut [u8]);"},
{"lineNum":" 1413","line":""},
{"lineNum":" 1414","line":"    /// Writes signed 16 bit integers from `src` into `dst`."},
{"lineNum":" 1415","line":"    ///"},
{"lineNum":" 1416","line":"    /// # Panics"},
{"lineNum":" 1417","line":"    ///"},
{"lineNum":" 1418","line":"    /// Panics when `buf.len() != 2*src.len()`."},
{"lineNum":" 1419","line":"    ///"},
{"lineNum":" 1420","line":"    /// # Examples"},
{"lineNum":" 1421","line":"    ///"},
{"lineNum":" 1422","line":"    /// Write and read `i16` numbers in little endian order:"},
{"lineNum":" 1423","line":"    ///"},
{"lineNum":" 1424","line":"    /// ```rust"},
{"lineNum":" 1425","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1426","line":"    ///"},
{"lineNum":" 1427","line":"    /// let mut bytes = [0; 8];"},
{"lineNum":" 1428","line":"    /// let numbers_given = [1, 2, 0x0f, 0xee];"},
{"lineNum":" 1429","line":"    /// LittleEndian::write_i16_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1430","line":"    ///"},
{"lineNum":" 1431","line":"    /// let mut numbers_got = [0; 4];"},
{"lineNum":" 1432","line":"    /// LittleEndian::read_i16_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1433","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1434","line":"    /// ```"},
{"lineNum":" 1435","line":"    fn write_i16_into(src: &[i16], dst: &mut [u8]) {"},
{"lineNum":" 1436","line":"        let src = unsafe {"},
{"lineNum":" 1437","line":"            slice::from_raw_parts(src.as_ptr() as *const u16, src.len())"},
{"lineNum":" 1438","line":"        };"},
{"lineNum":" 1439","line":"        Self::write_u16_into(src, dst);"},
{"lineNum":" 1440","line":"    }"},
{"lineNum":" 1441","line":""},
{"lineNum":" 1442","line":"    /// Writes signed 32 bit integers from `src` into `dst`."},
{"lineNum":" 1443","line":"    ///"},
{"lineNum":" 1444","line":"    /// # Panics"},
{"lineNum":" 1445","line":"    ///"},
{"lineNum":" 1446","line":"    /// Panics when `dst.len() != 4*src.len()`."},
{"lineNum":" 1447","line":"    ///"},
{"lineNum":" 1448","line":"    /// # Examples"},
{"lineNum":" 1449","line":"    ///"},
{"lineNum":" 1450","line":"    /// Write and read `i32` numbers in little endian order:"},
{"lineNum":" 1451","line":"    ///"},
{"lineNum":" 1452","line":"    /// ```rust"},
{"lineNum":" 1453","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1454","line":"    ///"},
{"lineNum":" 1455","line":"    /// let mut bytes = [0; 16];"},
{"lineNum":" 1456","line":"    /// let numbers_given = [1, 2, 0xf00f, 0xffee];"},
{"lineNum":" 1457","line":"    /// LittleEndian::write_i32_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1458","line":"    ///"},
{"lineNum":" 1459","line":"    /// let mut numbers_got = [0; 4];"},
{"lineNum":" 1460","line":"    /// LittleEndian::read_i32_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1461","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1462","line":"    /// ```"},
{"lineNum":" 1463","line":"    fn write_i32_into(src: &[i32], dst: &mut [u8]) {"},
{"lineNum":" 1464","line":"        let src = unsafe {"},
{"lineNum":" 1465","line":"            slice::from_raw_parts(src.as_ptr() as *const u32, src.len())"},
{"lineNum":" 1466","line":"        };"},
{"lineNum":" 1467","line":"        Self::write_u32_into(src, dst);"},
{"lineNum":" 1468","line":"    }"},
{"lineNum":" 1469","line":""},
{"lineNum":" 1470","line":"    /// Writes signed 64 bit integers from `src` into `dst`."},
{"lineNum":" 1471","line":"    ///"},
{"lineNum":" 1472","line":"    /// # Panics"},
{"lineNum":" 1473","line":"    ///"},
{"lineNum":" 1474","line":"    /// Panics when `dst.len() != 8*src.len()`."},
{"lineNum":" 1475","line":"    ///"},
{"lineNum":" 1476","line":"    /// # Examples"},
{"lineNum":" 1477","line":"    ///"},
{"lineNum":" 1478","line":"    /// Write and read `i64` numbers in little endian order:"},
{"lineNum":" 1479","line":"    ///"},
{"lineNum":" 1480","line":"    /// ```rust"},
{"lineNum":" 1481","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1482","line":"    ///"},
{"lineNum":" 1483","line":"    /// let mut bytes = [0; 32];"},
{"lineNum":" 1484","line":"    /// let numbers_given = [1, 2, 0xf00f, 0xffee];"},
{"lineNum":" 1485","line":"    /// LittleEndian::write_i64_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1486","line":"    ///"},
{"lineNum":" 1487","line":"    /// let mut numbers_got = [0; 4];"},
{"lineNum":" 1488","line":"    /// LittleEndian::read_i64_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1489","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1490","line":"    /// ```"},
{"lineNum":" 1491","line":"    fn write_i64_into(src: &[i64], dst: &mut [u8]) {"},
{"lineNum":" 1492","line":"        let src = unsafe {"},
{"lineNum":" 1493","line":"            slice::from_raw_parts(src.as_ptr() as *const u64, src.len())"},
{"lineNum":" 1494","line":"        };"},
{"lineNum":" 1495","line":"        Self::write_u64_into(src, dst);"},
{"lineNum":" 1496","line":"    }"},
{"lineNum":" 1497","line":""},
{"lineNum":" 1498","line":"    /// Writes signed 128 bit integers from `src` into `dst`."},
{"lineNum":" 1499","line":"    ///"},
{"lineNum":" 1500","line":"    /// # Panics"},
{"lineNum":" 1501","line":"    ///"},
{"lineNum":" 1502","line":"    /// Panics when `dst.len() != 16*src.len()`."},
{"lineNum":" 1503","line":"    ///"},
{"lineNum":" 1504","line":"    /// # Examples"},
{"lineNum":" 1505","line":"    ///"},
{"lineNum":" 1506","line":"    /// Write and read `i128` numbers in little endian order:"},
{"lineNum":" 1507","line":"    ///"},
{"lineNum":" 1508","line":"    /// ```rust"},
{"lineNum":" 1509","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1510","line":"    ///"},
{"lineNum":" 1511","line":"    /// let mut bytes = [0; 64];"},
{"lineNum":" 1512","line":"    /// let numbers_given = [1, 2, 0xf00f, 0xffee];"},
{"lineNum":" 1513","line":"    /// LittleEndian::write_i128_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1514","line":"    ///"},
{"lineNum":" 1515","line":"    /// let mut numbers_got = [0; 4];"},
{"lineNum":" 1516","line":"    /// LittleEndian::read_i128_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1517","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1518","line":"    /// ```"},
{"lineNum":" 1519","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 1520","line":"    fn write_i128_into(src: &[i128], dst: &mut [u8]) {"},
{"lineNum":" 1521","line":"        let src = unsafe {"},
{"lineNum":" 1522","line":"            slice::from_raw_parts(src.as_ptr() as *const u128, src.len())"},
{"lineNum":" 1523","line":"        };"},
{"lineNum":" 1524","line":"        Self::write_u128_into(src, dst);"},
{"lineNum":" 1525","line":"    }"},
{"lineNum":" 1526","line":""},
{"lineNum":" 1527","line":"    /// Writes IEEE754 single-precision (4 bytes) floating point numbers from"},
{"lineNum":" 1528","line":"    /// `src` into `dst`."},
{"lineNum":" 1529","line":"    ///"},
{"lineNum":" 1530","line":"    /// # Panics"},
{"lineNum":" 1531","line":"    ///"},
{"lineNum":" 1532","line":"    /// Panics when `src.len() != 4*dst.len()`."},
{"lineNum":" 1533","line":"    ///"},
{"lineNum":" 1534","line":"    /// # Examples"},
{"lineNum":" 1535","line":"    ///"},
{"lineNum":" 1536","line":"    /// Write and read `f32` numbers in little endian order:"},
{"lineNum":" 1537","line":"    ///"},
{"lineNum":" 1538","line":"    /// ```rust"},
{"lineNum":" 1539","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1540","line":"    ///"},
{"lineNum":" 1541","line":"    /// let mut bytes = [0; 16];"},
{"lineNum":" 1542","line":"    /// let numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];"},
{"lineNum":" 1543","line":"    /// LittleEndian::write_f32_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1544","line":"    ///"},
{"lineNum":" 1545","line":"    /// let mut numbers_got = [0.0; 4];"},
{"lineNum":" 1546","line":"    /// unsafe {"},
{"lineNum":" 1547","line":"    ///     LittleEndian::read_f32_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1548","line":"    /// }"},
{"lineNum":" 1549","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1550","line":"    /// ```"},
{"lineNum":" 1551","line":"    fn write_f32_into(src: &[f32], dst: &mut [u8]) {"},
{"lineNum":" 1552","line":"        let src = unsafe {"},
{"lineNum":" 1553","line":"            slice::from_raw_parts(src.as_ptr() as *const u32, src.len())"},
{"lineNum":" 1554","line":"        };"},
{"lineNum":" 1555","line":"        Self::write_u32_into(src, dst);"},
{"lineNum":" 1556","line":"    }"},
{"lineNum":" 1557","line":""},
{"lineNum":" 1558","line":"    /// Writes IEEE754 double-precision (8 bytes) floating point numbers from"},
{"lineNum":" 1559","line":"    /// `src` into `dst`."},
{"lineNum":" 1560","line":"    ///"},
{"lineNum":" 1561","line":"    /// # Panics"},
{"lineNum":" 1562","line":"    ///"},
{"lineNum":" 1563","line":"    /// Panics when `src.len() != 8*dst.len()`."},
{"lineNum":" 1564","line":"    ///"},
{"lineNum":" 1565","line":"    /// # Examples"},
{"lineNum":" 1566","line":"    ///"},
{"lineNum":" 1567","line":"    /// Write and read `f64` numbers in little endian order:"},
{"lineNum":" 1568","line":"    ///"},
{"lineNum":" 1569","line":"    /// ```rust"},
{"lineNum":" 1570","line":"    /// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1571","line":"    ///"},
{"lineNum":" 1572","line":"    /// let mut bytes = [0; 32];"},
{"lineNum":" 1573","line":"    /// let numbers_given = [1.0, 2.0, 31.312e211, -11.32e91];"},
{"lineNum":" 1574","line":"    /// LittleEndian::write_f64_into(&numbers_given, &mut bytes);"},
{"lineNum":" 1575","line":"    ///"},
{"lineNum":" 1576","line":"    /// let mut numbers_got = [0.0; 4];"},
{"lineNum":" 1577","line":"    /// unsafe {"},
{"lineNum":" 1578","line":"    ///     LittleEndian::read_f64_into(&bytes, &mut numbers_got);"},
{"lineNum":" 1579","line":"    /// }"},
{"lineNum":" 1580","line":"    /// assert_eq!(numbers_given, numbers_got);"},
{"lineNum":" 1581","line":"    /// ```"},
{"lineNum":" 1582","line":"    fn write_f64_into(src: &[f64], dst: &mut [u8]) {"},
{"lineNum":" 1583","line":"        let src = unsafe {"},
{"lineNum":" 1584","line":"            slice::from_raw_parts(src.as_ptr() as *const u64, src.len())"},
{"lineNum":" 1585","line":"        };"},
{"lineNum":" 1586","line":"        Self::write_u64_into(src, dst);"},
{"lineNum":" 1587","line":"    }"},
{"lineNum":" 1588","line":""},
{"lineNum":" 1589","line":"    /// Converts the given slice of unsigned 16 bit integers to a particular"},
{"lineNum":" 1590","line":"    /// endianness."},
{"lineNum":" 1591","line":"    ///"},
{"lineNum":" 1592","line":"    /// If the endianness matches the endianness of the host platform, then"},
{"lineNum":" 1593","line":"    /// this is a no-op."},
{"lineNum":" 1594","line":"    ///"},
{"lineNum":" 1595","line":"    /// # Examples"},
{"lineNum":" 1596","line":"    ///"},
{"lineNum":" 1597","line":"    /// Convert the host platform\'s endianness to big-endian:"},
{"lineNum":" 1598","line":"    ///"},
{"lineNum":" 1599","line":"    /// ```rust"},
{"lineNum":" 1600","line":"    /// use byteorder::{ByteOrder, BigEndian};"},
{"lineNum":" 1601","line":"    ///"},
{"lineNum":" 1602","line":"    /// let mut numbers = [5, 65000];"},
{"lineNum":" 1603","line":"    /// BigEndian::from_slice_u16(&mut numbers);"},
{"lineNum":" 1604","line":"    /// assert_eq!(numbers, [5u16.to_be(), 65000u16.to_be()]);"},
{"lineNum":" 1605","line":"    /// ```"},
{"lineNum":" 1606","line":"    fn from_slice_u16(numbers: &mut [u16]);"},
{"lineNum":" 1607","line":""},
{"lineNum":" 1608","line":"    /// Converts the given slice of unsigned 32 bit integers to a particular"},
{"lineNum":" 1609","line":"    /// endianness."},
{"lineNum":" 1610","line":"    ///"},
{"lineNum":" 1611","line":"    /// If the endianness matches the endianness of the host platform, then"},
{"lineNum":" 1612","line":"    /// this is a no-op."},
{"lineNum":" 1613","line":"    ///"},
{"lineNum":" 1614","line":"    /// # Examples"},
{"lineNum":" 1615","line":"    ///"},
{"lineNum":" 1616","line":"    /// Convert the host platform\'s endianness to big-endian:"},
{"lineNum":" 1617","line":"    ///"},
{"lineNum":" 1618","line":"    /// ```rust"},
{"lineNum":" 1619","line":"    /// use byteorder::{ByteOrder, BigEndian};"},
{"lineNum":" 1620","line":"    ///"},
{"lineNum":" 1621","line":"    /// let mut numbers = [5, 65000];"},
{"lineNum":" 1622","line":"    /// BigEndian::from_slice_u32(&mut numbers);"},
{"lineNum":" 1623","line":"    /// assert_eq!(numbers, [5u32.to_be(), 65000u32.to_be()]);"},
{"lineNum":" 1624","line":"    /// ```"},
{"lineNum":" 1625","line":"    fn from_slice_u32(numbers: &mut [u32]);"},
{"lineNum":" 1626","line":""},
{"lineNum":" 1627","line":"    /// Converts the given slice of unsigned 64 bit integers to a particular"},
{"lineNum":" 1628","line":"    /// endianness."},
{"lineNum":" 1629","line":"    ///"},
{"lineNum":" 1630","line":"    /// If the endianness matches the endianness of the host platform, then"},
{"lineNum":" 1631","line":"    /// this is a no-op."},
{"lineNum":" 1632","line":"    ///"},
{"lineNum":" 1633","line":"    /// # Examples"},
{"lineNum":" 1634","line":"    ///"},
{"lineNum":" 1635","line":"    /// Convert the host platform\'s endianness to big-endian:"},
{"lineNum":" 1636","line":"    ///"},
{"lineNum":" 1637","line":"    /// ```rust"},
{"lineNum":" 1638","line":"    /// use byteorder::{ByteOrder, BigEndian};"},
{"lineNum":" 1639","line":"    ///"},
{"lineNum":" 1640","line":"    /// let mut numbers = [5, 65000];"},
{"lineNum":" 1641","line":"    /// BigEndian::from_slice_u64(&mut numbers);"},
{"lineNum":" 1642","line":"    /// assert_eq!(numbers, [5u64.to_be(), 65000u64.to_be()]);"},
{"lineNum":" 1643","line":"    /// ```"},
{"lineNum":" 1644","line":"    fn from_slice_u64(numbers: &mut [u64]);"},
{"lineNum":" 1645","line":""},
{"lineNum":" 1646","line":"    /// Converts the given slice of unsigned 128 bit integers to a particular"},
{"lineNum":" 1647","line":"    /// endianness."},
{"lineNum":" 1648","line":"    ///"},
{"lineNum":" 1649","line":"    /// If the endianness matches the endianness of the host platform, then"},
{"lineNum":" 1650","line":"    /// this is a no-op."},
{"lineNum":" 1651","line":"    ///"},
{"lineNum":" 1652","line":"    /// # Examples"},
{"lineNum":" 1653","line":"    ///"},
{"lineNum":" 1654","line":"    /// Convert the host platform\'s endianness to big-endian:"},
{"lineNum":" 1655","line":"    ///"},
{"lineNum":" 1656","line":"    /// ```rust"},
{"lineNum":" 1657","line":"    /// use byteorder::{ByteOrder, BigEndian};"},
{"lineNum":" 1658","line":"    ///"},
{"lineNum":" 1659","line":"    /// let mut numbers = [5, 65000];"},
{"lineNum":" 1660","line":"    /// BigEndian::from_slice_u128(&mut numbers);"},
{"lineNum":" 1661","line":"    /// assert_eq!(numbers, [5u128.to_be(), 65000u128.to_be()]);"},
{"lineNum":" 1662","line":"    /// ```"},
{"lineNum":" 1663","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 1664","line":"    fn from_slice_u128(numbers: &mut [u128]);"},
{"lineNum":" 1665","line":""},
{"lineNum":" 1666","line":"    /// Converts the given slice of signed 16 bit integers to a particular"},
{"lineNum":" 1667","line":"    /// endianness."},
{"lineNum":" 1668","line":"    ///"},
{"lineNum":" 1669","line":"    /// If the endianness matches the endianness of the host platform, then"},
{"lineNum":" 1670","line":"    /// this is a no-op."},
{"lineNum":" 1671","line":"    ///"},
{"lineNum":" 1672","line":"    /// # Examples"},
{"lineNum":" 1673","line":"    ///"},
{"lineNum":" 1674","line":"    /// Convert the host platform\'s endianness to big-endian:"},
{"lineNum":" 1675","line":"    ///"},
{"lineNum":" 1676","line":"    /// ```rust"},
{"lineNum":" 1677","line":"    /// use byteorder::{ByteOrder, BigEndian};"},
{"lineNum":" 1678","line":"    ///"},
{"lineNum":" 1679","line":"    /// let mut numbers = [5, 6500];"},
{"lineNum":" 1680","line":"    /// BigEndian::from_slice_i16(&mut numbers);"},
{"lineNum":" 1681","line":"    /// assert_eq!(numbers, [5i16.to_be(), 6500i16.to_be()]);"},
{"lineNum":" 1682","line":"    /// ```"},
{"lineNum":" 1683","line":"    #[inline]"},
{"lineNum":" 1684","line":"    fn from_slice_i16(src: &mut [i16]) {"},
{"lineNum":" 1685","line":"        let src = unsafe {"},
{"lineNum":" 1686","line":"            slice::from_raw_parts_mut(src.as_ptr() as *mut u16, src.len())"},
{"lineNum":" 1687","line":"        };"},
{"lineNum":" 1688","line":"        Self::from_slice_u16(src);"},
{"lineNum":" 1689","line":"    }"},
{"lineNum":" 1690","line":""},
{"lineNum":" 1691","line":"    /// Converts the given slice of signed 32 bit integers to a particular"},
{"lineNum":" 1692","line":"    /// endianness."},
{"lineNum":" 1693","line":"    ///"},
{"lineNum":" 1694","line":"    /// If the endianness matches the endianness of the host platform, then"},
{"lineNum":" 1695","line":"    /// this is a no-op."},
{"lineNum":" 1696","line":"    ///"},
{"lineNum":" 1697","line":"    /// # Examples"},
{"lineNum":" 1698","line":"    ///"},
{"lineNum":" 1699","line":"    /// Convert the host platform\'s endianness to big-endian:"},
{"lineNum":" 1700","line":"    ///"},
{"lineNum":" 1701","line":"    /// ```rust"},
{"lineNum":" 1702","line":"    /// use byteorder::{ByteOrder, BigEndian};"},
{"lineNum":" 1703","line":"    ///"},
{"lineNum":" 1704","line":"    /// let mut numbers = [5, 65000];"},
{"lineNum":" 1705","line":"    /// BigEndian::from_slice_i32(&mut numbers);"},
{"lineNum":" 1706","line":"    /// assert_eq!(numbers, [5i32.to_be(), 65000i32.to_be()]);"},
{"lineNum":" 1707","line":"    /// ```"},
{"lineNum":" 1708","line":"    #[inline]"},
{"lineNum":" 1709","line":"    fn from_slice_i32(src: &mut [i32]) {"},
{"lineNum":" 1710","line":"        let src = unsafe {"},
{"lineNum":" 1711","line":"            slice::from_raw_parts_mut(src.as_ptr() as *mut u32, src.len())"},
{"lineNum":" 1712","line":"        };"},
{"lineNum":" 1713","line":"        Self::from_slice_u32(src);"},
{"lineNum":" 1714","line":"    }"},
{"lineNum":" 1715","line":""},
{"lineNum":" 1716","line":"    /// Converts the given slice of signed 64 bit integers to a particular"},
{"lineNum":" 1717","line":"    /// endianness."},
{"lineNum":" 1718","line":"    ///"},
{"lineNum":" 1719","line":"    /// If the endianness matches the endianness of the host platform, then"},
{"lineNum":" 1720","line":"    /// this is a no-op."},
{"lineNum":" 1721","line":"    ///"},
{"lineNum":" 1722","line":"    /// # Examples"},
{"lineNum":" 1723","line":"    ///"},
{"lineNum":" 1724","line":"    /// Convert the host platform\'s endianness to big-endian:"},
{"lineNum":" 1725","line":"    ///"},
{"lineNum":" 1726","line":"    /// ```rust"},
{"lineNum":" 1727","line":"    /// use byteorder::{ByteOrder, BigEndian};"},
{"lineNum":" 1728","line":"    ///"},
{"lineNum":" 1729","line":"    /// let mut numbers = [5, 65000];"},
{"lineNum":" 1730","line":"    /// BigEndian::from_slice_i64(&mut numbers);"},
{"lineNum":" 1731","line":"    /// assert_eq!(numbers, [5i64.to_be(), 65000i64.to_be()]);"},
{"lineNum":" 1732","line":"    /// ```"},
{"lineNum":" 1733","line":"    #[inline]"},
{"lineNum":" 1734","line":"    fn from_slice_i64(src: &mut [i64]) {"},
{"lineNum":" 1735","line":"        let src = unsafe {"},
{"lineNum":" 1736","line":"            slice::from_raw_parts_mut(src.as_ptr() as *mut u64, src.len())"},
{"lineNum":" 1737","line":"        };"},
{"lineNum":" 1738","line":"        Self::from_slice_u64(src);"},
{"lineNum":" 1739","line":"    }"},
{"lineNum":" 1740","line":""},
{"lineNum":" 1741","line":"    /// Converts the given slice of signed 128 bit integers to a particular"},
{"lineNum":" 1742","line":"    /// endianness."},
{"lineNum":" 1743","line":"    ///"},
{"lineNum":" 1744","line":"    /// If the endianness matches the endianness of the host platform, then"},
{"lineNum":" 1745","line":"    /// this is a no-op."},
{"lineNum":" 1746","line":"    ///"},
{"lineNum":" 1747","line":"    /// # Examples"},
{"lineNum":" 1748","line":"    ///"},
{"lineNum":" 1749","line":"    /// Convert the host platform\'s endianness to big-endian:"},
{"lineNum":" 1750","line":"    ///"},
{"lineNum":" 1751","line":"    /// ```rust"},
{"lineNum":" 1752","line":"    /// use byteorder::{ByteOrder, BigEndian};"},
{"lineNum":" 1753","line":"    ///"},
{"lineNum":" 1754","line":"    /// let mut numbers = [5, 65000];"},
{"lineNum":" 1755","line":"    /// BigEndian::from_slice_i128(&mut numbers);"},
{"lineNum":" 1756","line":"    /// assert_eq!(numbers, [5i128.to_be(), 65000i128.to_be()]);"},
{"lineNum":" 1757","line":"    /// ```"},
{"lineNum":" 1758","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 1759","line":"    #[inline]"},
{"lineNum":" 1760","line":"    fn from_slice_i128(src: &mut [i128]) {"},
{"lineNum":" 1761","line":"        let src = unsafe {"},
{"lineNum":" 1762","line":"            slice::from_raw_parts_mut(src.as_ptr() as *mut u128, src.len())"},
{"lineNum":" 1763","line":"        };"},
{"lineNum":" 1764","line":"        Self::from_slice_u128(src);"},
{"lineNum":" 1765","line":"    }"},
{"lineNum":" 1766","line":""},
{"lineNum":" 1767","line":"    /// Converts the given slice of IEEE754 single-precision (4 bytes) floating"},
{"lineNum":" 1768","line":"    /// point numbers to a particular endianness."},
{"lineNum":" 1769","line":"    ///"},
{"lineNum":" 1770","line":"    /// If the endianness matches the endianness of the host platform, then"},
{"lineNum":" 1771","line":"    /// this is a no-op."},
{"lineNum":" 1772","line":"    fn from_slice_f32(numbers: &mut [f32]);"},
{"lineNum":" 1773","line":""},
{"lineNum":" 1774","line":"    /// Converts the given slice of IEEE754 double-precision (8 bytes) floating"},
{"lineNum":" 1775","line":"    /// point numbers to a particular endianness."},
{"lineNum":" 1776","line":"    ///"},
{"lineNum":" 1777","line":"    /// If the endianness matches the endianness of the host platform, then"},
{"lineNum":" 1778","line":"    /// this is a no-op."},
{"lineNum":" 1779","line":"    fn from_slice_f64(numbers: &mut [f64]);"},
{"lineNum":" 1780","line":"}"},
{"lineNum":" 1781","line":""},
{"lineNum":" 1782","line":"/// Defines big-endian serialization."},
{"lineNum":" 1783","line":"///"},
{"lineNum":" 1784","line":"/// Note that this type has no value constructor. It is used purely at the"},
{"lineNum":" 1785","line":"/// type level."},
{"lineNum":" 1786","line":"///"},
{"lineNum":" 1787","line":"/// # Examples"},
{"lineNum":" 1788","line":"///"},
{"lineNum":" 1789","line":"/// Write and read `u32` numbers in big endian order:"},
{"lineNum":" 1790","line":"///"},
{"lineNum":" 1791","line":"/// ```rust"},
{"lineNum":" 1792","line":"/// use byteorder::{ByteOrder, BigEndian};"},
{"lineNum":" 1793","line":"///"},
{"lineNum":" 1794","line":"/// let mut buf = [0; 4];"},
{"lineNum":" 1795","line":"/// BigEndian::write_u32(&mut buf, 1_000_000);"},
{"lineNum":" 1796","line":"/// assert_eq!(1_000_000, BigEndian::read_u32(&buf));"},
{"lineNum":" 1797","line":"/// ```"},
{"lineNum":" 1798","line":"#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]"},
{"lineNum":" 1799","line":"pub enum BigEndian {}"},
{"lineNum":" 1800","line":""},
{"lineNum":" 1801","line":"impl Default for BigEndian {"},
{"lineNum":" 1802","line":"    fn default() -> BigEndian {"},
{"lineNum":" 1803","line":"        panic!(\"BigEndian default\")"},
{"lineNum":" 1804","line":"    }"},
{"lineNum":" 1805","line":"}"},
{"lineNum":" 1806","line":""},
{"lineNum":" 1807","line":"/// A type alias for [`BigEndian`]."},
{"lineNum":" 1808","line":"///"},
{"lineNum":" 1809","line":"/// [`BigEndian`]: enum.BigEndian.html"},
{"lineNum":" 1810","line":"pub type BE = BigEndian;"},
{"lineNum":" 1811","line":""},
{"lineNum":" 1812","line":"/// Defines little-endian serialization."},
{"lineNum":" 1813","line":"///"},
{"lineNum":" 1814","line":"/// Note that this type has no value constructor. It is used purely at the"},
{"lineNum":" 1815","line":"/// type level."},
{"lineNum":" 1816","line":"///"},
{"lineNum":" 1817","line":"/// # Examples"},
{"lineNum":" 1818","line":"///"},
{"lineNum":" 1819","line":"/// Write and read `u32` numbers in little endian order:"},
{"lineNum":" 1820","line":"///"},
{"lineNum":" 1821","line":"/// ```rust"},
{"lineNum":" 1822","line":"/// use byteorder::{ByteOrder, LittleEndian};"},
{"lineNum":" 1823","line":"///"},
{"lineNum":" 1824","line":"/// let mut buf = [0; 4];"},
{"lineNum":" 1825","line":"/// LittleEndian::write_u32(&mut buf, 1_000_000);"},
{"lineNum":" 1826","line":"/// assert_eq!(1_000_000, LittleEndian::read_u32(&buf));"},
{"lineNum":" 1827","line":"/// ```"},
{"lineNum":" 1828","line":"#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]"},
{"lineNum":" 1829","line":"pub enum LittleEndian {}"},
{"lineNum":" 1830","line":""},
{"lineNum":" 1831","line":"impl Default for LittleEndian {"},
{"lineNum":" 1832","line":"    fn default() -> LittleEndian {"},
{"lineNum":" 1833","line":"        panic!(\"LittleEndian default\")"},
{"lineNum":" 1834","line":"    }"},
{"lineNum":" 1835","line":"}"},
{"lineNum":" 1836","line":""},
{"lineNum":" 1837","line":"/// A type alias for [`LittleEndian`]."},
{"lineNum":" 1838","line":"///"},
{"lineNum":" 1839","line":"/// [`LittleEndian`]: enum.LittleEndian.html"},
{"lineNum":" 1840","line":"pub type LE = LittleEndian;"},
{"lineNum":" 1841","line":""},
{"lineNum":" 1842","line":"/// Defines network byte order serialization."},
{"lineNum":" 1843","line":"///"},
{"lineNum":" 1844","line":"/// Network byte order is defined by [RFC 1700][1] to be big-endian, and is"},
{"lineNum":" 1845","line":"/// referred to in several protocol specifications.  This type is an alias of"},
{"lineNum":" 1846","line":"/// [`BigEndian`]."},
{"lineNum":" 1847","line":"///"},
{"lineNum":" 1848","line":"/// [1]: https://tools.ietf.org/html/rfc1700"},
{"lineNum":" 1849","line":"///"},
{"lineNum":" 1850","line":"/// Note that this type has no value constructor. It is used purely at the"},
{"lineNum":" 1851","line":"/// type level."},
{"lineNum":" 1852","line":"///"},
{"lineNum":" 1853","line":"/// # Examples"},
{"lineNum":" 1854","line":"///"},
{"lineNum":" 1855","line":"/// Write and read `i16` numbers in big endian order:"},
{"lineNum":" 1856","line":"///"},
{"lineNum":" 1857","line":"/// ```rust"},
{"lineNum":" 1858","line":"/// use byteorder::{ByteOrder, NetworkEndian, BigEndian};"},
{"lineNum":" 1859","line":"///"},
{"lineNum":" 1860","line":"/// let mut buf = [0; 2];"},
{"lineNum":" 1861","line":"/// BigEndian::write_i16(&mut buf, -5_000);"},
{"lineNum":" 1862","line":"/// assert_eq!(-5_000, NetworkEndian::read_i16(&buf));"},
{"lineNum":" 1863","line":"/// ```"},
{"lineNum":" 1864","line":"///"},
{"lineNum":" 1865","line":"/// [`BigEndian`]: enum.BigEndian.html"},
{"lineNum":" 1866","line":"pub type NetworkEndian = BigEndian;"},
{"lineNum":" 1867","line":""},
{"lineNum":" 1868","line":"/// Defines system native-endian serialization."},
{"lineNum":" 1869","line":"///"},
{"lineNum":" 1870","line":"/// Note that this type has no value constructor. It is used purely at the"},
{"lineNum":" 1871","line":"/// type level."},
{"lineNum":" 1872","line":"///"},
{"lineNum":" 1873","line":"/// On this platform, this is an alias for [`LittleEndian`]."},
{"lineNum":" 1874","line":"///"},
{"lineNum":" 1875","line":"/// [`LittleEndian`]: enum.LittleEndian.html"},
{"lineNum":" 1876","line":"#[cfg(target_endian = \"little\")]"},
{"lineNum":" 1877","line":"pub type NativeEndian = LittleEndian;"},
{"lineNum":" 1878","line":""},
{"lineNum":" 1879","line":"/// Defines system native-endian serialization."},
{"lineNum":" 1880","line":"///"},
{"lineNum":" 1881","line":"/// Note that this type has no value constructor. It is used purely at the"},
{"lineNum":" 1882","line":"/// type level."},
{"lineNum":" 1883","line":"///"},
{"lineNum":" 1884","line":"/// On this platform, this is an alias for [`BigEndian`]."},
{"lineNum":" 1885","line":"///"},
{"lineNum":" 1886","line":"/// [`BigEndian`]: enum.BigEndian.html"},
{"lineNum":" 1887","line":"#[cfg(target_endian = \"big\")]"},
{"lineNum":" 1888","line":"pub type NativeEndian = BigEndian;"},
{"lineNum":" 1889","line":""},
{"lineNum":" 1890","line":"macro_rules! read_num_bytes {"},
{"lineNum":" 1891","line":"    ($ty:ty, $size:expr, $src:expr, $which:ident) => ({"},
{"lineNum":" 1892","line":"        assert!($size == ::core::mem::size_of::<$ty>());"},
{"lineNum":" 1893","line":"        assert!($size <= $src.len());"},
{"lineNum":" 1894","line":"        let mut data: $ty = 0;"},
{"lineNum":" 1895","line":"        unsafe {"},
{"lineNum":" 1896","line":"            copy_nonoverlapping("},
{"lineNum":" 1897","line":"                $src.as_ptr(),"},
{"lineNum":" 1898","line":"                &mut data as *mut $ty as *mut u8,"},
{"lineNum":" 1899","line":"                $size);"},
{"lineNum":" 1900","line":"        }"},
{"lineNum":" 1901","line":"        data.$which()"},
{"lineNum":" 1902","line":"    });"},
{"lineNum":" 1903","line":"}"},
{"lineNum":" 1904","line":""},
{"lineNum":" 1905","line":"macro_rules! write_num_bytes {"},
{"lineNum":" 1906","line":"    ($ty:ty, $size:expr, $n:expr, $dst:expr, $which:ident) => ({"},
{"lineNum":" 1907","line":"        assert!($size <= $dst.len());","class":"lineCov","hits":"2","order":"3640","possible_hits":"2",},
{"lineNum":" 1908","line":"        unsafe {"},
{"lineNum":" 1909","line":"            // N.B. https://github.com/rust-lang/rust/issues/22776"},
{"lineNum":" 1910","line":"            let bytes = *(&$n.$which() as *const _ as *const [u8; $size]);","class":"lineCov","hits":"2","order":"3641","possible_hits":"2",},
{"lineNum":" 1911","line":"            copy_nonoverlapping((&bytes).as_ptr(), $dst.as_mut_ptr(), $size);","class":"lineCov","hits":"4","order":"3642","possible_hits":"4",},
{"lineNum":" 1912","line":"        }"},
{"lineNum":" 1913","line":"    });"},
{"lineNum":" 1914","line":"}"},
{"lineNum":" 1915","line":""},
{"lineNum":" 1916","line":"macro_rules! read_slice {"},
{"lineNum":" 1917","line":"    ($src:expr, $dst:expr, $size:expr, $which:ident) => {{"},
{"lineNum":" 1918","line":"        assert_eq!($src.len(), $size * $dst.len());","class":"linePartCov","hits":"2","order":"3504","possible_hits":"4",},
{"lineNum":" 1919","line":""},
{"lineNum":" 1920","line":"        unsafe {"},
{"lineNum":" 1921","line":"            copy_nonoverlapping(","class":"lineCov","hits":"1","order":"3517","possible_hits":"1",},
{"lineNum":" 1922","line":"                $src.as_ptr(),","class":"lineCov","hits":"1","order":"3508","possible_hits":"1",},
{"lineNum":" 1923","line":"                $dst.as_mut_ptr() as *mut u8,","class":"lineCov","hits":"1","order":"3511","possible_hits":"1",},
{"lineNum":" 1924","line":"                $src.len());","class":"lineCov","hits":"1","order":"3516","possible_hits":"1",},
{"lineNum":" 1925","line":"        }"},
{"lineNum":" 1926","line":"        for v in $dst.iter_mut() {","class":"lineCov","hits":"3","order":"3518","possible_hits":"3",},
{"lineNum":" 1927","line":"            *v = v.$which();","class":"lineCov","hits":"2","order":"3536","possible_hits":"2",},
{"lineNum":" 1928","line":"        }"},
{"lineNum":" 1929","line":"    }};"},
{"lineNum":" 1930","line":"}"},
{"lineNum":" 1931","line":""},
{"lineNum":" 1932","line":"macro_rules! write_slice_native {"},
{"lineNum":" 1933","line":"    ($src:expr, $dst:expr, $ty:ty, $size:expr) => {{"},
{"lineNum":" 1934","line":"        assert!($size == ::core::mem::size_of::<$ty>());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1935","line":"        assert_eq!($size * $src.len(), $dst.len());","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1936","line":""},
{"lineNum":" 1937","line":"        unsafe {"},
{"lineNum":" 1938","line":"            copy_nonoverlapping(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1939","line":"                $src.as_ptr() as *const u8,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1940","line":"                $dst.as_mut_ptr(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1941","line":"                $dst.len());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1942","line":"        }"},
{"lineNum":" 1943","line":"    }};"},
{"lineNum":" 1944","line":"}"},
{"lineNum":" 1945","line":""},
{"lineNum":" 1946","line":"macro_rules! write_slice {"},
{"lineNum":" 1947","line":"    ($src:expr, $dst:expr, $ty:ty, $size:expr, $write:expr) => ({"},
{"lineNum":" 1948","line":"        assert!($size == ::core::mem::size_of::<$ty>());","class":"lineCov","hits":"1","order":"3652","possible_hits":"1",},
{"lineNum":" 1949","line":"        assert_eq!($size * $src.len(), $dst.len());","class":"linePartCov","hits":"2","order":"3654","possible_hits":"4",},
{"lineNum":" 1950","line":""},
{"lineNum":" 1951","line":"        for (&n, chunk) in $src.iter().zip($dst.chunks_mut($size)) {","class":"lineCov","hits":"4","order":"3655","possible_hits":"4",},
{"lineNum":" 1952","line":"            $write(chunk, n);","class":"lineCov","hits":"1","order":"3697","possible_hits":"1",},
{"lineNum":" 1953","line":"        }"},
{"lineNum":" 1954","line":"    });"},
{"lineNum":" 1955","line":"}"},
{"lineNum":" 1956","line":""},
{"lineNum":" 1957","line":"impl ByteOrder for BigEndian {"},
{"lineNum":" 1958","line":"    #[inline]"},
{"lineNum":" 1959","line":"    fn read_u16(buf: &[u8]) -> u16 {"},
{"lineNum":" 1960","line":"        read_num_bytes!(u16, 2, buf, to_be)"},
{"lineNum":" 1961","line":"    }"},
{"lineNum":" 1962","line":""},
{"lineNum":" 1963","line":"    #[inline]"},
{"lineNum":" 1964","line":"    fn read_u32(buf: &[u8]) -> u32 {"},
{"lineNum":" 1965","line":"        read_num_bytes!(u32, 4, buf, to_be)"},
{"lineNum":" 1966","line":"    }"},
{"lineNum":" 1967","line":""},
{"lineNum":" 1968","line":"    #[inline]"},
{"lineNum":" 1969","line":"    fn read_u64(buf: &[u8]) -> u64 {"},
{"lineNum":" 1970","line":"        read_num_bytes!(u64, 8, buf, to_be)"},
{"lineNum":" 1971","line":"    }"},
{"lineNum":" 1972","line":""},
{"lineNum":" 1973","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 1974","line":"    #[inline]"},
{"lineNum":" 1975","line":"    fn read_u128(buf: &[u8]) -> u128 {"},
{"lineNum":" 1976","line":"        read_num_bytes!(u128, 16, buf, to_be)"},
{"lineNum":" 1977","line":"    }"},
{"lineNum":" 1978","line":""},
{"lineNum":" 1979","line":"    #[inline]"},
{"lineNum":" 1980","line":"    fn read_uint(buf: &[u8], nbytes: usize) -> u64 {"},
{"lineNum":" 1981","line":"        assert!(1 <= nbytes && nbytes <= 8 && nbytes <= buf.len());"},
{"lineNum":" 1982","line":"        let mut out = [0u8; 8];"},
{"lineNum":" 1983","line":"        let ptr_out = out.as_mut_ptr();"},
{"lineNum":" 1984","line":"        unsafe {"},
{"lineNum":" 1985","line":"            copy_nonoverlapping("},
{"lineNum":" 1986","line":"                buf.as_ptr(), ptr_out.offset((8 - nbytes) as isize), nbytes);"},
{"lineNum":" 1987","line":"            (*(ptr_out as *const u64)).to_be()"},
{"lineNum":" 1988","line":"        }"},
{"lineNum":" 1989","line":"    }"},
{"lineNum":" 1990","line":""},
{"lineNum":" 1991","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 1992","line":"    #[inline]"},
{"lineNum":" 1993","line":"    fn read_uint128(buf: &[u8], nbytes: usize) -> u128 {"},
{"lineNum":" 1994","line":"        assert!(1 <= nbytes && nbytes <= 16 && nbytes <= buf.len());"},
{"lineNum":" 1995","line":"        let mut out = [0u8; 16];"},
{"lineNum":" 1996","line":"        let ptr_out = out.as_mut_ptr();"},
{"lineNum":" 1997","line":"        unsafe {"},
{"lineNum":" 1998","line":"            copy_nonoverlapping("},
{"lineNum":" 1999","line":"                buf.as_ptr(), ptr_out.offset((16 - nbytes) as isize), nbytes);"},
{"lineNum":" 2000","line":"            (*(ptr_out as *const u128)).to_be()"},
{"lineNum":" 2001","line":"        }"},
{"lineNum":" 2002","line":"    }"},
{"lineNum":" 2003","line":""},
{"lineNum":" 2004","line":"    #[inline]"},
{"lineNum":" 2005","line":"    fn write_u16(buf: &mut [u8], n: u16) {"},
{"lineNum":" 2006","line":"        write_num_bytes!(u16, 2, n, buf, to_be);"},
{"lineNum":" 2007","line":"    }"},
{"lineNum":" 2008","line":""},
{"lineNum":" 2009","line":"    #[inline]"},
{"lineNum":" 2010","line":"    fn write_u32(buf: &mut [u8], n: u32) {","class":"lineCov","hits":"1","order":"3698","possible_hits":"1",},
{"lineNum":" 2011","line":"        write_num_bytes!(u32, 4, n, buf, to_be);","class":"lineCov","hits":"3","order":"3699","possible_hits":"3",},
{"lineNum":" 2012","line":"    }","class":"linePartCov","hits":"1","order":"3700","possible_hits":"2",},
{"lineNum":" 2013","line":""},
{"lineNum":" 2014","line":"    #[inline]"},
{"lineNum":" 2015","line":"    fn write_u64(buf: &mut [u8], n: u64) {","class":"lineCov","hits":"1","order":"3638","possible_hits":"1",},
{"lineNum":" 2016","line":"        write_num_bytes!(u64, 8, n, buf, to_be);","class":"lineCov","hits":"3","order":"3639","possible_hits":"3",},
{"lineNum":" 2017","line":"    }","class":"linePartCov","hits":"1","order":"3643","possible_hits":"2",},
{"lineNum":" 2018","line":""},
{"lineNum":" 2019","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2020","line":"    #[inline]"},
{"lineNum":" 2021","line":"    fn write_u128(buf: &mut [u8], n: u128) {"},
{"lineNum":" 2022","line":"        write_num_bytes!(u128, 16, n, buf, to_be);"},
{"lineNum":" 2023","line":"    }"},
{"lineNum":" 2024","line":""},
{"lineNum":" 2025","line":"    #[inline]"},
{"lineNum":" 2026","line":"    fn write_uint(buf: &mut [u8], n: u64, nbytes: usize) {"},
{"lineNum":" 2027","line":"        assert!(pack_size(n) <= nbytes && nbytes <= 8);"},
{"lineNum":" 2028","line":"        assert!(nbytes <= buf.len());"},
{"lineNum":" 2029","line":"        unsafe {"},
{"lineNum":" 2030","line":"            let bytes = *(&n.to_be() as *const u64 as *const [u8; 8]);"},
{"lineNum":" 2031","line":"            copy_nonoverlapping("},
{"lineNum":" 2032","line":"                bytes.as_ptr().offset((8 - nbytes) as isize),"},
{"lineNum":" 2033","line":"                buf.as_mut_ptr(),"},
{"lineNum":" 2034","line":"                nbytes);"},
{"lineNum":" 2035","line":"        }"},
{"lineNum":" 2036","line":"    }"},
{"lineNum":" 2037","line":""},
{"lineNum":" 2038","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2039","line":"    #[inline]"},
{"lineNum":" 2040","line":"    fn write_uint128(buf: &mut [u8], n: u128, nbytes: usize) {"},
{"lineNum":" 2041","line":"        assert!(pack_size128(n) <= nbytes && nbytes <= 16);"},
{"lineNum":" 2042","line":"        assert!(nbytes <= buf.len());"},
{"lineNum":" 2043","line":"        unsafe {"},
{"lineNum":" 2044","line":"            let bytes = *(&n.to_be() as *const u128 as *const [u8; 16]);"},
{"lineNum":" 2045","line":"            copy_nonoverlapping("},
{"lineNum":" 2046","line":"                bytes.as_ptr().offset((16 - nbytes) as isize),"},
{"lineNum":" 2047","line":"                buf.as_mut_ptr(),"},
{"lineNum":" 2048","line":"                nbytes);"},
{"lineNum":" 2049","line":"        }"},
{"lineNum":" 2050","line":"    }"},
{"lineNum":" 2051","line":""},
{"lineNum":" 2052","line":"    #[inline]"},
{"lineNum":" 2053","line":"    fn read_u16_into(src: &[u8], dst: &mut [u16]) {"},
{"lineNum":" 2054","line":"        read_slice!(src, dst, 2, to_be);"},
{"lineNum":" 2055","line":"    }"},
{"lineNum":" 2056","line":""},
{"lineNum":" 2057","line":"    #[inline]"},
{"lineNum":" 2058","line":"    fn read_u32_into(src: &[u8], dst: &mut [u32]) {","class":"lineCov","hits":"1","order":"3502","possible_hits":"1",},
{"lineNum":" 2059","line":"        read_slice!(src, dst, 4, to_be);","class":"lineCov","hits":"6","order":"3503","possible_hits":"6",},
{"lineNum":" 2060","line":"    }","class":"linePartCov","hits":"1","order":"3543","possible_hits":"2",},
{"lineNum":" 2061","line":""},
{"lineNum":" 2062","line":"    #[inline]"},
{"lineNum":" 2063","line":"    fn read_u64_into(src: &[u8], dst: &mut [u64]) {"},
{"lineNum":" 2064","line":"        read_slice!(src, dst, 8, to_be);"},
{"lineNum":" 2065","line":"    }"},
{"lineNum":" 2066","line":""},
{"lineNum":" 2067","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2068","line":"    #[inline]"},
{"lineNum":" 2069","line":"    fn read_u128_into(src: &[u8], dst: &mut [u128]) {"},
{"lineNum":" 2070","line":"        read_slice!(src, dst, 16, to_be);"},
{"lineNum":" 2071","line":"    }"},
{"lineNum":" 2072","line":""},
{"lineNum":" 2073","line":"    #[inline]"},
{"lineNum":" 2074","line":"    fn write_u16_into(src: &[u16], dst: &mut [u8]) {"},
{"lineNum":" 2075","line":"        if cfg!(target_endian = \"big\") {"},
{"lineNum":" 2076","line":"            write_slice_native!(src, dst, u16, 2);"},
{"lineNum":" 2077","line":"        } else {"},
{"lineNum":" 2078","line":"            write_slice!(src, dst, u16, 2, Self::write_u16);"},
{"lineNum":" 2079","line":"        }"},
{"lineNum":" 2080","line":"    }"},
{"lineNum":" 2081","line":""},
{"lineNum":" 2082","line":"    #[inline]"},
{"lineNum":" 2083","line":"    fn write_u32_into(src: &[u32], dst: &mut [u8]) {","class":"lineCov","hits":"1","order":"3650","possible_hits":"1",},
{"lineNum":" 2084","line":"        if cfg!(target_endian = \"big\") {","class":"linePartCov","hits":"2","order":"3651","possible_hits":"3",},
{"lineNum":" 2085","line":"            write_slice_native!(src, dst, u32, 4);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":" 2086","line":"        } else {"},
{"lineNum":" 2087","line":"            write_slice!(src, dst, u32, 4, Self::write_u32);","class":"lineCov","hits":"4","order":"3653","possible_hits":"4",},
{"lineNum":" 2088","line":"        }"},
{"lineNum":" 2089","line":"    }","class":"linePartCov","hits":"1","order":"3704","possible_hits":"2",},
{"lineNum":" 2090","line":""},
{"lineNum":" 2091","line":"    #[inline]"},
{"lineNum":" 2092","line":"    fn write_u64_into(src: &[u64], dst: &mut [u8]) {"},
{"lineNum":" 2093","line":"        if cfg!(target_endian = \"big\") {"},
{"lineNum":" 2094","line":"            write_slice_native!(src, dst, u64, 8);"},
{"lineNum":" 2095","line":"        } else {"},
{"lineNum":" 2096","line":"            write_slice!(src, dst, u64, 8, Self::write_u64);"},
{"lineNum":" 2097","line":"        }"},
{"lineNum":" 2098","line":"    }"},
{"lineNum":" 2099","line":""},
{"lineNum":" 2100","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2101","line":"    #[inline]"},
{"lineNum":" 2102","line":"    fn write_u128_into(src: &[u128], dst: &mut [u8]) {"},
{"lineNum":" 2103","line":"        if cfg!(target_endian = \"big\") {"},
{"lineNum":" 2104","line":"            write_slice_native!(src, dst, u128, 16);"},
{"lineNum":" 2105","line":"        } else {"},
{"lineNum":" 2106","line":"            write_slice!(src, dst, u128, 16, Self::write_u128);"},
{"lineNum":" 2107","line":"        }"},
{"lineNum":" 2108","line":"    }"},
{"lineNum":" 2109","line":""},
{"lineNum":" 2110","line":"    #[inline]"},
{"lineNum":" 2111","line":"    fn from_slice_u16(numbers: &mut [u16]) {"},
{"lineNum":" 2112","line":"        if cfg!(target_endian = \"little\") {"},
{"lineNum":" 2113","line":"            for n in numbers {"},
{"lineNum":" 2114","line":"                *n = n.to_be();"},
{"lineNum":" 2115","line":"            }"},
{"lineNum":" 2116","line":"        }"},
{"lineNum":" 2117","line":"    }"},
{"lineNum":" 2118","line":""},
{"lineNum":" 2119","line":"    #[inline]"},
{"lineNum":" 2120","line":"    fn from_slice_u32(numbers: &mut [u32]) {"},
{"lineNum":" 2121","line":"        if cfg!(target_endian = \"little\") {"},
{"lineNum":" 2122","line":"            for n in numbers {"},
{"lineNum":" 2123","line":"                *n = n.to_be();"},
{"lineNum":" 2124","line":"            }"},
{"lineNum":" 2125","line":"        }"},
{"lineNum":" 2126","line":"    }"},
{"lineNum":" 2127","line":""},
{"lineNum":" 2128","line":"    #[inline]"},
{"lineNum":" 2129","line":"    fn from_slice_u64(numbers: &mut [u64]) {"},
{"lineNum":" 2130","line":"        if cfg!(target_endian = \"little\") {"},
{"lineNum":" 2131","line":"            for n in numbers {"},
{"lineNum":" 2132","line":"                *n = n.to_be();"},
{"lineNum":" 2133","line":"            }"},
{"lineNum":" 2134","line":"        }"},
{"lineNum":" 2135","line":"    }"},
{"lineNum":" 2136","line":""},
{"lineNum":" 2137","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2138","line":"    #[inline]"},
{"lineNum":" 2139","line":"    fn from_slice_u128(numbers: &mut [u128]) {"},
{"lineNum":" 2140","line":"        if cfg!(target_endian = \"little\") {"},
{"lineNum":" 2141","line":"            for n in numbers {"},
{"lineNum":" 2142","line":"                *n = n.to_be();"},
{"lineNum":" 2143","line":"            }"},
{"lineNum":" 2144","line":"        }"},
{"lineNum":" 2145","line":"    }"},
{"lineNum":" 2146","line":""},
{"lineNum":" 2147","line":"    #[inline]"},
{"lineNum":" 2148","line":"    fn from_slice_f32(numbers: &mut [f32]) {"},
{"lineNum":" 2149","line":"        if cfg!(target_endian = \"little\") {"},
{"lineNum":" 2150","line":"            for n in numbers {"},
{"lineNum":" 2151","line":"                unsafe {"},
{"lineNum":" 2152","line":"                    let int = *(n as *const f32 as *const u32);"},
{"lineNum":" 2153","line":"                    *n = *(&int.to_be() as *const u32 as *const f32);"},
{"lineNum":" 2154","line":"                }"},
{"lineNum":" 2155","line":"            }"},
{"lineNum":" 2156","line":"        }"},
{"lineNum":" 2157","line":"    }"},
{"lineNum":" 2158","line":""},
{"lineNum":" 2159","line":"    #[inline]"},
{"lineNum":" 2160","line":"    fn from_slice_f64(numbers: &mut [f64]) {"},
{"lineNum":" 2161","line":"        if cfg!(target_endian = \"little\") {"},
{"lineNum":" 2162","line":"            for n in numbers {"},
{"lineNum":" 2163","line":"                unsafe {"},
{"lineNum":" 2164","line":"                    let int = *(n as *const f64 as *const u64);"},
{"lineNum":" 2165","line":"                    *n = *(&int.to_be() as *const u64 as *const f64);"},
{"lineNum":" 2166","line":"                }"},
{"lineNum":" 2167","line":"            }"},
{"lineNum":" 2168","line":"        }"},
{"lineNum":" 2169","line":"    }"},
{"lineNum":" 2170","line":"}"},
{"lineNum":" 2171","line":""},
{"lineNum":" 2172","line":"impl ByteOrder for LittleEndian {"},
{"lineNum":" 2173","line":"    #[inline]"},
{"lineNum":" 2174","line":"    fn read_u16(buf: &[u8]) -> u16 {"},
{"lineNum":" 2175","line":"        read_num_bytes!(u16, 2, buf, to_le)"},
{"lineNum":" 2176","line":"    }"},
{"lineNum":" 2177","line":""},
{"lineNum":" 2178","line":"    #[inline]"},
{"lineNum":" 2179","line":"    fn read_u32(buf: &[u8]) -> u32 {"},
{"lineNum":" 2180","line":"        read_num_bytes!(u32, 4, buf, to_le)"},
{"lineNum":" 2181","line":"    }"},
{"lineNum":" 2182","line":""},
{"lineNum":" 2183","line":"    #[inline]"},
{"lineNum":" 2184","line":"    fn read_u64(buf: &[u8]) -> u64 {"},
{"lineNum":" 2185","line":"        read_num_bytes!(u64, 8, buf, to_le)"},
{"lineNum":" 2186","line":"    }"},
{"lineNum":" 2187","line":""},
{"lineNum":" 2188","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2189","line":"    #[inline]"},
{"lineNum":" 2190","line":"    fn read_u128(buf: &[u8]) -> u128 {"},
{"lineNum":" 2191","line":"        read_num_bytes!(u128, 16, buf, to_le)"},
{"lineNum":" 2192","line":"    }"},
{"lineNum":" 2193","line":""},
{"lineNum":" 2194","line":"    #[inline]"},
{"lineNum":" 2195","line":"    fn read_uint(buf: &[u8], nbytes: usize) -> u64 {"},
{"lineNum":" 2196","line":"        assert!(1 <= nbytes && nbytes <= 8 && nbytes <= buf.len());"},
{"lineNum":" 2197","line":"        let mut out = [0u8; 8];"},
{"lineNum":" 2198","line":"        let ptr_out = out.as_mut_ptr();"},
{"lineNum":" 2199","line":"        unsafe {"},
{"lineNum":" 2200","line":"            copy_nonoverlapping(buf.as_ptr(), ptr_out, nbytes);"},
{"lineNum":" 2201","line":"            (*(ptr_out as *const u64)).to_le()"},
{"lineNum":" 2202","line":"        }"},
{"lineNum":" 2203","line":"    }"},
{"lineNum":" 2204","line":""},
{"lineNum":" 2205","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2206","line":"    #[inline]"},
{"lineNum":" 2207","line":"    fn read_uint128(buf: &[u8], nbytes: usize) -> u128 {"},
{"lineNum":" 2208","line":"        assert!(1 <= nbytes && nbytes <= 16 && nbytes <= buf.len());"},
{"lineNum":" 2209","line":"        let mut out = [0u8; 16];"},
{"lineNum":" 2210","line":"        let ptr_out = out.as_mut_ptr();"},
{"lineNum":" 2211","line":"        unsafe {"},
{"lineNum":" 2212","line":"            copy_nonoverlapping(buf.as_ptr(), ptr_out, nbytes);"},
{"lineNum":" 2213","line":"            (*(ptr_out as *const u128)).to_le()"},
{"lineNum":" 2214","line":"        }"},
{"lineNum":" 2215","line":"    }"},
{"lineNum":" 2216","line":""},
{"lineNum":" 2217","line":"    #[inline]"},
{"lineNum":" 2218","line":"    fn write_u16(buf: &mut [u8], n: u16) {"},
{"lineNum":" 2219","line":"        write_num_bytes!(u16, 2, n, buf, to_le);"},
{"lineNum":" 2220","line":"    }"},
{"lineNum":" 2221","line":""},
{"lineNum":" 2222","line":"    #[inline]"},
{"lineNum":" 2223","line":"    fn write_u32(buf: &mut [u8], n: u32) {"},
{"lineNum":" 2224","line":"        write_num_bytes!(u32, 4, n, buf, to_le);"},
{"lineNum":" 2225","line":"    }"},
{"lineNum":" 2226","line":""},
{"lineNum":" 2227","line":"    #[inline]"},
{"lineNum":" 2228","line":"    fn write_u64(buf: &mut [u8], n: u64) {"},
{"lineNum":" 2229","line":"        write_num_bytes!(u64, 8, n, buf, to_le);"},
{"lineNum":" 2230","line":"    }"},
{"lineNum":" 2231","line":""},
{"lineNum":" 2232","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2233","line":"    #[inline]"},
{"lineNum":" 2234","line":"    fn write_u128(buf: &mut [u8], n: u128) {"},
{"lineNum":" 2235","line":"        write_num_bytes!(u128, 16, n, buf, to_le);"},
{"lineNum":" 2236","line":"    }"},
{"lineNum":" 2237","line":""},
{"lineNum":" 2238","line":"    #[inline]"},
{"lineNum":" 2239","line":"    fn write_uint(buf: &mut [u8], n: u64, nbytes: usize) {"},
{"lineNum":" 2240","line":"        assert!(pack_size(n as u64) <= nbytes && nbytes <= 8);"},
{"lineNum":" 2241","line":"        assert!(nbytes <= buf.len());"},
{"lineNum":" 2242","line":"        unsafe {"},
{"lineNum":" 2243","line":"            let bytes = *(&n.to_le() as *const u64 as *const [u8; 8]);"},
{"lineNum":" 2244","line":"            copy_nonoverlapping(bytes.as_ptr(), buf.as_mut_ptr(), nbytes);"},
{"lineNum":" 2245","line":"        }"},
{"lineNum":" 2246","line":"    }"},
{"lineNum":" 2247","line":""},
{"lineNum":" 2248","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2249","line":"    #[inline]"},
{"lineNum":" 2250","line":"    fn write_uint128(buf: &mut [u8], n: u128, nbytes: usize) {"},
{"lineNum":" 2251","line":"        assert!(pack_size128(n as u128) <= nbytes && nbytes <= 16);"},
{"lineNum":" 2252","line":"        assert!(nbytes <= buf.len());"},
{"lineNum":" 2253","line":"        unsafe {"},
{"lineNum":" 2254","line":"            let bytes = *(&n.to_le() as *const u128 as *const [u8; 16]);"},
{"lineNum":" 2255","line":"            copy_nonoverlapping(bytes.as_ptr(), buf.as_mut_ptr(), nbytes);"},
{"lineNum":" 2256","line":"        }"},
{"lineNum":" 2257","line":"    }"},
{"lineNum":" 2258","line":""},
{"lineNum":" 2259","line":"    #[inline]"},
{"lineNum":" 2260","line":"    fn read_u16_into(src: &[u8], dst: &mut [u16]) {"},
{"lineNum":" 2261","line":"        read_slice!(src, dst, 2, to_le);"},
{"lineNum":" 2262","line":"    }"},
{"lineNum":" 2263","line":""},
{"lineNum":" 2264","line":"    #[inline]"},
{"lineNum":" 2265","line":"    fn read_u32_into(src: &[u8], dst: &mut [u32]) {"},
{"lineNum":" 2266","line":"        read_slice!(src, dst, 4, to_le);"},
{"lineNum":" 2267","line":"    }"},
{"lineNum":" 2268","line":""},
{"lineNum":" 2269","line":"    #[inline]"},
{"lineNum":" 2270","line":"    fn read_u64_into(src: &[u8], dst: &mut [u64]) {"},
{"lineNum":" 2271","line":"        read_slice!(src, dst, 8, to_le);"},
{"lineNum":" 2272","line":"    }"},
{"lineNum":" 2273","line":""},
{"lineNum":" 2274","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2275","line":"    #[inline]"},
{"lineNum":" 2276","line":"    fn read_u128_into(src: &[u8], dst: &mut [u128]) {"},
{"lineNum":" 2277","line":"        read_slice!(src, dst, 16, to_le);"},
{"lineNum":" 2278","line":"    }"},
{"lineNum":" 2279","line":""},
{"lineNum":" 2280","line":"    #[inline]"},
{"lineNum":" 2281","line":"    fn write_u16_into(src: &[u16], dst: &mut [u8]) {"},
{"lineNum":" 2282","line":"        if cfg!(target_endian = \"little\") {"},
{"lineNum":" 2283","line":"            write_slice_native!(src, dst, u16, 2);"},
{"lineNum":" 2284","line":"        } else {"},
{"lineNum":" 2285","line":"            write_slice!(src, dst, u16, 2, Self::write_u16);"},
{"lineNum":" 2286","line":"        }"},
{"lineNum":" 2287","line":"    }"},
{"lineNum":" 2288","line":""},
{"lineNum":" 2289","line":"    #[inline]"},
{"lineNum":" 2290","line":"    fn write_u32_into(src: &[u32], dst: &mut [u8]) {"},
{"lineNum":" 2291","line":"        if cfg!(target_endian = \"little\") {"},
{"lineNum":" 2292","line":"            write_slice_native!(src, dst, u32, 4);"},
{"lineNum":" 2293","line":"        } else {"},
{"lineNum":" 2294","line":"            write_slice!(src, dst, u32, 4, Self::write_u32);"},
{"lineNum":" 2295","line":"        }"},
{"lineNum":" 2296","line":"    }"},
{"lineNum":" 2297","line":""},
{"lineNum":" 2298","line":"    #[inline]"},
{"lineNum":" 2299","line":"    fn write_u64_into(src: &[u64], dst: &mut [u8]) {"},
{"lineNum":" 2300","line":"        if cfg!(target_endian = \"little\") {"},
{"lineNum":" 2301","line":"            write_slice_native!(src, dst, u64, 8);"},
{"lineNum":" 2302","line":"        } else {"},
{"lineNum":" 2303","line":"            write_slice!(src, dst, u64, 8, Self::write_u64);"},
{"lineNum":" 2304","line":"        }"},
{"lineNum":" 2305","line":"    }"},
{"lineNum":" 2306","line":""},
{"lineNum":" 2307","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2308","line":"    #[inline]"},
{"lineNum":" 2309","line":"    fn write_u128_into(src: &[u128], dst: &mut [u8]) {"},
{"lineNum":" 2310","line":"        if cfg!(target_endian = \"little\") {"},
{"lineNum":" 2311","line":"            write_slice_native!(src, dst, u128, 16);"},
{"lineNum":" 2312","line":"        } else {"},
{"lineNum":" 2313","line":"            write_slice!(src, dst, u128, 16, Self::write_u128);"},
{"lineNum":" 2314","line":"        }"},
{"lineNum":" 2315","line":"    }"},
{"lineNum":" 2316","line":""},
{"lineNum":" 2317","line":"    #[inline]"},
{"lineNum":" 2318","line":"    fn from_slice_u16(numbers: &mut [u16]) {"},
{"lineNum":" 2319","line":"        if cfg!(target_endian = \"big\") {"},
{"lineNum":" 2320","line":"            for n in numbers {"},
{"lineNum":" 2321","line":"                *n = n.to_le();"},
{"lineNum":" 2322","line":"            }"},
{"lineNum":" 2323","line":"        }"},
{"lineNum":" 2324","line":"    }"},
{"lineNum":" 2325","line":""},
{"lineNum":" 2326","line":"    #[inline]"},
{"lineNum":" 2327","line":"    fn from_slice_u32(numbers: &mut [u32]) {"},
{"lineNum":" 2328","line":"        if cfg!(target_endian = \"big\") {"},
{"lineNum":" 2329","line":"            for n in numbers {"},
{"lineNum":" 2330","line":"                *n = n.to_le();"},
{"lineNum":" 2331","line":"            }"},
{"lineNum":" 2332","line":"        }"},
{"lineNum":" 2333","line":"    }"},
{"lineNum":" 2334","line":""},
{"lineNum":" 2335","line":"    #[inline]"},
{"lineNum":" 2336","line":"    fn from_slice_u64(numbers: &mut [u64]) {"},
{"lineNum":" 2337","line":"        if cfg!(target_endian = \"big\") {"},
{"lineNum":" 2338","line":"            for n in numbers {"},
{"lineNum":" 2339","line":"                *n = n.to_le();"},
{"lineNum":" 2340","line":"            }"},
{"lineNum":" 2341","line":"        }"},
{"lineNum":" 2342","line":"    }"},
{"lineNum":" 2343","line":""},
{"lineNum":" 2344","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2345","line":"    #[inline]"},
{"lineNum":" 2346","line":"    fn from_slice_u128(numbers: &mut [u128]) {"},
{"lineNum":" 2347","line":"        if cfg!(target_endian = \"big\") {"},
{"lineNum":" 2348","line":"            for n in numbers {"},
{"lineNum":" 2349","line":"                *n = n.to_le();"},
{"lineNum":" 2350","line":"            }"},
{"lineNum":" 2351","line":"        }"},
{"lineNum":" 2352","line":"    }"},
{"lineNum":" 2353","line":""},
{"lineNum":" 2354","line":"    #[inline]"},
{"lineNum":" 2355","line":"    fn from_slice_f32(numbers: &mut [f32]) {"},
{"lineNum":" 2356","line":"        if cfg!(target_endian = \"big\") {"},
{"lineNum":" 2357","line":"            for n in numbers {"},
{"lineNum":" 2358","line":"                unsafe {"},
{"lineNum":" 2359","line":"                    let int = *(n as *const f32 as *const u32);"},
{"lineNum":" 2360","line":"                    *n = *(&int.to_le() as *const u32 as *const f32);"},
{"lineNum":" 2361","line":"                }"},
{"lineNum":" 2362","line":"            }"},
{"lineNum":" 2363","line":"        }"},
{"lineNum":" 2364","line":"    }"},
{"lineNum":" 2365","line":""},
{"lineNum":" 2366","line":"    #[inline]"},
{"lineNum":" 2367","line":"    fn from_slice_f64(numbers: &mut [f64]) {"},
{"lineNum":" 2368","line":"        if cfg!(target_endian = \"big\") {"},
{"lineNum":" 2369","line":"            for n in numbers {"},
{"lineNum":" 2370","line":"                unsafe {"},
{"lineNum":" 2371","line":"                    let int = *(n as *const f64 as *const u64);"},
{"lineNum":" 2372","line":"                    *n = *(&int.to_le() as *const u64 as *const f64);"},
{"lineNum":" 2373","line":"                }"},
{"lineNum":" 2374","line":"            }"},
{"lineNum":" 2375","line":"        }"},
{"lineNum":" 2376","line":"    }"},
{"lineNum":" 2377","line":"}"},
{"lineNum":" 2378","line":""},
{"lineNum":" 2379","line":"#[cfg(test)]"},
{"lineNum":" 2380","line":"mod test {"},
{"lineNum":" 2381","line":"    extern crate quickcheck;"},
{"lineNum":" 2382","line":"    extern crate rand;"},
{"lineNum":" 2383","line":""},
{"lineNum":" 2384","line":"    use self::quickcheck::{QuickCheck, StdGen, Testable};"},
{"lineNum":" 2385","line":"    use self::rand::thread_rng;"},
{"lineNum":" 2386","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2387","line":"    use self::rand::Rng;"},
{"lineNum":" 2388","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2389","line":"    use self::quickcheck::{Arbitrary, Gen};"},
{"lineNum":" 2390","line":""},
{"lineNum":" 2391","line":"    pub const U24_MAX: u32 = 16_777_215;"},
{"lineNum":" 2392","line":"    pub const I24_MAX: i32 = 8_388_607;"},
{"lineNum":" 2393","line":"    pub const U48_MAX: u64 = 281_474_976_710_655;"},
{"lineNum":" 2394","line":"    pub const I48_MAX: i64 = 140_737_488_355_327;"},
{"lineNum":" 2395","line":""},
{"lineNum":" 2396","line":"    pub const U64_MAX: u64 = ::core::u64::MAX;"},
{"lineNum":" 2397","line":"    pub const I64_MAX: u64 = ::core::i64::MAX as u64;"},
{"lineNum":" 2398","line":""},
{"lineNum":" 2399","line":"    macro_rules! calc_max {"},
{"lineNum":" 2400","line":"        ($max:expr, $bytes:expr) => { calc_max!($max, $bytes, 8) };"},
{"lineNum":" 2401","line":"        ($max:expr, $bytes:expr, $maxbytes:expr) => {"},
{"lineNum":" 2402","line":"            ($max - 1) >> (8 * ($maxbytes - $bytes))"},
{"lineNum":" 2403","line":"        };"},
{"lineNum":" 2404","line":"    }"},
{"lineNum":" 2405","line":""},
{"lineNum":" 2406","line":"    #[derive(Clone, Debug)]"},
{"lineNum":" 2407","line":"    pub struct Wi128<T>(pub T);"},
{"lineNum":" 2408","line":""},
{"lineNum":" 2409","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2410","line":"    impl<T: Clone> Wi128<T> {"},
{"lineNum":" 2411","line":"        pub fn clone(&self) -> T {"},
{"lineNum":" 2412","line":"            self.0.clone()"},
{"lineNum":" 2413","line":"        }"},
{"lineNum":" 2414","line":"    }"},
{"lineNum":" 2415","line":""},
{"lineNum":" 2416","line":"    impl<T: PartialEq> PartialEq<T> for Wi128<T> {"},
{"lineNum":" 2417","line":"        fn eq(&self, other: &T) -> bool {"},
{"lineNum":" 2418","line":"            self.0.eq(other)"},
{"lineNum":" 2419","line":"        }"},
{"lineNum":" 2420","line":"    }"},
{"lineNum":" 2421","line":""},
{"lineNum":" 2422","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2423","line":"    impl Arbitrary for Wi128<u128> {"},
{"lineNum":" 2424","line":"        fn arbitrary<G: Gen>(gen: &mut G) -> Wi128<u128> {"},
{"lineNum":" 2425","line":"            let max = calc_max!(::core::u128::MAX, gen.size(), 16);"},
{"lineNum":" 2426","line":"            let output ="},
{"lineNum":" 2427","line":"                (gen.gen::<u64>() as u128) |"},
{"lineNum":" 2428","line":"                ((gen.gen::<u64>() as u128) << 64);"},
{"lineNum":" 2429","line":"            Wi128(output & (max - 1))"},
{"lineNum":" 2430","line":"        }"},
{"lineNum":" 2431","line":"    }"},
{"lineNum":" 2432","line":""},
{"lineNum":" 2433","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2434","line":"    impl Arbitrary for Wi128<i128> {"},
{"lineNum":" 2435","line":"        fn arbitrary<G: Gen>(gen: &mut G) -> Wi128<i128> {"},
{"lineNum":" 2436","line":"            let max = calc_max!(::core::i128::MAX, gen.size(), 16);"},
{"lineNum":" 2437","line":"            let output ="},
{"lineNum":" 2438","line":"                (gen.gen::<i64>() as i128) |"},
{"lineNum":" 2439","line":"                ((gen.gen::<i64>() as i128) << 64);"},
{"lineNum":" 2440","line":"            Wi128(output & (max - 1))"},
{"lineNum":" 2441","line":"        }"},
{"lineNum":" 2442","line":"    }"},
{"lineNum":" 2443","line":""},
{"lineNum":" 2444","line":"    pub fn qc_sized<A: Testable>(f: A, size: u64) {"},
{"lineNum":" 2445","line":"        QuickCheck::new()"},
{"lineNum":" 2446","line":"            .gen(StdGen::new(thread_rng(), size as usize))"},
{"lineNum":" 2447","line":"            .tests(1_00)"},
{"lineNum":" 2448","line":"            .max_tests(10_000)"},
{"lineNum":" 2449","line":"            .quickcheck(f);"},
{"lineNum":" 2450","line":"    }"},
{"lineNum":" 2451","line":""},
{"lineNum":" 2452","line":"    macro_rules! qc_byte_order {"},
{"lineNum":" 2453","line":"        ($name:ident, $ty_int:ty, $max:expr,"},
{"lineNum":" 2454","line":"         $bytes:expr, $read:ident, $write:ident) => ("},
{"lineNum":" 2455","line":"            mod $name {"},
{"lineNum":" 2456","line":"                use {BigEndian, ByteOrder, NativeEndian, LittleEndian};"},
{"lineNum":" 2457","line":"                #[allow(unused_imports)] use super::{ qc_sized, Wi128 };"},
{"lineNum":" 2458","line":""},
{"lineNum":" 2459","line":"                #[test]"},
{"lineNum":" 2460","line":"                fn big_endian() {"},
{"lineNum":" 2461","line":"                    fn prop(n: $ty_int) -> bool {"},
{"lineNum":" 2462","line":"                        let mut buf = [0; 16];"},
{"lineNum":" 2463","line":"                        BigEndian::$write(&mut buf, n.clone(), $bytes);"},
{"lineNum":" 2464","line":"                        n == BigEndian::$read(&mut buf[..$bytes], $bytes)"},
{"lineNum":" 2465","line":"                    }"},
{"lineNum":" 2466","line":"                    qc_sized(prop as fn($ty_int) -> bool, $max);"},
{"lineNum":" 2467","line":"                }"},
{"lineNum":" 2468","line":""},
{"lineNum":" 2469","line":"                #[test]"},
{"lineNum":" 2470","line":"                fn little_endian() {"},
{"lineNum":" 2471","line":"                    fn prop(n: $ty_int) -> bool {"},
{"lineNum":" 2472","line":"                        let mut buf = [0; 16];"},
{"lineNum":" 2473","line":"                        LittleEndian::$write(&mut buf, n.clone(), $bytes);"},
{"lineNum":" 2474","line":"                        n == LittleEndian::$read(&mut buf[..$bytes], $bytes)"},
{"lineNum":" 2475","line":"                    }"},
{"lineNum":" 2476","line":"                    qc_sized(prop as fn($ty_int) -> bool, $max);"},
{"lineNum":" 2477","line":"                }"},
{"lineNum":" 2478","line":""},
{"lineNum":" 2479","line":"                #[test]"},
{"lineNum":" 2480","line":"                fn native_endian() {"},
{"lineNum":" 2481","line":"                    fn prop(n: $ty_int) -> bool {"},
{"lineNum":" 2482","line":"                        let mut buf = [0; 16];"},
{"lineNum":" 2483","line":"                        NativeEndian::$write(&mut buf, n.clone(), $bytes);"},
{"lineNum":" 2484","line":"                        n == NativeEndian::$read(&mut buf[..$bytes], $bytes)"},
{"lineNum":" 2485","line":"                    }"},
{"lineNum":" 2486","line":"                    qc_sized(prop as fn($ty_int) -> bool, $max);"},
{"lineNum":" 2487","line":"                }"},
{"lineNum":" 2488","line":"            }"},
{"lineNum":" 2489","line":"        );"},
{"lineNum":" 2490","line":"        ($name:ident, $ty_int:ty, $max:expr,"},
{"lineNum":" 2491","line":"         $read:ident, $write:ident) => ("},
{"lineNum":" 2492","line":"            mod $name {"},
{"lineNum":" 2493","line":"                use core::mem::size_of;"},
{"lineNum":" 2494","line":"                use {BigEndian, ByteOrder, NativeEndian, LittleEndian};"},
{"lineNum":" 2495","line":"                #[allow(unused_imports)] use super::{ qc_sized, Wi128 };"},
{"lineNum":" 2496","line":""},
{"lineNum":" 2497","line":"                #[test]"},
{"lineNum":" 2498","line":"                fn big_endian() {"},
{"lineNum":" 2499","line":"                    fn prop(n: $ty_int) -> bool {"},
{"lineNum":" 2500","line":"                        let bytes = size_of::<$ty_int>();"},
{"lineNum":" 2501","line":"                        let mut buf = [0; 16];"},
{"lineNum":" 2502","line":"                        BigEndian::$write(&mut buf[16 - bytes..], n.clone());"},
{"lineNum":" 2503","line":"                        n == BigEndian::$read(&mut buf[16 - bytes..])"},
{"lineNum":" 2504","line":"                    }"},
{"lineNum":" 2505","line":"                    qc_sized(prop as fn($ty_int) -> bool, $max - 1);"},
{"lineNum":" 2506","line":"                }"},
{"lineNum":" 2507","line":""},
{"lineNum":" 2508","line":"                #[test]"},
{"lineNum":" 2509","line":"                fn little_endian() {"},
{"lineNum":" 2510","line":"                    fn prop(n: $ty_int) -> bool {"},
{"lineNum":" 2511","line":"                        let bytes = size_of::<$ty_int>();"},
{"lineNum":" 2512","line":"                        let mut buf = [0; 16];"},
{"lineNum":" 2513","line":"                        LittleEndian::$write(&mut buf[..bytes], n.clone());"},
{"lineNum":" 2514","line":"                        n == LittleEndian::$read(&mut buf[..bytes])"},
{"lineNum":" 2515","line":"                    }"},
{"lineNum":" 2516","line":"                    qc_sized(prop as fn($ty_int) -> bool, $max - 1);"},
{"lineNum":" 2517","line":"                }"},
{"lineNum":" 2518","line":""},
{"lineNum":" 2519","line":"                #[test]"},
{"lineNum":" 2520","line":"                fn native_endian() {"},
{"lineNum":" 2521","line":"                    fn prop(n: $ty_int) -> bool {"},
{"lineNum":" 2522","line":"                        let bytes = size_of::<$ty_int>();"},
{"lineNum":" 2523","line":"                        let mut buf = [0; 16];"},
{"lineNum":" 2524","line":"                        NativeEndian::$write(&mut buf[..bytes], n.clone());"},
{"lineNum":" 2525","line":"                        n == NativeEndian::$read(&mut buf[..bytes])"},
{"lineNum":" 2526","line":"                    }"},
{"lineNum":" 2527","line":"                    qc_sized(prop as fn($ty_int) -> bool, $max - 1);"},
{"lineNum":" 2528","line":"                }"},
{"lineNum":" 2529","line":"            }"},
{"lineNum":" 2530","line":"        );"},
{"lineNum":" 2531","line":"    }"},
{"lineNum":" 2532","line":""},
{"lineNum":" 2533","line":"    qc_byte_order!(prop_u16, u16, ::core::u16::MAX as u64, read_u16, write_u16);"},
{"lineNum":" 2534","line":"    qc_byte_order!(prop_i16, i16, ::core::i16::MAX as u64, read_i16, write_i16);"},
{"lineNum":" 2535","line":"    qc_byte_order!(prop_u24, u32, ::test::U24_MAX as u64, read_u24, write_u24);"},
{"lineNum":" 2536","line":"    qc_byte_order!(prop_i24, i32, ::test::I24_MAX as u64, read_i24, write_i24);"},
{"lineNum":" 2537","line":"    qc_byte_order!(prop_u32, u32, ::core::u32::MAX as u64, read_u32, write_u32);"},
{"lineNum":" 2538","line":"    qc_byte_order!(prop_i32, i32, ::core::i32::MAX as u64, read_i32, write_i32);"},
{"lineNum":" 2539","line":"    qc_byte_order!(prop_u48, u64, ::test::U48_MAX as u64, read_u48, write_u48);"},
{"lineNum":" 2540","line":"    qc_byte_order!(prop_i48, i64, ::test::I48_MAX as u64, read_i48, write_i48);"},
{"lineNum":" 2541","line":"    qc_byte_order!(prop_u64, u64, ::core::u64::MAX as u64, read_u64, write_u64);"},
{"lineNum":" 2542","line":"    qc_byte_order!(prop_i64, i64, ::core::i64::MAX as u64, read_i64, write_i64);"},
{"lineNum":" 2543","line":"    qc_byte_order!(prop_f32, f32, ::core::u64::MAX as u64, read_f32, write_f32);"},
{"lineNum":" 2544","line":"    qc_byte_order!(prop_f64, f64, ::core::i64::MAX as u64, read_f64, write_f64);"},
{"lineNum":" 2545","line":""},
{"lineNum":" 2546","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2547","line":"    qc_byte_order!(prop_u128, Wi128<u128>, 16 + 1, read_u128, write_u128);"},
{"lineNum":" 2548","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2549","line":"    qc_byte_order!(prop_i128, Wi128<i128>, 16 + 1, read_i128, write_i128);"},
{"lineNum":" 2550","line":""},
{"lineNum":" 2551","line":"    qc_byte_order!(prop_uint_1,"},
{"lineNum":" 2552","line":"        u64, calc_max!(super::U64_MAX, 1), 1, read_uint, write_uint);"},
{"lineNum":" 2553","line":"    qc_byte_order!(prop_uint_2,"},
{"lineNum":" 2554","line":"        u64, calc_max!(super::U64_MAX, 2), 2, read_uint, write_uint);"},
{"lineNum":" 2555","line":"    qc_byte_order!(prop_uint_3,"},
{"lineNum":" 2556","line":"        u64, calc_max!(super::U64_MAX, 3), 3, read_uint, write_uint);"},
{"lineNum":" 2557","line":"    qc_byte_order!(prop_uint_4,"},
{"lineNum":" 2558","line":"        u64, calc_max!(super::U64_MAX, 4), 4, read_uint, write_uint);"},
{"lineNum":" 2559","line":"    qc_byte_order!(prop_uint_5,"},
{"lineNum":" 2560","line":"        u64, calc_max!(super::U64_MAX, 5), 5, read_uint, write_uint);"},
{"lineNum":" 2561","line":"    qc_byte_order!(prop_uint_6,"},
{"lineNum":" 2562","line":"        u64, calc_max!(super::U64_MAX, 6), 6, read_uint, write_uint);"},
{"lineNum":" 2563","line":"    qc_byte_order!(prop_uint_7,"},
{"lineNum":" 2564","line":"        u64, calc_max!(super::U64_MAX, 7), 7, read_uint, write_uint);"},
{"lineNum":" 2565","line":"    qc_byte_order!(prop_uint_8,"},
{"lineNum":" 2566","line":"        u64, calc_max!(super::U64_MAX, 8), 8, read_uint, write_uint);"},
{"lineNum":" 2567","line":""},
{"lineNum":" 2568","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2569","line":"    qc_byte_order!(prop_uint128_1,"},
{"lineNum":" 2570","line":"        Wi128<u128>, 1, 1, read_uint128, write_uint128);"},
{"lineNum":" 2571","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2572","line":"    qc_byte_order!(prop_uint128_2,"},
{"lineNum":" 2573","line":"        Wi128<u128>, 2, 2, read_uint128, write_uint128);"},
{"lineNum":" 2574","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2575","line":"    qc_byte_order!(prop_uint128_3,"},
{"lineNum":" 2576","line":"        Wi128<u128>, 3, 3, read_uint128, write_uint128);"},
{"lineNum":" 2577","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2578","line":"    qc_byte_order!(prop_uint128_4,"},
{"lineNum":" 2579","line":"        Wi128<u128>, 4, 4, read_uint128, write_uint128);"},
{"lineNum":" 2580","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2581","line":"    qc_byte_order!(prop_uint128_5,"},
{"lineNum":" 2582","line":"        Wi128<u128>, 5, 5, read_uint128, write_uint128);"},
{"lineNum":" 2583","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2584","line":"    qc_byte_order!(prop_uint128_6,"},
{"lineNum":" 2585","line":"        Wi128<u128>, 6, 6, read_uint128, write_uint128);"},
{"lineNum":" 2586","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2587","line":"    qc_byte_order!(prop_uint128_7,"},
{"lineNum":" 2588","line":"        Wi128<u128>, 7, 7, read_uint128, write_uint128);"},
{"lineNum":" 2589","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2590","line":"    qc_byte_order!(prop_uint128_8,"},
{"lineNum":" 2591","line":"        Wi128<u128>, 8, 8, read_uint128, write_uint128);"},
{"lineNum":" 2592","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2593","line":"    qc_byte_order!(prop_uint128_9,"},
{"lineNum":" 2594","line":"        Wi128<u128>, 9, 9, read_uint128, write_uint128);"},
{"lineNum":" 2595","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2596","line":"    qc_byte_order!(prop_uint128_10,"},
{"lineNum":" 2597","line":"        Wi128<u128>, 10, 10, read_uint128, write_uint128);"},
{"lineNum":" 2598","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2599","line":"    qc_byte_order!(prop_uint128_11,"},
{"lineNum":" 2600","line":"        Wi128<u128>, 11, 11, read_uint128, write_uint128);"},
{"lineNum":" 2601","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2602","line":"    qc_byte_order!(prop_uint128_12,"},
{"lineNum":" 2603","line":"        Wi128<u128>, 12, 12, read_uint128, write_uint128);"},
{"lineNum":" 2604","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2605","line":"    qc_byte_order!(prop_uint128_13,"},
{"lineNum":" 2606","line":"        Wi128<u128>, 13, 13, read_uint128, write_uint128);"},
{"lineNum":" 2607","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2608","line":"    qc_byte_order!(prop_uint128_14,"},
{"lineNum":" 2609","line":"        Wi128<u128>, 14, 14, read_uint128, write_uint128);"},
{"lineNum":" 2610","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2611","line":"    qc_byte_order!(prop_uint128_15,"},
{"lineNum":" 2612","line":"        Wi128<u128>, 15, 15, read_uint128, write_uint128);"},
{"lineNum":" 2613","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2614","line":"    qc_byte_order!(prop_uint128_16,"},
{"lineNum":" 2615","line":"        Wi128<u128>, 16, 16, read_uint128, write_uint128);"},
{"lineNum":" 2616","line":""},
{"lineNum":" 2617","line":"    qc_byte_order!(prop_int_1,"},
{"lineNum":" 2618","line":"        i64, calc_max!(super::I64_MAX, 1), 1, read_int, write_int);"},
{"lineNum":" 2619","line":"    qc_byte_order!(prop_int_2,"},
{"lineNum":" 2620","line":"        i64, calc_max!(super::I64_MAX, 2), 2, read_int, write_int);"},
{"lineNum":" 2621","line":"    qc_byte_order!(prop_int_3,"},
{"lineNum":" 2622","line":"        i64, calc_max!(super::I64_MAX, 3), 3, read_int, write_int);"},
{"lineNum":" 2623","line":"    qc_byte_order!(prop_int_4,"},
{"lineNum":" 2624","line":"        i64, calc_max!(super::I64_MAX, 4), 4, read_int, write_int);"},
{"lineNum":" 2625","line":"    qc_byte_order!(prop_int_5,"},
{"lineNum":" 2626","line":"        i64, calc_max!(super::I64_MAX, 5), 5, read_int, write_int);"},
{"lineNum":" 2627","line":"    qc_byte_order!(prop_int_6,"},
{"lineNum":" 2628","line":"        i64, calc_max!(super::I64_MAX, 6), 6, read_int, write_int);"},
{"lineNum":" 2629","line":"    qc_byte_order!(prop_int_7,"},
{"lineNum":" 2630","line":"        i64, calc_max!(super::I64_MAX, 7), 7, read_int, write_int);"},
{"lineNum":" 2631","line":"    qc_byte_order!(prop_int_8,"},
{"lineNum":" 2632","line":"        i64, calc_max!(super::I64_MAX, 8), 8, read_int, write_int);"},
{"lineNum":" 2633","line":""},
{"lineNum":" 2634","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2635","line":"    qc_byte_order!(prop_int128_1,"},
{"lineNum":" 2636","line":"        Wi128<i128>, 1, 1, read_int128, write_int128);"},
{"lineNum":" 2637","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2638","line":"    qc_byte_order!(prop_int128_2,"},
{"lineNum":" 2639","line":"        Wi128<i128>, 2, 2, read_int128, write_int128);"},
{"lineNum":" 2640","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2641","line":"    qc_byte_order!(prop_int128_3,"},
{"lineNum":" 2642","line":"        Wi128<i128>, 3, 3, read_int128, write_int128);"},
{"lineNum":" 2643","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2644","line":"    qc_byte_order!(prop_int128_4,"},
{"lineNum":" 2645","line":"        Wi128<i128>, 4, 4, read_int128, write_int128);"},
{"lineNum":" 2646","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2647","line":"    qc_byte_order!(prop_int128_5,"},
{"lineNum":" 2648","line":"        Wi128<i128>, 5, 5, read_int128, write_int128);"},
{"lineNum":" 2649","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2650","line":"    qc_byte_order!(prop_int128_6,"},
{"lineNum":" 2651","line":"        Wi128<i128>, 6, 6, read_int128, write_int128);"},
{"lineNum":" 2652","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2653","line":"    qc_byte_order!(prop_int128_7,"},
{"lineNum":" 2654","line":"        Wi128<i128>, 7, 7, read_int128, write_int128);"},
{"lineNum":" 2655","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2656","line":"    qc_byte_order!(prop_int128_8,"},
{"lineNum":" 2657","line":"        Wi128<i128>, 8, 8, read_int128, write_int128);"},
{"lineNum":" 2658","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2659","line":"    qc_byte_order!(prop_int128_9,"},
{"lineNum":" 2660","line":"        Wi128<i128>, 9, 9, read_int128, write_int128);"},
{"lineNum":" 2661","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2662","line":"    qc_byte_order!(prop_int128_10,"},
{"lineNum":" 2663","line":"        Wi128<i128>, 10, 10, read_int128, write_int128);"},
{"lineNum":" 2664","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2665","line":"    qc_byte_order!(prop_int128_11,"},
{"lineNum":" 2666","line":"        Wi128<i128>, 11, 11, read_int128, write_int128);"},
{"lineNum":" 2667","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2668","line":"    qc_byte_order!(prop_int128_12,"},
{"lineNum":" 2669","line":"        Wi128<i128>, 12, 12, read_int128, write_int128);"},
{"lineNum":" 2670","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2671","line":"    qc_byte_order!(prop_int128_13,"},
{"lineNum":" 2672","line":"        Wi128<i128>, 13, 13, read_int128, write_int128);"},
{"lineNum":" 2673","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2674","line":"    qc_byte_order!(prop_int128_14,"},
{"lineNum":" 2675","line":"        Wi128<i128>, 14, 14, read_int128, write_int128);"},
{"lineNum":" 2676","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2677","line":"    qc_byte_order!(prop_int128_15,"},
{"lineNum":" 2678","line":"        Wi128<i128>, 15, 15, read_int128, write_int128);"},
{"lineNum":" 2679","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2680","line":"    qc_byte_order!(prop_int128_16,"},
{"lineNum":" 2681","line":"        Wi128<i128>, 16, 16, read_int128, write_int128);"},
{"lineNum":" 2682","line":""},
{"lineNum":" 2683","line":""},
{"lineNum":" 2684","line":"    // Test that all of the byte conversion functions panic when given a"},
{"lineNum":" 2685","line":"    // buffer that is too small."},
{"lineNum":" 2686","line":"    //"},
{"lineNum":" 2687","line":"    // These tests are critical to ensure safety, otherwise we might end up"},
{"lineNum":" 2688","line":"    // with a buffer overflow."},
{"lineNum":" 2689","line":"    macro_rules! too_small {"},
{"lineNum":" 2690","line":"        ($name:ident, $maximally_small:expr, $zero:expr,"},
{"lineNum":" 2691","line":"         $read:ident, $write:ident) => ("},
{"lineNum":" 2692","line":"            mod $name {"},
{"lineNum":" 2693","line":"                use {BigEndian, ByteOrder, NativeEndian, LittleEndian};"},
{"lineNum":" 2694","line":""},
{"lineNum":" 2695","line":"                #[test]"},
{"lineNum":" 2696","line":"                #[should_panic]"},
{"lineNum":" 2697","line":"                fn read_big_endian() {"},
{"lineNum":" 2698","line":"                    let buf = [0; $maximally_small];"},
{"lineNum":" 2699","line":"                    BigEndian::$read(&buf);"},
{"lineNum":" 2700","line":"                }"},
{"lineNum":" 2701","line":""},
{"lineNum":" 2702","line":"                #[test]"},
{"lineNum":" 2703","line":"                #[should_panic]"},
{"lineNum":" 2704","line":"                fn read_little_endian() {"},
{"lineNum":" 2705","line":"                    let buf = [0; $maximally_small];"},
{"lineNum":" 2706","line":"                    LittleEndian::$read(&buf);"},
{"lineNum":" 2707","line":"                }"},
{"lineNum":" 2708","line":""},
{"lineNum":" 2709","line":"                #[test]"},
{"lineNum":" 2710","line":"                #[should_panic]"},
{"lineNum":" 2711","line":"                fn read_native_endian() {"},
{"lineNum":" 2712","line":"                    let buf = [0; $maximally_small];"},
{"lineNum":" 2713","line":"                    NativeEndian::$read(&buf);"},
{"lineNum":" 2714","line":"                }"},
{"lineNum":" 2715","line":""},
{"lineNum":" 2716","line":"                #[test]"},
{"lineNum":" 2717","line":"                #[should_panic]"},
{"lineNum":" 2718","line":"                fn write_big_endian() {"},
{"lineNum":" 2719","line":"                    let mut buf = [0; $maximally_small];"},
{"lineNum":" 2720","line":"                    BigEndian::$write(&mut buf, $zero);"},
{"lineNum":" 2721","line":"                }"},
{"lineNum":" 2722","line":""},
{"lineNum":" 2723","line":"                #[test]"},
{"lineNum":" 2724","line":"                #[should_panic]"},
{"lineNum":" 2725","line":"                fn write_little_endian() {"},
{"lineNum":" 2726","line":"                    let mut buf = [0; $maximally_small];"},
{"lineNum":" 2727","line":"                    LittleEndian::$write(&mut buf, $zero);"},
{"lineNum":" 2728","line":"                }"},
{"lineNum":" 2729","line":""},
{"lineNum":" 2730","line":"                #[test]"},
{"lineNum":" 2731","line":"                #[should_panic]"},
{"lineNum":" 2732","line":"                fn write_native_endian() {"},
{"lineNum":" 2733","line":"                    let mut buf = [0; $maximally_small];"},
{"lineNum":" 2734","line":"                    NativeEndian::$write(&mut buf, $zero);"},
{"lineNum":" 2735","line":"                }"},
{"lineNum":" 2736","line":"            }"},
{"lineNum":" 2737","line":"        );"},
{"lineNum":" 2738","line":"        ($name:ident, $maximally_small:expr, $read:ident) => ("},
{"lineNum":" 2739","line":"            mod $name {"},
{"lineNum":" 2740","line":"                use {BigEndian, ByteOrder, NativeEndian, LittleEndian};"},
{"lineNum":" 2741","line":""},
{"lineNum":" 2742","line":"                #[test]"},
{"lineNum":" 2743","line":"                #[should_panic]"},
{"lineNum":" 2744","line":"                fn read_big_endian() {"},
{"lineNum":" 2745","line":"                    let buf = [0; $maximally_small];"},
{"lineNum":" 2746","line":"                    BigEndian::$read(&buf, $maximally_small + 1);"},
{"lineNum":" 2747","line":"                }"},
{"lineNum":" 2748","line":""},
{"lineNum":" 2749","line":"                #[test]"},
{"lineNum":" 2750","line":"                #[should_panic]"},
{"lineNum":" 2751","line":"                fn read_little_endian() {"},
{"lineNum":" 2752","line":"                    let buf = [0; $maximally_small];"},
{"lineNum":" 2753","line":"                    LittleEndian::$read(&buf, $maximally_small + 1);"},
{"lineNum":" 2754","line":"                }"},
{"lineNum":" 2755","line":""},
{"lineNum":" 2756","line":"                #[test]"},
{"lineNum":" 2757","line":"                #[should_panic]"},
{"lineNum":" 2758","line":"                fn read_native_endian() {"},
{"lineNum":" 2759","line":"                    let buf = [0; $maximally_small];"},
{"lineNum":" 2760","line":"                    NativeEndian::$read(&buf, $maximally_small + 1);"},
{"lineNum":" 2761","line":"                }"},
{"lineNum":" 2762","line":"            }"},
{"lineNum":" 2763","line":"        );"},
{"lineNum":" 2764","line":"    }"},
{"lineNum":" 2765","line":""},
{"lineNum":" 2766","line":"    too_small!(small_u16, 1, 0, read_u16, write_u16);"},
{"lineNum":" 2767","line":"    too_small!(small_i16, 1, 0, read_i16, write_i16);"},
{"lineNum":" 2768","line":"    too_small!(small_u32, 3, 0, read_u32, write_u32);"},
{"lineNum":" 2769","line":"    too_small!(small_i32, 3, 0, read_i32, write_i32);"},
{"lineNum":" 2770","line":"    too_small!(small_u64, 7, 0, read_u64, write_u64);"},
{"lineNum":" 2771","line":"    too_small!(small_i64, 7, 0, read_i64, write_i64);"},
{"lineNum":" 2772","line":"    too_small!(small_f32, 3, 0.0, read_f32, write_f32);"},
{"lineNum":" 2773","line":"    too_small!(small_f64, 7, 0.0, read_f64, write_f64);"},
{"lineNum":" 2774","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2775","line":"    too_small!(small_u128, 15, 0, read_u128, write_u128);"},
{"lineNum":" 2776","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2777","line":"    too_small!(small_i128, 15, 0, read_i128, write_i128);"},
{"lineNum":" 2778","line":""},
{"lineNum":" 2779","line":"    too_small!(small_uint_1, 1, read_uint);"},
{"lineNum":" 2780","line":"    too_small!(small_uint_2, 2, read_uint);"},
{"lineNum":" 2781","line":"    too_small!(small_uint_3, 3, read_uint);"},
{"lineNum":" 2782","line":"    too_small!(small_uint_4, 4, read_uint);"},
{"lineNum":" 2783","line":"    too_small!(small_uint_5, 5, read_uint);"},
{"lineNum":" 2784","line":"    too_small!(small_uint_6, 6, read_uint);"},
{"lineNum":" 2785","line":"    too_small!(small_uint_7, 7, read_uint);"},
{"lineNum":" 2786","line":""},
{"lineNum":" 2787","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2788","line":"    too_small!(small_uint128_1, 1, read_uint128);"},
{"lineNum":" 2789","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2790","line":"    too_small!(small_uint128_2, 2, read_uint128);"},
{"lineNum":" 2791","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2792","line":"    too_small!(small_uint128_3, 3, read_uint128);"},
{"lineNum":" 2793","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2794","line":"    too_small!(small_uint128_4, 4, read_uint128);"},
{"lineNum":" 2795","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2796","line":"    too_small!(small_uint128_5, 5, read_uint128);"},
{"lineNum":" 2797","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2798","line":"    too_small!(small_uint128_6, 6, read_uint128);"},
{"lineNum":" 2799","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2800","line":"    too_small!(small_uint128_7, 7, read_uint128);"},
{"lineNum":" 2801","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2802","line":"    too_small!(small_uint128_8, 8, read_uint128);"},
{"lineNum":" 2803","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2804","line":"    too_small!(small_uint128_9, 9, read_uint128);"},
{"lineNum":" 2805","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2806","line":"    too_small!(small_uint128_10, 10, read_uint128);"},
{"lineNum":" 2807","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2808","line":"    too_small!(small_uint128_11, 11, read_uint128);"},
{"lineNum":" 2809","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2810","line":"    too_small!(small_uint128_12, 12, read_uint128);"},
{"lineNum":" 2811","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2812","line":"    too_small!(small_uint128_13, 13, read_uint128);"},
{"lineNum":" 2813","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2814","line":"    too_small!(small_uint128_14, 14, read_uint128);"},
{"lineNum":" 2815","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2816","line":"    too_small!(small_uint128_15, 15, read_uint128);"},
{"lineNum":" 2817","line":""},
{"lineNum":" 2818","line":"    too_small!(small_int_1, 1, read_int);"},
{"lineNum":" 2819","line":"    too_small!(small_int_2, 2, read_int);"},
{"lineNum":" 2820","line":"    too_small!(small_int_3, 3, read_int);"},
{"lineNum":" 2821","line":"    too_small!(small_int_4, 4, read_int);"},
{"lineNum":" 2822","line":"    too_small!(small_int_5, 5, read_int);"},
{"lineNum":" 2823","line":"    too_small!(small_int_6, 6, read_int);"},
{"lineNum":" 2824","line":"    too_small!(small_int_7, 7, read_int);"},
{"lineNum":" 2825","line":""},
{"lineNum":" 2826","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2827","line":"    too_small!(small_int128_1, 1, read_int128);"},
{"lineNum":" 2828","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2829","line":"    too_small!(small_int128_2, 2, read_int128);"},
{"lineNum":" 2830","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2831","line":"    too_small!(small_int128_3, 3, read_int128);"},
{"lineNum":" 2832","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2833","line":"    too_small!(small_int128_4, 4, read_int128);"},
{"lineNum":" 2834","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2835","line":"    too_small!(small_int128_5, 5, read_int128);"},
{"lineNum":" 2836","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2837","line":"    too_small!(small_int128_6, 6, read_int128);"},
{"lineNum":" 2838","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2839","line":"    too_small!(small_int128_7, 7, read_int128);"},
{"lineNum":" 2840","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2841","line":"    too_small!(small_int128_8, 8, read_int128);"},
{"lineNum":" 2842","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2843","line":"    too_small!(small_int128_9, 9, read_int128);"},
{"lineNum":" 2844","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2845","line":"    too_small!(small_int128_10, 10, read_int128);"},
{"lineNum":" 2846","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2847","line":"    too_small!(small_int128_11, 11, read_int128);"},
{"lineNum":" 2848","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2849","line":"    too_small!(small_int128_12, 12, read_int128);"},
{"lineNum":" 2850","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2851","line":"    too_small!(small_int128_13, 13, read_int128);"},
{"lineNum":" 2852","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2853","line":"    too_small!(small_int128_14, 14, read_int128);"},
{"lineNum":" 2854","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2855","line":"    too_small!(small_int128_15, 15, read_int128);"},
{"lineNum":" 2856","line":""},
{"lineNum":" 2857","line":"    // Test that reading/writing slices enforces the correct lengths."},
{"lineNum":" 2858","line":"    macro_rules! slice_lengths {"},
{"lineNum":" 2859","line":"        ($name:ident, $read:ident, $write:ident,"},
{"lineNum":" 2860","line":"         $num_bytes:expr, $numbers:expr) => {"},
{"lineNum":" 2861","line":"            mod $name {"},
{"lineNum":" 2862","line":"                use {ByteOrder, BigEndian, NativeEndian, LittleEndian};"},
{"lineNum":" 2863","line":""},
{"lineNum":" 2864","line":"                #[test]"},
{"lineNum":" 2865","line":"                #[should_panic]"},
{"lineNum":" 2866","line":"                fn read_big_endian() {"},
{"lineNum":" 2867","line":"                    let bytes = [0; $num_bytes];"},
{"lineNum":" 2868","line":"                    let mut numbers = $numbers;"},
{"lineNum":" 2869","line":"                    BigEndian::$read(&bytes, &mut numbers);"},
{"lineNum":" 2870","line":"                }"},
{"lineNum":" 2871","line":""},
{"lineNum":" 2872","line":"                #[test]"},
{"lineNum":" 2873","line":"                #[should_panic]"},
{"lineNum":" 2874","line":"                fn read_little_endian() {"},
{"lineNum":" 2875","line":"                    let bytes = [0; $num_bytes];"},
{"lineNum":" 2876","line":"                    let mut numbers = $numbers;"},
{"lineNum":" 2877","line":"                    LittleEndian::$read(&bytes, &mut numbers);"},
{"lineNum":" 2878","line":"                }"},
{"lineNum":" 2879","line":""},
{"lineNum":" 2880","line":"                #[test]"},
{"lineNum":" 2881","line":"                #[should_panic]"},
{"lineNum":" 2882","line":"                fn read_native_endian() {"},
{"lineNum":" 2883","line":"                    let bytes = [0; $num_bytes];"},
{"lineNum":" 2884","line":"                    let mut numbers = $numbers;"},
{"lineNum":" 2885","line":"                    NativeEndian::$read(&bytes, &mut numbers);"},
{"lineNum":" 2886","line":"                }"},
{"lineNum":" 2887","line":""},
{"lineNum":" 2888","line":"                #[test]"},
{"lineNum":" 2889","line":"                #[should_panic]"},
{"lineNum":" 2890","line":"                fn write_big_endian() {"},
{"lineNum":" 2891","line":"                    let mut bytes = [0; $num_bytes];"},
{"lineNum":" 2892","line":"                    let numbers = $numbers;"},
{"lineNum":" 2893","line":"                    BigEndian::$write(&numbers, &mut bytes);"},
{"lineNum":" 2894","line":"                }"},
{"lineNum":" 2895","line":""},
{"lineNum":" 2896","line":"                #[test]"},
{"lineNum":" 2897","line":"                #[should_panic]"},
{"lineNum":" 2898","line":"                fn write_little_endian() {"},
{"lineNum":" 2899","line":"                    let mut bytes = [0; $num_bytes];"},
{"lineNum":" 2900","line":"                    let numbers = $numbers;"},
{"lineNum":" 2901","line":"                    LittleEndian::$write(&numbers, &mut bytes);"},
{"lineNum":" 2902","line":"                }"},
{"lineNum":" 2903","line":""},
{"lineNum":" 2904","line":"                #[test]"},
{"lineNum":" 2905","line":"                #[should_panic]"},
{"lineNum":" 2906","line":"                fn write_native_endian() {"},
{"lineNum":" 2907","line":"                    let mut bytes = [0; $num_bytes];"},
{"lineNum":" 2908","line":"                    let numbers = $numbers;"},
{"lineNum":" 2909","line":"                    NativeEndian::$write(&numbers, &mut bytes);"},
{"lineNum":" 2910","line":"                }"},
{"lineNum":" 2911","line":"            }"},
{"lineNum":" 2912","line":"        }"},
{"lineNum":" 2913","line":"    }"},
{"lineNum":" 2914","line":""},
{"lineNum":" 2915","line":"    slice_lengths!("},
{"lineNum":" 2916","line":"        slice_len_too_small_u16, read_u16_into, write_u16_into, 3, [0, 0]);"},
{"lineNum":" 2917","line":"    slice_lengths!("},
{"lineNum":" 2918","line":"        slice_len_too_big_u16, read_u16_into, write_u16_into, 5, [0, 0]);"},
{"lineNum":" 2919","line":"    slice_lengths!("},
{"lineNum":" 2920","line":"        slice_len_too_small_i16, read_i16_into, write_i16_into, 3, [0, 0]);"},
{"lineNum":" 2921","line":"    slice_lengths!("},
{"lineNum":" 2922","line":"        slice_len_too_big_i16, read_i16_into, write_i16_into, 5, [0, 0]);"},
{"lineNum":" 2923","line":""},
{"lineNum":" 2924","line":"    slice_lengths!("},
{"lineNum":" 2925","line":"        slice_len_too_small_u32, read_u32_into, write_u32_into, 7, [0, 0]);"},
{"lineNum":" 2926","line":"    slice_lengths!("},
{"lineNum":" 2927","line":"        slice_len_too_big_u32, read_u32_into, write_u32_into, 9, [0, 0]);"},
{"lineNum":" 2928","line":"    slice_lengths!("},
{"lineNum":" 2929","line":"        slice_len_too_small_i32, read_i32_into, write_i32_into, 7, [0, 0]);"},
{"lineNum":" 2930","line":"    slice_lengths!("},
{"lineNum":" 2931","line":"        slice_len_too_big_i32, read_i32_into, write_i32_into, 9, [0, 0]);"},
{"lineNum":" 2932","line":""},
{"lineNum":" 2933","line":"    slice_lengths!("},
{"lineNum":" 2934","line":"        slice_len_too_small_u64, read_u64_into, write_u64_into, 15, [0, 0]);"},
{"lineNum":" 2935","line":"    slice_lengths!("},
{"lineNum":" 2936","line":"        slice_len_too_big_u64, read_u64_into, write_u64_into, 17, [0, 0]);"},
{"lineNum":" 2937","line":"    slice_lengths!("},
{"lineNum":" 2938","line":"        slice_len_too_small_i64, read_i64_into, write_i64_into, 15, [0, 0]);"},
{"lineNum":" 2939","line":"    slice_lengths!("},
{"lineNum":" 2940","line":"        slice_len_too_big_i64, read_i64_into, write_i64_into, 17, [0, 0]);"},
{"lineNum":" 2941","line":""},
{"lineNum":" 2942","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2943","line":"    slice_lengths!("},
{"lineNum":" 2944","line":"        slice_len_too_small_u128, read_u128_into, write_u128_into, 31, [0, 0]);"},
{"lineNum":" 2945","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2946","line":"    slice_lengths!("},
{"lineNum":" 2947","line":"        slice_len_too_big_u128, read_u128_into, write_u128_into, 33, [0, 0]);"},
{"lineNum":" 2948","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2949","line":"    slice_lengths!("},
{"lineNum":" 2950","line":"        slice_len_too_small_i128, read_i128_into, write_i128_into, 31, [0, 0]);"},
{"lineNum":" 2951","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 2952","line":"    slice_lengths!("},
{"lineNum":" 2953","line":"        slice_len_too_big_i128, read_i128_into, write_i128_into, 33, [0, 0]);"},
{"lineNum":" 2954","line":""},
{"lineNum":" 2955","line":"    #[test]"},
{"lineNum":" 2956","line":"    fn uint_bigger_buffer() {"},
{"lineNum":" 2957","line":"        use {ByteOrder, LittleEndian};"},
{"lineNum":" 2958","line":"        let n = LittleEndian::read_uint(&[1, 2, 3, 4, 5, 6, 7, 8], 5);"},
{"lineNum":" 2959","line":"        assert_eq!(n, 0x0504030201);"},
{"lineNum":" 2960","line":"    }"},
{"lineNum":" 2961","line":"}"},
{"lineNum":" 2962","line":""},
{"lineNum":" 2963","line":"#[cfg(test)]"},
{"lineNum":" 2964","line":"#[cfg(feature = \"std\")]"},
{"lineNum":" 2965","line":"mod stdtests {"},
{"lineNum":" 2966","line":"    extern crate quickcheck;"},
{"lineNum":" 2967","line":"    extern crate rand;"},
{"lineNum":" 2968","line":""},
{"lineNum":" 2969","line":"    use self::quickcheck::{QuickCheck, StdGen, Testable};"},
{"lineNum":" 2970","line":"    use self::rand::thread_rng;"},
{"lineNum":" 2971","line":""},
{"lineNum":" 2972","line":"    fn qc_unsized<A: Testable>(f: A) {"},
{"lineNum":" 2973","line":""},
{"lineNum":" 2974","line":"        QuickCheck::new()"},
{"lineNum":" 2975","line":"            .gen(StdGen::new(thread_rng(), 16))"},
{"lineNum":" 2976","line":"            .tests(1_00)"},
{"lineNum":" 2977","line":"            .max_tests(10_000)"},
{"lineNum":" 2978","line":"            .quickcheck(f);"},
{"lineNum":" 2979","line":"    }"},
{"lineNum":" 2980","line":""},
{"lineNum":" 2981","line":"    macro_rules! calc_max {"},
{"lineNum":" 2982","line":"        ($max:expr, $bytes:expr) => { ($max - 1) >> (8 * (8 - $bytes)) };"},
{"lineNum":" 2983","line":"    }"},
{"lineNum":" 2984","line":""},
{"lineNum":" 2985","line":"    macro_rules! qc_bytes_ext {"},
{"lineNum":" 2986","line":"        ($name:ident, $ty_int:ty, $max:expr,"},
{"lineNum":" 2987","line":"         $bytes:expr, $read:ident, $write:ident) => ("},
{"lineNum":" 2988","line":"            mod $name {"},
{"lineNum":" 2989","line":"                use std::io::Cursor;"},
{"lineNum":" 2990","line":"                use {"},
{"lineNum":" 2991","line":"                    ReadBytesExt, WriteBytesExt,"},
{"lineNum":" 2992","line":"                    BigEndian, NativeEndian, LittleEndian,"},
{"lineNum":" 2993","line":"                };"},
{"lineNum":" 2994","line":"                #[allow(unused_imports)] use test::{qc_sized, Wi128};"},
{"lineNum":" 2995","line":""},
{"lineNum":" 2996","line":"                #[test]"},
{"lineNum":" 2997","line":"                fn big_endian() {"},
{"lineNum":" 2998","line":"                    fn prop(n: $ty_int) -> bool {"},
{"lineNum":" 2999","line":"                        let mut wtr = vec![];"},
{"lineNum":" 3000","line":"                        wtr.$write::<BigEndian>(n.clone()).unwrap();"},
{"lineNum":" 3001","line":"                        let offset = wtr.len() - $bytes;"},
{"lineNum":" 3002","line":"                        let mut rdr = Cursor::new(&mut wtr[offset..]);"},
{"lineNum":" 3003","line":"                        n == rdr.$read::<BigEndian>($bytes).unwrap()"},
{"lineNum":" 3004","line":"                    }"},
{"lineNum":" 3005","line":"                    qc_sized(prop as fn($ty_int) -> bool, $max);"},
{"lineNum":" 3006","line":"                }"},
{"lineNum":" 3007","line":""},
{"lineNum":" 3008","line":"                #[test]"},
{"lineNum":" 3009","line":"                fn little_endian() {"},
{"lineNum":" 3010","line":"                    fn prop(n: $ty_int) -> bool {"},
{"lineNum":" 3011","line":"                        let mut wtr = vec![];"},
{"lineNum":" 3012","line":"                        wtr.$write::<LittleEndian>(n.clone()).unwrap();"},
{"lineNum":" 3013","line":"                        let mut rdr = Cursor::new(wtr);"},
{"lineNum":" 3014","line":"                        n == rdr.$read::<LittleEndian>($bytes).unwrap()"},
{"lineNum":" 3015","line":"                    }"},
{"lineNum":" 3016","line":"                    qc_sized(prop as fn($ty_int) -> bool, $max);"},
{"lineNum":" 3017","line":"                }"},
{"lineNum":" 3018","line":""},
{"lineNum":" 3019","line":"                #[test]"},
{"lineNum":" 3020","line":"                fn native_endian() {"},
{"lineNum":" 3021","line":"                    fn prop(n: $ty_int) -> bool {"},
{"lineNum":" 3022","line":"                        let mut wtr = vec![];"},
{"lineNum":" 3023","line":"                        wtr.$write::<NativeEndian>(n.clone()).unwrap();"},
{"lineNum":" 3024","line":"                        let offset = if cfg!(target_endian = \"big\") {"},
{"lineNum":" 3025","line":"                            wtr.len() - $bytes"},
{"lineNum":" 3026","line":"                        } else {"},
{"lineNum":" 3027","line":"                            0"},
{"lineNum":" 3028","line":"                        };"},
{"lineNum":" 3029","line":"                        let mut rdr = Cursor::new(&mut wtr[offset..]);"},
{"lineNum":" 3030","line":"                        n == rdr.$read::<NativeEndian>($bytes).unwrap()"},
{"lineNum":" 3031","line":"                    }"},
{"lineNum":" 3032","line":"                    qc_sized(prop as fn($ty_int) -> bool, $max);"},
{"lineNum":" 3033","line":"                }"},
{"lineNum":" 3034","line":"            }"},
{"lineNum":" 3035","line":"        );"},
{"lineNum":" 3036","line":"        ($name:ident, $ty_int:ty, $max:expr, $read:ident, $write:ident) => ("},
{"lineNum":" 3037","line":"            mod $name {"},
{"lineNum":" 3038","line":"                use std::io::Cursor;"},
{"lineNum":" 3039","line":"                use {"},
{"lineNum":" 3040","line":"                    ReadBytesExt, WriteBytesExt,"},
{"lineNum":" 3041","line":"                    BigEndian, NativeEndian, LittleEndian,"},
{"lineNum":" 3042","line":"                };"},
{"lineNum":" 3043","line":"                #[allow(unused_imports)] use test::{qc_sized, Wi128};"},
{"lineNum":" 3044","line":""},
{"lineNum":" 3045","line":"                #[test]"},
{"lineNum":" 3046","line":"                fn big_endian() {"},
{"lineNum":" 3047","line":"                    fn prop(n: $ty_int) -> bool {"},
{"lineNum":" 3048","line":"                        let mut wtr = vec![];"},
{"lineNum":" 3049","line":"                        wtr.$write::<BigEndian>(n.clone()).unwrap();"},
{"lineNum":" 3050","line":"                        let mut rdr = Cursor::new(wtr);"},
{"lineNum":" 3051","line":"                        n == rdr.$read::<BigEndian>().unwrap()"},
{"lineNum":" 3052","line":"                    }"},
{"lineNum":" 3053","line":"                    qc_sized(prop as fn($ty_int) -> bool, $max - 1);"},
{"lineNum":" 3054","line":"                }"},
{"lineNum":" 3055","line":""},
{"lineNum":" 3056","line":"                #[test]"},
{"lineNum":" 3057","line":"                fn little_endian() {"},
{"lineNum":" 3058","line":"                    fn prop(n: $ty_int) -> bool {"},
{"lineNum":" 3059","line":"                        let mut wtr = vec![];"},
{"lineNum":" 3060","line":"                        wtr.$write::<LittleEndian>(n.clone()).unwrap();"},
{"lineNum":" 3061","line":"                        let mut rdr = Cursor::new(wtr);"},
{"lineNum":" 3062","line":"                        n == rdr.$read::<LittleEndian>().unwrap()"},
{"lineNum":" 3063","line":"                    }"},
{"lineNum":" 3064","line":"                    qc_sized(prop as fn($ty_int) -> bool, $max - 1);"},
{"lineNum":" 3065","line":"                }"},
{"lineNum":" 3066","line":""},
{"lineNum":" 3067","line":"                #[test]"},
{"lineNum":" 3068","line":"                fn native_endian() {"},
{"lineNum":" 3069","line":"                    fn prop(n: $ty_int) -> bool {"},
{"lineNum":" 3070","line":"                        let mut wtr = vec![];"},
{"lineNum":" 3071","line":"                        wtr.$write::<NativeEndian>(n.clone()).unwrap();"},
{"lineNum":" 3072","line":"                        let mut rdr = Cursor::new(wtr);"},
{"lineNum":" 3073","line":"                        n == rdr.$read::<NativeEndian>().unwrap()"},
{"lineNum":" 3074","line":"                    }"},
{"lineNum":" 3075","line":"                    qc_sized(prop as fn($ty_int) -> bool, $max - 1);"},
{"lineNum":" 3076","line":"                }"},
{"lineNum":" 3077","line":"            }"},
{"lineNum":" 3078","line":"        );"},
{"lineNum":" 3079","line":"    }"},
{"lineNum":" 3080","line":""},
{"lineNum":" 3081","line":"    qc_bytes_ext!(prop_ext_u16,"},
{"lineNum":" 3082","line":"        u16, ::std::u16::MAX as u64, read_u16, write_u16);"},
{"lineNum":" 3083","line":"    qc_bytes_ext!(prop_ext_i16,"},
{"lineNum":" 3084","line":"        i16, ::std::i16::MAX as u64, read_i16, write_i16);"},
{"lineNum":" 3085","line":"    qc_bytes_ext!(prop_ext_u32,"},
{"lineNum":" 3086","line":"        u32, ::std::u32::MAX as u64, read_u32, write_u32);"},
{"lineNum":" 3087","line":"    qc_bytes_ext!(prop_ext_i32,"},
{"lineNum":" 3088","line":"        i32, ::std::i32::MAX as u64, read_i32, write_i32);"},
{"lineNum":" 3089","line":"    qc_bytes_ext!(prop_ext_u64,"},
{"lineNum":" 3090","line":"        u64, ::std::u64::MAX as u64, read_u64, write_u64);"},
{"lineNum":" 3091","line":"    qc_bytes_ext!(prop_ext_i64,"},
{"lineNum":" 3092","line":"        i64, ::std::i64::MAX as u64, read_i64, write_i64);"},
{"lineNum":" 3093","line":"    qc_bytes_ext!(prop_ext_f32,"},
{"lineNum":" 3094","line":"        f32, ::std::u64::MAX as u64, read_f32, write_f32);"},
{"lineNum":" 3095","line":"    qc_bytes_ext!(prop_ext_f64,"},
{"lineNum":" 3096","line":"        f64, ::std::i64::MAX as u64, read_f64, write_f64);"},
{"lineNum":" 3097","line":""},
{"lineNum":" 3098","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3099","line":"    qc_bytes_ext!(prop_ext_u128, Wi128<u128>, 16 + 1, read_u128, write_u128);"},
{"lineNum":" 3100","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3101","line":"    qc_bytes_ext!(prop_ext_i128, Wi128<i128>, 16 + 1, read_i128, write_i128);"},
{"lineNum":" 3102","line":""},
{"lineNum":" 3103","line":"    qc_bytes_ext!(prop_ext_uint_1,"},
{"lineNum":" 3104","line":"        u64, calc_max!(::test::U64_MAX, 1), 1, read_uint, write_u64);"},
{"lineNum":" 3105","line":"    qc_bytes_ext!(prop_ext_uint_2,"},
{"lineNum":" 3106","line":"        u64, calc_max!(::test::U64_MAX, 2), 2, read_uint, write_u64);"},
{"lineNum":" 3107","line":"    qc_bytes_ext!(prop_ext_uint_3,"},
{"lineNum":" 3108","line":"        u64, calc_max!(::test::U64_MAX, 3), 3, read_uint, write_u64);"},
{"lineNum":" 3109","line":"    qc_bytes_ext!(prop_ext_uint_4,"},
{"lineNum":" 3110","line":"        u64, calc_max!(::test::U64_MAX, 4), 4, read_uint, write_u64);"},
{"lineNum":" 3111","line":"    qc_bytes_ext!(prop_ext_uint_5,"},
{"lineNum":" 3112","line":"        u64, calc_max!(::test::U64_MAX, 5), 5, read_uint, write_u64);"},
{"lineNum":" 3113","line":"    qc_bytes_ext!(prop_ext_uint_6,"},
{"lineNum":" 3114","line":"        u64, calc_max!(::test::U64_MAX, 6), 6, read_uint, write_u64);"},
{"lineNum":" 3115","line":"    qc_bytes_ext!(prop_ext_uint_7,"},
{"lineNum":" 3116","line":"        u64, calc_max!(::test::U64_MAX, 7), 7, read_uint, write_u64);"},
{"lineNum":" 3117","line":"    qc_bytes_ext!(prop_ext_uint_8,"},
{"lineNum":" 3118","line":"        u64, calc_max!(::test::U64_MAX, 8), 8, read_uint, write_u64);"},
{"lineNum":" 3119","line":""},
{"lineNum":" 3120","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3121","line":"    qc_bytes_ext!(prop_ext_uint128_1,"},
{"lineNum":" 3122","line":"        Wi128<u128>, 1, 1, read_uint128, write_u128);"},
{"lineNum":" 3123","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3124","line":"    qc_bytes_ext!(prop_ext_uint128_2,"},
{"lineNum":" 3125","line":"        Wi128<u128>, 2, 2, read_uint128, write_u128);"},
{"lineNum":" 3126","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3127","line":"    qc_bytes_ext!(prop_ext_uint128_3,"},
{"lineNum":" 3128","line":"        Wi128<u128>, 3, 3, read_uint128, write_u128);"},
{"lineNum":" 3129","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3130","line":"    qc_bytes_ext!(prop_ext_uint128_4,"},
{"lineNum":" 3131","line":"        Wi128<u128>, 4, 4, read_uint128, write_u128);"},
{"lineNum":" 3132","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3133","line":"    qc_bytes_ext!(prop_ext_uint128_5,"},
{"lineNum":" 3134","line":"        Wi128<u128>, 5, 5, read_uint128, write_u128);"},
{"lineNum":" 3135","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3136","line":"    qc_bytes_ext!(prop_ext_uint128_6,"},
{"lineNum":" 3137","line":"        Wi128<u128>, 6, 6, read_uint128, write_u128);"},
{"lineNum":" 3138","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3139","line":"    qc_bytes_ext!(prop_ext_uint128_7,"},
{"lineNum":" 3140","line":"        Wi128<u128>, 7, 7, read_uint128, write_u128);"},
{"lineNum":" 3141","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3142","line":"    qc_bytes_ext!(prop_ext_uint128_8,"},
{"lineNum":" 3143","line":"        Wi128<u128>, 8, 8, read_uint128, write_u128);"},
{"lineNum":" 3144","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3145","line":"    qc_bytes_ext!(prop_ext_uint128_9,"},
{"lineNum":" 3146","line":"        Wi128<u128>, 9, 9, read_uint128, write_u128);"},
{"lineNum":" 3147","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3148","line":"    qc_bytes_ext!(prop_ext_uint128_10,"},
{"lineNum":" 3149","line":"        Wi128<u128>, 10, 10, read_uint128, write_u128);"},
{"lineNum":" 3150","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3151","line":"    qc_bytes_ext!(prop_ext_uint128_11,"},
{"lineNum":" 3152","line":"        Wi128<u128>, 11, 11, read_uint128, write_u128);"},
{"lineNum":" 3153","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3154","line":"    qc_bytes_ext!(prop_ext_uint128_12,"},
{"lineNum":" 3155","line":"        Wi128<u128>, 12, 12, read_uint128, write_u128);"},
{"lineNum":" 3156","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3157","line":"    qc_bytes_ext!(prop_ext_uint128_13,"},
{"lineNum":" 3158","line":"        Wi128<u128>, 13, 13, read_uint128, write_u128);"},
{"lineNum":" 3159","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3160","line":"    qc_bytes_ext!(prop_ext_uint128_14,"},
{"lineNum":" 3161","line":"        Wi128<u128>, 14, 14, read_uint128, write_u128);"},
{"lineNum":" 3162","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3163","line":"    qc_bytes_ext!(prop_ext_uint128_15,"},
{"lineNum":" 3164","line":"        Wi128<u128>, 15, 15, read_uint128, write_u128);"},
{"lineNum":" 3165","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3166","line":"    qc_bytes_ext!(prop_ext_uint128_16,"},
{"lineNum":" 3167","line":"        Wi128<u128>, 16, 16, read_uint128, write_u128);"},
{"lineNum":" 3168","line":""},
{"lineNum":" 3169","line":"    qc_bytes_ext!(prop_ext_int_1,"},
{"lineNum":" 3170","line":"        i64, calc_max!(::test::I64_MAX, 1), 1, read_int, write_i64);"},
{"lineNum":" 3171","line":"    qc_bytes_ext!(prop_ext_int_2,"},
{"lineNum":" 3172","line":"        i64, calc_max!(::test::I64_MAX, 2), 2, read_int, write_i64);"},
{"lineNum":" 3173","line":"    qc_bytes_ext!(prop_ext_int_3,"},
{"lineNum":" 3174","line":"        i64, calc_max!(::test::I64_MAX, 3), 3, read_int, write_i64);"},
{"lineNum":" 3175","line":"    qc_bytes_ext!(prop_ext_int_4,"},
{"lineNum":" 3176","line":"        i64, calc_max!(::test::I64_MAX, 4), 4, read_int, write_i64);"},
{"lineNum":" 3177","line":"    qc_bytes_ext!(prop_ext_int_5,"},
{"lineNum":" 3178","line":"        i64, calc_max!(::test::I64_MAX, 5), 5, read_int, write_i64);"},
{"lineNum":" 3179","line":"    qc_bytes_ext!(prop_ext_int_6,"},
{"lineNum":" 3180","line":"        i64, calc_max!(::test::I64_MAX, 6), 6, read_int, write_i64);"},
{"lineNum":" 3181","line":"    qc_bytes_ext!(prop_ext_int_7,"},
{"lineNum":" 3182","line":"        i64, calc_max!(::test::I64_MAX, 1), 7, read_int, write_i64);"},
{"lineNum":" 3183","line":"    qc_bytes_ext!(prop_ext_int_8,"},
{"lineNum":" 3184","line":"        i64, calc_max!(::test::I64_MAX, 8), 8, read_int, write_i64);"},
{"lineNum":" 3185","line":""},
{"lineNum":" 3186","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3187","line":"    qc_bytes_ext!(prop_ext_int128_1,"},
{"lineNum":" 3188","line":"        Wi128<i128>, 1, 1, read_int128, write_i128);"},
{"lineNum":" 3189","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3190","line":"    qc_bytes_ext!(prop_ext_int128_2,"},
{"lineNum":" 3191","line":"        Wi128<i128>, 2, 2, read_int128, write_i128);"},
{"lineNum":" 3192","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3193","line":"    qc_bytes_ext!(prop_ext_int128_3,"},
{"lineNum":" 3194","line":"        Wi128<i128>, 3, 3, read_int128, write_i128);"},
{"lineNum":" 3195","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3196","line":"    qc_bytes_ext!(prop_ext_int128_4,"},
{"lineNum":" 3197","line":"        Wi128<i128>, 4, 4, read_int128, write_i128);"},
{"lineNum":" 3198","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3199","line":"    qc_bytes_ext!(prop_ext_int128_5,"},
{"lineNum":" 3200","line":"        Wi128<i128>, 5, 5, read_int128, write_i128);"},
{"lineNum":" 3201","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3202","line":"    qc_bytes_ext!(prop_ext_int128_6,"},
{"lineNum":" 3203","line":"        Wi128<i128>, 6, 6, read_int128, write_i128);"},
{"lineNum":" 3204","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3205","line":"    qc_bytes_ext!(prop_ext_int128_7,"},
{"lineNum":" 3206","line":"        Wi128<i128>, 7, 7, read_int128, write_i128);"},
{"lineNum":" 3207","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3208","line":"    qc_bytes_ext!(prop_ext_int128_8,"},
{"lineNum":" 3209","line":"        Wi128<i128>, 8, 8, read_int128, write_i128);"},
{"lineNum":" 3210","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3211","line":"    qc_bytes_ext!(prop_ext_int128_9,"},
{"lineNum":" 3212","line":"        Wi128<i128>, 9, 9, read_int128, write_i128);"},
{"lineNum":" 3213","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3214","line":"    qc_bytes_ext!(prop_ext_int128_10,"},
{"lineNum":" 3215","line":"        Wi128<i128>, 10, 10, read_int128, write_i128);"},
{"lineNum":" 3216","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3217","line":"    qc_bytes_ext!(prop_ext_int128_11,"},
{"lineNum":" 3218","line":"        Wi128<i128>, 11, 11, read_int128, write_i128);"},
{"lineNum":" 3219","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3220","line":"    qc_bytes_ext!(prop_ext_int128_12,"},
{"lineNum":" 3221","line":"        Wi128<i128>, 12, 12, read_int128, write_i128);"},
{"lineNum":" 3222","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3223","line":"    qc_bytes_ext!(prop_ext_int128_13,"},
{"lineNum":" 3224","line":"        Wi128<i128>, 13, 13, read_int128, write_i128);"},
{"lineNum":" 3225","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3226","line":"    qc_bytes_ext!(prop_ext_int128_14,"},
{"lineNum":" 3227","line":"        Wi128<i128>, 14, 14, read_int128, write_i128);"},
{"lineNum":" 3228","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3229","line":"    qc_bytes_ext!(prop_ext_int128_15,"},
{"lineNum":" 3230","line":"        Wi128<i128>, 15, 15, read_int128, write_i128);"},
{"lineNum":" 3231","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3232","line":"    qc_bytes_ext!(prop_ext_int128_16,"},
{"lineNum":" 3233","line":"        Wi128<i128>, 16, 16, read_int128, write_i128);"},
{"lineNum":" 3234","line":""},
{"lineNum":" 3235","line":"    // Test slice serialization/deserialization."},
{"lineNum":" 3236","line":"    macro_rules! qc_slice {"},
{"lineNum":" 3237","line":"        ($name:ident, $ty_int:ty, $read:ident, $write:ident, $zero:expr) => {"},
{"lineNum":" 3238","line":"            mod $name {"},
{"lineNum":" 3239","line":"                use core::mem::size_of;"},
{"lineNum":" 3240","line":"                use {ByteOrder, BigEndian, NativeEndian, LittleEndian};"},
{"lineNum":" 3241","line":"                use super::qc_unsized;"},
{"lineNum":" 3242","line":"                #[allow(unused_imports)]"},
{"lineNum":" 3243","line":"                use test::Wi128;"},
{"lineNum":" 3244","line":""},
{"lineNum":" 3245","line":"                #[test]"},
{"lineNum":" 3246","line":"                fn big_endian() {"},
{"lineNum":" 3247","line":"                    #[allow(unused_unsafe)]"},
{"lineNum":" 3248","line":"                    fn prop(numbers: Vec<$ty_int>) -> bool {"},
{"lineNum":" 3249","line":"                        let numbers: Vec<_> = numbers"},
{"lineNum":" 3250","line":"                            .into_iter()"},
{"lineNum":" 3251","line":"                            .map(|x| x.clone())"},
{"lineNum":" 3252","line":"                            .collect();"},
{"lineNum":" 3253","line":"                        let num_bytes = size_of::<$ty_int>() * numbers.len();"},
{"lineNum":" 3254","line":"                        let mut bytes = vec![0; num_bytes];"},
{"lineNum":" 3255","line":""},
{"lineNum":" 3256","line":"                        BigEndian::$write(&numbers, &mut bytes);"},
{"lineNum":" 3257","line":""},
{"lineNum":" 3258","line":"                        let mut got = vec![$zero; numbers.len()];"},
{"lineNum":" 3259","line":"                        unsafe { BigEndian::$read(&bytes, &mut got); }"},
{"lineNum":" 3260","line":""},
{"lineNum":" 3261","line":"                        numbers == got"},
{"lineNum":" 3262","line":"                    }"},
{"lineNum":" 3263","line":"                    qc_unsized(prop as fn(_) -> bool);"},
{"lineNum":" 3264","line":"                }"},
{"lineNum":" 3265","line":""},
{"lineNum":" 3266","line":"                #[test]"},
{"lineNum":" 3267","line":"                fn little_endian() {"},
{"lineNum":" 3268","line":"                    #[allow(unused_unsafe)]"},
{"lineNum":" 3269","line":"                    fn prop(numbers: Vec<$ty_int>) -> bool {"},
{"lineNum":" 3270","line":"                        let numbers: Vec<_> = numbers"},
{"lineNum":" 3271","line":"                            .into_iter()"},
{"lineNum":" 3272","line":"                            .map(|x| x.clone())"},
{"lineNum":" 3273","line":"                            .collect();"},
{"lineNum":" 3274","line":"                        let num_bytes = size_of::<$ty_int>() * numbers.len();"},
{"lineNum":" 3275","line":"                        let mut bytes = vec![0; num_bytes];"},
{"lineNum":" 3276","line":""},
{"lineNum":" 3277","line":"                        LittleEndian::$write(&numbers, &mut bytes);"},
{"lineNum":" 3278","line":""},
{"lineNum":" 3279","line":"                        let mut got = vec![$zero; numbers.len()];"},
{"lineNum":" 3280","line":"                        unsafe { LittleEndian::$read(&bytes, &mut got); }"},
{"lineNum":" 3281","line":""},
{"lineNum":" 3282","line":"                        numbers == got"},
{"lineNum":" 3283","line":"                    }"},
{"lineNum":" 3284","line":"                    qc_unsized(prop as fn(_) -> bool);"},
{"lineNum":" 3285","line":"                }"},
{"lineNum":" 3286","line":""},
{"lineNum":" 3287","line":"                #[test]"},
{"lineNum":" 3288","line":"                fn native_endian() {"},
{"lineNum":" 3289","line":"                    #[allow(unused_unsafe)]"},
{"lineNum":" 3290","line":"                    fn prop(numbers: Vec<$ty_int>) -> bool {"},
{"lineNum":" 3291","line":"                        let numbers: Vec<_> = numbers"},
{"lineNum":" 3292","line":"                            .into_iter()"},
{"lineNum":" 3293","line":"                            .map(|x| x.clone())"},
{"lineNum":" 3294","line":"                            .collect();"},
{"lineNum":" 3295","line":"                        let num_bytes = size_of::<$ty_int>() * numbers.len();"},
{"lineNum":" 3296","line":"                        let mut bytes = vec![0; num_bytes];"},
{"lineNum":" 3297","line":""},
{"lineNum":" 3298","line":"                        NativeEndian::$write(&numbers, &mut bytes);"},
{"lineNum":" 3299","line":""},
{"lineNum":" 3300","line":"                        let mut got = vec![$zero; numbers.len()];"},
{"lineNum":" 3301","line":"                        unsafe { NativeEndian::$read(&bytes, &mut got); }"},
{"lineNum":" 3302","line":""},
{"lineNum":" 3303","line":"                        numbers == got"},
{"lineNum":" 3304","line":"                    }"},
{"lineNum":" 3305","line":"                    qc_unsized(prop as fn(_) -> bool);"},
{"lineNum":" 3306","line":"                }"},
{"lineNum":" 3307","line":"            }"},
{"lineNum":" 3308","line":"        }"},
{"lineNum":" 3309","line":"    }"},
{"lineNum":" 3310","line":""},
{"lineNum":" 3311","line":"    qc_slice!(prop_slice_u16, u16, read_u16_into, write_u16_into, 0);"},
{"lineNum":" 3312","line":"    qc_slice!(prop_slice_i16, i16, read_i16_into, write_i16_into, 0);"},
{"lineNum":" 3313","line":"    qc_slice!(prop_slice_u32, u32, read_u32_into, write_u32_into, 0);"},
{"lineNum":" 3314","line":"    qc_slice!(prop_slice_i32, i32, read_i32_into, write_i32_into, 0);"},
{"lineNum":" 3315","line":"    qc_slice!(prop_slice_u64, u64, read_u64_into, write_u64_into, 0);"},
{"lineNum":" 3316","line":"    qc_slice!(prop_slice_i64, i64, read_i64_into, write_i64_into, 0);"},
{"lineNum":" 3317","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3318","line":"    qc_slice!("},
{"lineNum":" 3319","line":"        prop_slice_u128, Wi128<u128>, read_u128_into, write_u128_into, 0);"},
{"lineNum":" 3320","line":"    #[cfg(byteorder_i128)]"},
{"lineNum":" 3321","line":"    qc_slice!("},
{"lineNum":" 3322","line":"        prop_slice_i128, Wi128<i128>, read_i128_into, write_i128_into, 0);"},
{"lineNum":" 3323","line":""},
{"lineNum":" 3324","line":"    qc_slice!("},
{"lineNum":" 3325","line":"        prop_slice_f32, f32, read_f32_into, write_f32_into, 0.0);"},
{"lineNum":" 3326","line":"    qc_slice!("},
{"lineNum":" 3327","line":"        prop_slice_f64, f64, read_f64_into, write_f64_into, 0.0);"},
{"lineNum":" 3328","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "lightning_invoice-99c93907235ac8b4", "date" : "2019-08-31 07:54:49", "instrumented" : 34, "covered" : 27,};
var merged_data = [];
