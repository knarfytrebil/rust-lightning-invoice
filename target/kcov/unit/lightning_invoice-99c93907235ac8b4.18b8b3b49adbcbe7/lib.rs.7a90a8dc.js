var data = {lines:[
{"lineNum":"    1","line":"#![deny(missing_docs)]","class":"linePartCov","hits":"4","order":"3023","possible_hits":"27",},
{"lineNum":"    2","line":"#![deny(non_upper_case_globals)]"},
{"lineNum":"    3","line":"#![deny(non_camel_case_types)]"},
{"lineNum":"    4","line":"#![deny(non_snake_case)]"},
{"lineNum":"    5","line":"#![deny(unused_mut)]"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"#![cfg_attr(feature = \"strict\", deny(warnings))]"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"//! This crate provides data structures to represent"},
{"lineNum":"   10","line":"//! [lightning BOLT11](https://github.com/lightningnetwork/lightning-rfc/blob/master/11-payment-encoding.md)"},
{"lineNum":"   11","line":"//! invoices and functions to create, encode and decode these. If you just want to use the standard"},
{"lineNum":"   12","line":"//! en-/decoding functionality this should get you started:"},
{"lineNum":"   13","line":"//!"},
{"lineNum":"   14","line":"//!   * For parsing use `str::parse::<Invoice>(&self)` (see the docs of `impl FromStr for Invoice`)"},
{"lineNum":"   15","line":"//!   * For constructing invoices use the `InvoiceBuilder`"},
{"lineNum":"   16","line":"//!   * For serializing invoices use the `Display`/`ToString` traits"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"extern crate bech32;"},
{"lineNum":"   19","line":"extern crate bitcoin_hashes;"},
{"lineNum":"   20","line":"extern crate num_traits;"},
{"lineNum":"   21","line":"extern crate secp256k1;"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"use bech32::u5;"},
{"lineNum":"   24","line":"use bitcoin_hashes::Hash;"},
{"lineNum":"   25","line":"use bitcoin_hashes::sha256;"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"use secp256k1::key::PublicKey;"},
{"lineNum":"   28","line":"use secp256k1::{Message, Secp256k1};"},
{"lineNum":"   29","line":"use secp256k1::recovery::RecoverableSignature;"},
{"lineNum":"   30","line":"use std::ops::Deref;"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"use std::iter::FilterMap;"},
{"lineNum":"   33","line":"use std::slice::Iter;"},
{"lineNum":"   34","line":"use std::time::{SystemTime, Duration, UNIX_EPOCH};"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"mod de;"},
{"lineNum":"   37","line":"mod ser;"},
{"lineNum":"   38","line":"mod tb;"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"pub use de::{ParseError, ParseOrSemanticError};"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"// TODO: fix before 2037 (see rust PR #55527)"},
{"lineNum":"   44","line":"/// Defines the maximum UNIX timestamp that can be represented as `SystemTime`. This is checked by"},
{"lineNum":"   45","line":"/// one of the unit tests, please run them."},
{"lineNum":"   46","line":"const SYSTEM_TIME_MAX_UNIX_TIMESTAMP: u64 = std::i32::MAX as u64;"},
{"lineNum":"   47","line":""},
{"lineNum":"   48","line":"/// Allow the expiry time to be up to one year. Since this reduces the range of possible timestamps"},
{"lineNum":"   49","line":"/// it should be rather low as long as we still have to support 32bit time representations"},
{"lineNum":"   50","line":"const MAX_EXPIRY_TIME: u64 = 60 * 60 * 24 * 356;"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"/// This function is used as a static assert for the size of `SystemTime`. If the crate fails to"},
{"lineNum":"   53","line":"/// compile due to it this indicates that your system uses unexpected bounds for `SystemTime`. You"},
{"lineNum":"   54","line":"/// can remove this functions and run the test `test_system_time_bounds_assumptions`. In any case,"},
{"lineNum":"   55","line":"/// please open an issue. If all tests pass you should be able to use this library safely by just"},
{"lineNum":"   56","line":"/// removing this function till we patch it accordingly."},
{"lineNum":"   57","line":"fn __system_time_size_check() {"},
{"lineNum":"   58","line":"\t// Use 2 * sizeof(u64) as expected size since the expected underlying implementation is storing"},
{"lineNum":"   59","line":"\t// a `Duration` since `SystemTime::UNIX_EPOCH`."},
{"lineNum":"   60","line":"\tunsafe { std::mem::transmute::<SystemTime, [u8; 16]>(UNIX_EPOCH); }"},
{"lineNum":"   61","line":"}"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":""},
{"lineNum":"   64","line":"/// **Call this function on startup to ensure that all assumptions about the platform are valid.**"},
{"lineNum":"   65","line":"///"},
{"lineNum":"   66","line":"/// Unfortunately we have to make assumptions about the upper bounds of the `SystemTime` type on"},
{"lineNum":"   67","line":"/// your platform which we can\'t fully verify at compile time and which isn\'t part of it\'s contract."},
{"lineNum":"   68","line":"/// To our best knowledge our assumptions hold for all platforms officially supported by rust, but"},
{"lineNum":"   69","line":"/// since this check is fast we recommend to do it anyway."},
{"lineNum":"   70","line":"///"},
{"lineNum":"   71","line":"/// If this function fails this is considered a bug. Please open an issue describing your"},
{"lineNum":"   72","line":"/// platform and stating your current system time."},
{"lineNum":"   73","line":"///"},
{"lineNum":"   74","line":"/// # Panics"},
{"lineNum":"   75","line":"/// If the check fails this function panics. By calling this function on startup you ensure that"},
{"lineNum":"   76","line":"/// this wont happen at an arbitrary later point in time."},
{"lineNum":"   77","line":"pub fn check_platform() {","class":"lineCov","hits":"1","order":"6112","possible_hits":"1",},
{"lineNum":"   78","line":"    // The upper and lower bounds of `SystemTime` are not part of its public contract and are"},
{"lineNum":"   79","line":"    // platform specific. That\'s why we have to test if our assumptions regarding these bounds"},
{"lineNum":"   80","line":"    // hold on the target platform."},
{"lineNum":"   81","line":"    //"},
{"lineNum":"   82","line":"    // If this test fails on your platform, please don\'t use the library and open an issue"},
{"lineNum":"   83","line":"    // instead so we can resolve the situation. Currently this library is tested on:"},
{"lineNum":"   84","line":"    //   * Linux (64bit)"},
{"lineNum":"   85","line":"    let fail_date = UNIX_EPOCH + Duration::from_secs(SYSTEM_TIME_MAX_UNIX_TIMESTAMP);","class":"lineCov","hits":"1","order":"6113","possible_hits":"1",},
{"lineNum":"   86","line":"    let year = Duration::from_secs(60 * 60 * 24 * 365);","class":"linePartCov","hits":"1","order":"6114","possible_hits":"2",},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"    // Make sure that the library will keep working for another year"},
{"lineNum":"   89","line":"    assert!(fail_date.duration_since(SystemTime::now()).unwrap() > year);","class":"lineCov","hits":"1","order":"6115","possible_hits":"1",},
{"lineNum":"   90","line":""},
{"lineNum":"   91","line":"    let max_ts = PositiveTimestamp::from_unix_timestamp(","class":"lineCov","hits":"1","order":"6129","possible_hits":"1",},
{"lineNum":"   92","line":"        SYSTEM_TIME_MAX_UNIX_TIMESTAMP - MAX_EXPIRY_TIME","class":"linePartCov","hits":"1","order":"6128","possible_hits":"3",},
{"lineNum":"   93","line":"    ).unwrap();"},
{"lineNum":"   94","line":"    let max_exp = ::ExpiryTime::from_seconds(MAX_EXPIRY_TIME).unwrap();","class":"lineCov","hits":"1","order":"6130","possible_hits":"1",},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"    assert_eq!(","class":"linePartCov","hits":"1","order":"6135","possible_hits":"2",},
{"lineNum":"   97","line":"        (*max_ts.as_time() + *max_exp.as_duration()).duration_since(UNIX_EPOCH).unwrap().as_secs(),","class":"lineCov","hits":"1","order":"6131","possible_hits":"1",},
{"lineNum":"   98","line":"        SYSTEM_TIME_MAX_UNIX_TIMESTAMP"},
{"lineNum":"   99","line":"    );"},
{"lineNum":"  100","line":"}","class":"lineCov","hits":"1","order":"6136","possible_hits":"1",},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"/// Builder for `Invoice`s. It\'s the most convenient and advised way to use this library. It ensures"},
{"lineNum":"  104","line":"/// that only a semantically and syntactically correct Invoice can be built using it."},
{"lineNum":"  105","line":"///"},
{"lineNum":"  106","line":"/// ```"},
{"lineNum":"  107","line":"/// extern crate secp256k1;"},
{"lineNum":"  108","line":"/// extern crate lightning_invoice;"},
{"lineNum":"  109","line":"/// extern crate bitcoin_hashes;"},
{"lineNum":"  110","line":"///"},
{"lineNum":"  111","line":"/// use bitcoin_hashes::Hash;"},
{"lineNum":"  112","line":"/// use bitcoin_hashes::sha256;"},
{"lineNum":"  113","line":"///"},
{"lineNum":"  114","line":"/// use secp256k1::Secp256k1;"},
{"lineNum":"  115","line":"/// use secp256k1::key::SecretKey;"},
{"lineNum":"  116","line":"///"},
{"lineNum":"  117","line":"/// use lightning_invoice::{Currency, InvoiceBuilder};"},
{"lineNum":"  118","line":"///"},
{"lineNum":"  119","line":"/// # fn main() {"},
{"lineNum":"  120","line":"/// let private_key = SecretKey::from_slice("},
{"lineNum":"  121","line":"///\t\t&["},
{"lineNum":"  122","line":"///\t\t\t0xe1, 0x26, 0xf6, 0x8f, 0x7e, 0xaf, 0xcc, 0x8b, 0x74, 0xf5, 0x4d, 0x26, 0x9f,"},
{"lineNum":"  123","line":"///\t\t\t0xe2, 0x06, 0xbe, 0x71, 0x50, 0x00, 0xf9, 0x4d, 0xac, 0x06, 0x7d, 0x1c, 0x04,"},
{"lineNum":"  124","line":"/// \t\t0xa8, 0xca, 0x3b, 0x2d, 0xb7, 0x34"},
{"lineNum":"  125","line":"/// \t][..]"},
{"lineNum":"  126","line":"///\t).unwrap();"},
{"lineNum":"  127","line":"///"},
{"lineNum":"  128","line":"/// let payment_hash = sha256::Hash::from_slice(&[0; 32][..]).unwrap();"},
{"lineNum":"  129","line":"///"},
{"lineNum":"  130","line":"/// let invoice = InvoiceBuilder::new(Currency::Bitcoin)"},
{"lineNum":"  131","line":"/// \t.description(\"Coins pls!\".into())"},
{"lineNum":"  132","line":"/// \t.payment_hash(payment_hash)"},
{"lineNum":"  133","line":"/// \t.current_timestamp()"},
{"lineNum":"  134","line":"/// \t.build_signed(|hash| {"},
{"lineNum":"  135","line":"/// \t\tSecp256k1::new().sign_recoverable(hash, &private_key)"},
{"lineNum":"  136","line":"/// \t})"},
{"lineNum":"  137","line":"/// \t.unwrap();"},
{"lineNum":"  138","line":"///"},
{"lineNum":"  139","line":"/// assert!(invoice.to_string().starts_with(\"lnbc1\"));"},
{"lineNum":"  140","line":"/// # }"},
{"lineNum":"  141","line":"/// ```"},
{"lineNum":"  142","line":"///"},
{"lineNum":"  143","line":"/// # Type parameters"},
{"lineNum":"  144","line":"/// The two parameters `D` and `H` signal if the builder already contains the correct amount of the"},
{"lineNum":"  145","line":"/// given field:"},
{"lineNum":"  146","line":"///  * `D`: exactly one `Description` or `DescriptionHash`"},
{"lineNum":"  147","line":"///  * `H`: exactly one `PaymentHash`"},
{"lineNum":"  148","line":"///  * `T`: the timestamp is set"},
{"lineNum":"  149","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"4","order":"3879","possible_hits":"8",},
{"lineNum":"  150","line":"pub struct InvoiceBuilder<D: tb::Bool, H: tb::Bool, T: tb::Bool> {"},
{"lineNum":"  151","line":"\tcurrency: Currency,","class":"lineCov","hits":"4","order":"3880","possible_hits":"4",},
{"lineNum":"  152","line":"\tamount: Option<u64>,","class":"lineCov","hits":"4","order":"3881","possible_hits":"4",},
{"lineNum":"  153","line":"\tsi_prefix: Option<SiPrefix>,","class":"lineCov","hits":"4","order":"3882","possible_hits":"4",},
{"lineNum":"  154","line":"\ttimestamp: Option<PositiveTimestamp>,","class":"lineCov","hits":"4","order":"3883","possible_hits":"4",},
{"lineNum":"  155","line":"\ttagged_fields: Vec<TaggedField>,","class":"lineCov","hits":"4","order":"3884","possible_hits":"4",},
{"lineNum":"  156","line":"\terror: Option<CreationError>,","class":"lineCov","hits":"4","order":"3885","possible_hits":"4",},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"\tphantom_d: std::marker::PhantomData<D>,","class":"lineCov","hits":"4","order":"3886","possible_hits":"4",},
{"lineNum":"  159","line":"\tphantom_h: std::marker::PhantomData<H>,","class":"lineCov","hits":"4","order":"3887","possible_hits":"4",},
{"lineNum":"  160","line":"\tphantom_t: std::marker::PhantomData<T>,","class":"lineCov","hits":"4","order":"3888","possible_hits":"4",},
{"lineNum":"  161","line":"}"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"/// Represents a syntactically and semantically correct lightning BOLT11 invoice."},
{"lineNum":"  164","line":"///"},
{"lineNum":"  165","line":"/// There are three ways to construct an `Invoice`:"},
{"lineNum":"  166","line":"///  1. using `InvoiceBuilder`"},
{"lineNum":"  167","line":"///  2. using `Invoice::from_signed(SignedRawInvoice)`"},
{"lineNum":"  168","line":"///  3. using `str::parse::<Invoice>(&str)`"},
{"lineNum":"  169","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  170","line":"pub struct Invoice {"},
{"lineNum":"  171","line":"\tsigned_invoice: SignedRawInvoice,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  172","line":"}"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"/// Represents the description of an invoice which has to be either a directly included string or"},
{"lineNum":"  175","line":"/// a hash of a description provided out of band."},
{"lineNum":"  176","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"2","order":"6095","possible_hits":"9",},
{"lineNum":"  177","line":"pub enum InvoiceDescription<\'f> {"},
{"lineNum":"  178","line":"\t/// Reference to the directly supplied description in the invoice"},
{"lineNum":"  179","line":"\tDirect(&\'f Description),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  180","line":""},
{"lineNum":"  181","line":"\t/// Reference to the description\'s hash included in the invoice"},
{"lineNum":"  182","line":"\tHash(&\'f Sha256),","class":"linePartCov","hits":"1","order":"6096","possible_hits":"3",},
{"lineNum":"  183","line":"}"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"/// Represents a signed `RawInvoice` with cached hash. The signature is not checked and may be"},
{"lineNum":"  186","line":"/// invalid."},
{"lineNum":"  187","line":"///"},
{"lineNum":"  188","line":"/// # Invariants"},
{"lineNum":"  189","line":"/// The hash has to be either from the deserialized invoice or from the serialized `raw_invoice`."},
{"lineNum":"  190","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"2","order":"3829","possible_hits":"7",},
{"lineNum":"  191","line":"pub struct SignedRawInvoice {"},
{"lineNum":"  192","line":"\t/// The rawInvoice that the signature belongs to"},
{"lineNum":"  193","line":"\traw_invoice: RawInvoice,","class":"linePartCov","hits":"3","order":"3830","possible_hits":"5",},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"\t/// Hash of the `RawInvoice` that will be used to check the signature."},
{"lineNum":"  196","line":"\t///"},
{"lineNum":"  197","line":"\t/// * if the `SignedRawInvoice` was deserialized the hash is of from the original encoded form,"},
{"lineNum":"  198","line":"\t/// since it\'s not guaranteed that encoding it again will lead to the same result since integers"},
{"lineNum":"  199","line":"\t/// could have been encoded with leading zeroes etc."},
{"lineNum":"  200","line":"\t/// * if the `SignedRawInvoice` was constructed manually the hash will be the calculated hash"},
{"lineNum":"  201","line":"\t/// from the `RawInvoice`"},
{"lineNum":"  202","line":"\thash: [u8; 32],","class":"linePartCov","hits":"3","order":"3831","possible_hits":"6",},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"\t/// signature of the payment request"},
{"lineNum":"  205","line":"\tsignature: Signature,","class":"linePartCov","hits":"4","order":"3832","possible_hits":"8",},
{"lineNum":"  206","line":"}"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"/// Represents an syntactically correct Invoice for a payment on the lightning network,"},
{"lineNum":"  209","line":"/// but without the signature information."},
{"lineNum":"  210","line":"/// De- and encoding should not lead to information loss but may lead to different hashes."},
{"lineNum":"  211","line":"///"},
{"lineNum":"  212","line":"/// For methods without docs see the corresponding methods in `Invoice`."},
{"lineNum":"  213","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"2","order":"3833","possible_hits":"6",},
{"lineNum":"  214","line":"pub struct RawInvoice {"},
{"lineNum":"  215","line":"\t/// human readable part"},
{"lineNum":"  216","line":"\tpub hrp: RawHrp,","class":"linePartCov","hits":"3","order":"3834","possible_hits":"5",},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"\t/// data part"},
{"lineNum":"  219","line":"\tpub data: RawDataPart,","class":"linePartCov","hits":"3","order":"3835","possible_hits":"6",},
{"lineNum":"  220","line":"}"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"/// Data of the `RawInvoice` that is encoded in the human readable part"},
{"lineNum":"  223","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"2","order":"3836","possible_hits":"7",},
{"lineNum":"  224","line":"pub struct RawHrp {"},
{"lineNum":"  225","line":"\t/// The currency deferred from the 3rd and 4th character of the bech32 transaction"},
{"lineNum":"  226","line":"\tpub currency: Currency,","class":"linePartCov","hits":"3","order":"3837","possible_hits":"5",},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"\t/// The amount that, multiplied by the SI prefix, has to be payed"},
{"lineNum":"  229","line":"\tpub raw_amount: Option<u64>,","class":"linePartCov","hits":"3","order":"3838","possible_hits":"6",},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"\t/// SI prefix that gets multiplied with the `raw_amount`"},
{"lineNum":"  232","line":"\tpub si_prefix: Option<SiPrefix>,","class":"linePartCov","hits":"4","order":"3839","possible_hits":"8",},
{"lineNum":"  233","line":"}"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"/// Data of the `RawInvoice` that is encoded in the data part"},
{"lineNum":"  236","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"2","order":"3988","possible_hits":"6",},
{"lineNum":"  237","line":"pub struct RawDataPart {"},
{"lineNum":"  238","line":"\t/// generation time of the invoice"},
{"lineNum":"  239","line":"\tpub timestamp: PositiveTimestamp,","class":"linePartCov","hits":"3","order":"3989","possible_hits":"5",},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"\t/// tagged fields of the payment request"},
{"lineNum":"  242","line":"\tpub tagged_fields: Vec<RawTaggedField>,","class":"linePartCov","hits":"3","order":"3990","possible_hits":"6",},
{"lineNum":"  243","line":"}"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"/// A timestamp that refers to a date after 1 January 1970 which means its representation as UNIX"},
{"lineNum":"  246","line":"/// timestamp is positive."},
{"lineNum":"  247","line":"///"},
{"lineNum":"  248","line":"/// # Invariants"},
{"lineNum":"  249","line":"/// The UNIX timestamp representing the stored time has to be positive and small enough so that"},
{"lineNum":"  250","line":"/// a `EpiryTime` can be added to it without an overflow."},
{"lineNum":"  251","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"4","order":"3889","possible_hits":"8",},
{"lineNum":"  252","line":"pub struct PositiveTimestamp(SystemTime);","class":"linePartCov","hits":"2","order":"3890","possible_hits":"4",},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"/// SI prefixes for the human readable part"},
{"lineNum":"  255","line":"#[derive(Eq, PartialEq, Debug, Clone, Copy)]","class":"linePartCov","hits":"4","order":"3981","possible_hits":"6",},
{"lineNum":"  256","line":"pub enum SiPrefix {"},
{"lineNum":"  257","line":"\t/// 10^-3"},
{"lineNum":"  258","line":"\tMilli,"},
{"lineNum":"  259","line":"\t/// 10^-6"},
{"lineNum":"  260","line":"\tMicro,"},
{"lineNum":"  261","line":"\t/// 10^-9"},
{"lineNum":"  262","line":"\tNano,"},
{"lineNum":"  263","line":"\t/// 10^-12"},
{"lineNum":"  264","line":"\tPico,"},
{"lineNum":"  265","line":"}"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"impl SiPrefix {"},
{"lineNum":"  268","line":"\t/// Returns the multiplier to go from a BTC value to picoBTC implied by this SiPrefix."},
{"lineNum":"  269","line":"\t/// This is effectively 10^12 * the prefix multiplier"},
{"lineNum":"  270","line":"\tpub fn multiplier(&self) -> u64 {","class":"lineCov","hits":"1","order":"3917","possible_hits":"1",},
{"lineNum":"  271","line":"\t\tmatch *self {","class":"lineCov","hits":"3","order":"3919","possible_hits":"3",},
{"lineNum":"  272","line":"\t\t\tSiPrefix::Milli => 1_000_000_000,","class":"lineCov","hits":"2","order":"3918","possible_hits":"2",},
{"lineNum":"  273","line":"\t\t\tSiPrefix::Micro => 1_000_000,","class":"lineCov","hits":"1","order":"3927","possible_hits":"1",},
{"lineNum":"  274","line":"\t\t\tSiPrefix::Nano => 1_000,","class":"lineCov","hits":"1","order":"3928","possible_hits":"1",},
{"lineNum":"  275","line":"\t\t\tSiPrefix::Pico => 1,","class":"lineCov","hits":"1","order":"3984","possible_hits":"1",},
{"lineNum":"  276","line":"\t\t}"},
{"lineNum":"  277","line":"\t}","class":"linePartCov","hits":"1","order":"3920","possible_hits":"3",},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"\t/// Returns all enum variants of `SiPrefix` sorted in descending order of their associated"},
{"lineNum":"  280","line":"\t/// multiplier."},
{"lineNum":"  281","line":"\tpub fn values_desc() -> &\'static [SiPrefix] {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  282","line":"\t\tuse SiPrefix::*;"},
{"lineNum":"  283","line":"\t\tstatic VALUES: [SiPrefix; 4] = [Milli, Micro, Nano, Pico];"},
{"lineNum":"  284","line":"\t\t&VALUES"},
{"lineNum":"  285","line":"\t}","class":"linePartCov","hits":"1","order":"3907","possible_hits":"2",},
{"lineNum":"  286","line":"}"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"/// Enum representing the crypto currencies supported by this library"},
{"lineNum":"  289","line":"#[allow(missing_docs)]"},
{"lineNum":"  290","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"4","order":"1479","possible_hits":"6",},
{"lineNum":"  291","line":"pub enum Currency {"},
{"lineNum":"  292","line":"\tBitcoin,"},
{"lineNum":"  293","line":"\tBitcoinTestnet,"},
{"lineNum":"  294","line":"\tRegtest,"},
{"lineNum":"  295","line":"}"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"/// Tagged field which may have an unknown tag"},
{"lineNum":"  298","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"2","order":"3996","possible_hits":"9",},
{"lineNum":"  299","line":"pub enum RawTaggedField {"},
{"lineNum":"  300","line":"\t/// Parsed tagged field with known tag"},
{"lineNum":"  301","line":"\tKnownSemantics(TaggedField),","class":"linePartCov","hits":"1","order":"3997","possible_hits":"3",},
{"lineNum":"  302","line":"\t/// tagged field which was not parsed due to an unknown tag or undefined field semantics"},
{"lineNum":"  303","line":"\tUnknownSemantics(Vec<u5>),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  304","line":"}"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"/// Tagged field with known tag"},
{"lineNum":"  307","line":"///"},
{"lineNum":"  308","line":"/// For descriptions of the enum values please refer to the enclosed type\'s docs."},
{"lineNum":"  309","line":"#[allow(missing_docs)]"},
{"lineNum":"  310","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"12","order":"3897","possible_hits":"31",},
{"lineNum":"  311","line":"pub enum TaggedField {"},
{"lineNum":"  312","line":"\tPaymentHash(Sha256),","class":"linePartCov","hits":"2","order":"3899","possible_hits":"4",},
{"lineNum":"  313","line":"\tDescription(Description),","class":"linePartCov","hits":"2","order":"3898","possible_hits":"4",},
{"lineNum":"  314","line":"\tPayeePubKey(PayeePubKey),","class":"linePartCov","hits":"2","order":"5142","possible_hits":"4",},
{"lineNum":"  315","line":"\tDescriptionHash(Sha256),","class":"linePartCov","hits":"2","order":"5147","possible_hits":"4",},
{"lineNum":"  316","line":"\tExpiryTime(ExpiryTime),","class":"linePartCov","hits":"2","order":"5143","possible_hits":"4",},
{"lineNum":"  317","line":"\tMinFinalCltvExpiry(MinFinalCltvExpiry),","class":"linePartCov","hits":"2","order":"5144","possible_hits":"4",},
{"lineNum":"  318","line":"\tFallback(Fallback),","class":"linePartCov","hits":"2","order":"5145","possible_hits":"4",},
{"lineNum":"  319","line":"\tRoute(Route),","class":"linePartCov","hits":"2","order":"5146","possible_hits":"4",},
{"lineNum":"  320","line":"}"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"/// SHA-256 hash"},
{"lineNum":"  323","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"4","order":"2869","possible_hits":"8",},
{"lineNum":"  324","line":"pub struct Sha256(pub sha256::Hash);","class":"linePartCov","hits":"2","order":"2870","possible_hits":"4",},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"/// Description string"},
{"lineNum":"  327","line":"///"},
{"lineNum":"  328","line":"/// # Invariants"},
{"lineNum":"  329","line":"/// The description can be at most 639 __bytes__ long"},
{"lineNum":"  330","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"4","order":"1938","possible_hits":"8",},
{"lineNum":"  331","line":"pub struct Description(String);","class":"linePartCov","hits":"2","order":"1939","possible_hits":"4",},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"/// Payee public key"},
{"lineNum":"  334","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"4","order":"2676","possible_hits":"8",},
{"lineNum":"  335","line":"pub struct PayeePubKey(pub PublicKey);","class":"linePartCov","hits":"2","order":"2677","possible_hits":"4",},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"/// Positive duration that defines when (relatively to the timestamp) in the future the invoice"},
{"lineNum":"  338","line":"/// expires"},
{"lineNum":"  339","line":"///"},
{"lineNum":"  340","line":"/// # Invariants"},
{"lineNum":"  341","line":"/// The number of seconds this expiry time represents has to be in the range"},
{"lineNum":"  342","line":"/// `0...(SYSTEM_TIME_MAX_UNIX_TIMESTAMP - MAX_EXPIRY_TIME)` to avoid overflows when adding it to a"},
{"lineNum":"  343","line":"/// timestamp"},
{"lineNum":"  344","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"4","order":"2291","possible_hits":"8",},
{"lineNum":"  345","line":"pub struct ExpiryTime(Duration);","class":"linePartCov","hits":"2","order":"2292","possible_hits":"4",},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"/// `min_final_cltv_expiry` to use for the last HTLC in the route"},
{"lineNum":"  348","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"4","order":"2331","possible_hits":"8",},
{"lineNum":"  349","line":"pub struct MinFinalCltvExpiry(pub u64);","class":"linePartCov","hits":"2","order":"2332","possible_hits":"4",},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"// TODO: better types instead onf byte arrays"},
{"lineNum":"  352","line":"/// Fallback address in case no LN payment is possible"},
{"lineNum":"  353","line":"#[allow(missing_docs)]"},
{"lineNum":"  354","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"7","order":"2268","possible_hits":"19",},
{"lineNum":"  355","line":"pub enum Fallback {"},
{"lineNum":"  356","line":"\tSegWitProgram {"},
{"lineNum":"  357","line":"\t\tversion: u5,","class":"linePartCov","hits":"3","order":"2287","possible_hits":"7",},
{"lineNum":"  358","line":"\t\tprogram: Vec<u8>,","class":"linePartCov","hits":"3","order":"2288","possible_hits":"8",},
{"lineNum":"  359","line":"\t},"},
{"lineNum":"  360","line":"\tPubKeyHash([u8; 20]),","class":"linePartCov","hits":"2","order":"2269","possible_hits":"4",},
{"lineNum":"  361","line":"\tScriptHash([u8; 20]),","class":"linePartCov","hits":"1","order":"2279","possible_hits":"4",},
{"lineNum":"  362","line":"}"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"/// Recoverable signature"},
{"lineNum":"  365","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"2","order":"3998","possible_hits":"6",},
{"lineNum":"  366","line":"pub struct Signature(pub RecoverableSignature);","class":"linePartCov","hits":"1","order":"3999","possible_hits":"3",},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"/// Private routing information"},
{"lineNum":"  369","line":"///"},
{"lineNum":"  370","line":"/// # Invariants"},
{"lineNum":"  371","line":"/// The encoded route has to be <1024 5bit characters long (<=639 bytes or <=12 hops)"},
{"lineNum":"  372","line":"///"},
{"lineNum":"  373","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"4","order":"2726","possible_hits":"8",},
{"lineNum":"  374","line":"pub struct Route(Vec<RouteHop>);","class":"linePartCov","hits":"2","order":"2727","possible_hits":"4",},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"/// Node on a private route"},
{"lineNum":"  377","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"4","order":"2746","possible_hits":"11",},
{"lineNum":"  378","line":"pub struct RouteHop {"},
{"lineNum":"  379","line":"\t/// Node\'s public key"},
{"lineNum":"  380","line":"\tpub pubkey: PublicKey,","class":"linePartCov","hits":"5","order":"2747","possible_hits":"7",},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"\t/// Which channel of this node we would be using"},
{"lineNum":"  383","line":"\tpub short_channel_id: [u8; 8],","class":"linePartCov","hits":"5","order":"2749","possible_hits":"8",},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"\t/// Fee charged by this node per transaction"},
{"lineNum":"  386","line":"\tpub fee_base_msat: u32,","class":"linePartCov","hits":"5","order":"2751","possible_hits":"8",},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"\t/// Fee charged by this node proportional to the amount routed"},
{"lineNum":"  389","line":"\tpub fee_proportional_millionths: u32,","class":"linePartCov","hits":"5","order":"2753","possible_hits":"8",},
{"lineNum":"  390","line":""},
{"lineNum":"  391","line":"\t/// Delta substracted by this node from incoming cltv_expiry value"},
{"lineNum":"  392","line":"\tpub cltv_expiry_delta: u16,","class":"linePartCov","hits":"5","order":"2755","possible_hits":"8",},
{"lineNum":"  393","line":"}"},
{"lineNum":"  394","line":""},
{"lineNum":"  395","line":"/// Tag constants as specified in BOLT11"},
{"lineNum":"  396","line":"#[allow(missing_docs)]"},
{"lineNum":"  397","line":"pub mod constants {"},
{"lineNum":"  398","line":"\tpub const TAG_PAYMENT_HASH: u8 = 1;"},
{"lineNum":"  399","line":"\tpub const TAG_DESCRIPTION: u8 = 13;"},
{"lineNum":"  400","line":"\tpub const TAG_PAYEE_PUB_KEY: u8 = 19;"},
{"lineNum":"  401","line":"\tpub const TAG_DESCRIPTION_HASH: u8 = 23;"},
{"lineNum":"  402","line":"\tpub const TAG_EXPIRY_TIME: u8 = 6;"},
{"lineNum":"  403","line":"\tpub const TAG_MIN_FINAL_CLTV_EXPIRY: u8 = 24;"},
{"lineNum":"  404","line":"\tpub const TAG_FALLBACK: u8 = 9;"},
{"lineNum":"  405","line":"\tpub const TAG_ROUTE: u8 = 3;"},
{"lineNum":"  406","line":"}"},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"impl InvoiceBuilder<tb::False, tb::False, tb::False> {"},
{"lineNum":"  409","line":"\t/// Construct new, empty `InvoiceBuilder`. All necessary fields have to be filled first before"},
{"lineNum":"  410","line":"\t/// `InvoiceBuilder::build(self)` becomes available."},
{"lineNum":"  411","line":"\tpub fn new(currrency: Currency) -> Self {","class":"lineCov","hits":"1","order":"3758","possible_hits":"1",},
{"lineNum":"  412","line":"\t\tInvoiceBuilder {","class":"lineCov","hits":"1","order":"3797","possible_hits":"1",},
{"lineNum":"  413","line":"\t\t\tcurrency: currrency,","class":"lineCov","hits":"1","order":"3760","possible_hits":"1",},
{"lineNum":"  414","line":"\t\t\tamount: None,","class":"lineCov","hits":"1","order":"3762","possible_hits":"1",},
{"lineNum":"  415","line":"\t\t\tsi_prefix: None,","class":"lineCov","hits":"1","order":"3764","possible_hits":"1",},
{"lineNum":"  416","line":"\t\t\ttimestamp: None,","class":"lineCov","hits":"1","order":"3766","possible_hits":"1",},
{"lineNum":"  417","line":"\t\t\ttagged_fields: Vec::new(),","class":"lineCov","hits":"1","order":"3768","possible_hits":"1",},
{"lineNum":"  418","line":"\t\t\terror: None,","class":"lineCov","hits":"1","order":"3795","possible_hits":"1",},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"\t\t\tphantom_d: std::marker::PhantomData,"},
{"lineNum":"  421","line":"\t\t\tphantom_h: std::marker::PhantomData,"},
{"lineNum":"  422","line":"\t\t\tphantom_t: std::marker::PhantomData,"},
{"lineNum":"  423","line":"\t\t}"},
{"lineNum":"  424","line":"\t}","class":"linePartCov","hits":"1","order":"3799","possible_hits":"2",},
{"lineNum":"  425","line":"}"},
{"lineNum":"  426","line":""},
{"lineNum":"  427","line":"impl<D: tb::Bool, H: tb::Bool, T: tb::Bool> InvoiceBuilder<D, H, T> {"},
{"lineNum":"  428","line":"\t/// Helper function to set the completeness flags."},
{"lineNum":"  429","line":"\tfn set_flags<DN: tb::Bool, HN: tb::Bool, TN: tb::Bool>(self) -> InvoiceBuilder<DN, HN, TN> {","class":"lineCov","hits":"9","order":"3842","possible_hits":"9",},
{"lineNum":"  430","line":"\t\tInvoiceBuilder::<DN, HN, TN> {","class":"lineCov","hits":"9","order":"3849","possible_hits":"9",},
{"lineNum":"  431","line":"\t\t\tcurrency: self.currency,","class":"lineCov","hits":"9","order":"3843","possible_hits":"9",},
{"lineNum":"  432","line":"\t\t\tamount: self.amount,","class":"lineCov","hits":"9","order":"3844","possible_hits":"9",},
{"lineNum":"  433","line":"\t\t\tsi_prefix: self.si_prefix,","class":"lineCov","hits":"9","order":"3845","possible_hits":"9",},
{"lineNum":"  434","line":"\t\t\ttimestamp: self.timestamp,","class":"lineCov","hits":"9","order":"3846","possible_hits":"9",},
{"lineNum":"  435","line":"\t\t\ttagged_fields: self.tagged_fields,","class":"lineCov","hits":"9","order":"3847","possible_hits":"9",},
{"lineNum":"  436","line":"\t\t\terror: self.error,","class":"lineCov","hits":"9","order":"3848","possible_hits":"9",},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":"\t\t\tphantom_d: std::marker::PhantomData,"},
{"lineNum":"  439","line":"\t\t\tphantom_h: std::marker::PhantomData,"},
{"lineNum":"  440","line":"\t\t\tphantom_t: std::marker::PhantomData,"},
{"lineNum":"  441","line":"\t\t}"},
{"lineNum":"  442","line":"\t}","class":"linePartCov","hits":"9","order":"3850","possible_hits":"18",},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"\t/// Sets the amount in pico BTC. The optimal SI prefix is choosen automatically."},
{"lineNum":"  445","line":"\tpub fn amount_pico_btc(mut self, amount: u64) -> Self {","class":"linePartCov","hits":"2","order":"3905","possible_hits":"4",},
{"lineNum":"  446","line":"\t\tlet biggest_possible_si_prefix = SiPrefix::values_desc()","class":"lineCov","hits":"8","order":"3906","possible_hits":"8",},
{"lineNum":"  447","line":"\t\t\t.iter()"},
{"lineNum":"  448","line":"\t\t\t.find(|prefix| amount % prefix.multiplier() == 0)","class":"lineCov","hits":"6","order":"3908","possible_hits":"6",},
{"lineNum":"  449","line":"\t\t\t.expect(\"Pico should always match\");"},
{"lineNum":"  450","line":"\t\tself.amount = Some(amount / biggest_possible_si_prefix.multiplier());","class":"linePartCov","hits":"2","order":"3938","possible_hits":"4",},
{"lineNum":"  451","line":"\t\tself.si_prefix = Some(*biggest_possible_si_prefix);","class":"lineCov","hits":"2","order":"3939","possible_hits":"2",},
{"lineNum":"  452","line":"\t\tself","class":"lineCov","hits":"2","order":"3940","possible_hits":"2",},
{"lineNum":"  453","line":"\t}","class":"linePartCov","hits":"2","order":"3941","possible_hits":"4",},
{"lineNum":"  454","line":""},
{"lineNum":"  455","line":"\t/// Sets the payee\'s public key."},
{"lineNum":"  456","line":"\tpub fn payee_pub_key(mut self, pub_key: PublicKey) -> Self {","class":"linePartCov","hits":"1","order":"5109","possible_hits":"2",},
{"lineNum":"  457","line":"\t\tself.tagged_fields.push(TaggedField::PayeePubKey(PayeePubKey(pub_key)));","class":"lineCov","hits":"1","order":"5110","possible_hits":"1",},
{"lineNum":"  458","line":"\t\tself","class":"lineCov","hits":"1","order":"5111","possible_hits":"1",},
{"lineNum":"  459","line":"\t}","class":"linePartCov","hits":"1","order":"5112","possible_hits":"2",},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"\t/// Sets the expiry time"},
{"lineNum":"  462","line":"\tpub fn expiry_time(mut self, expiry_time: Duration) -> Self {","class":"linePartCov","hits":"1","order":"5114","possible_hits":"2",},
{"lineNum":"  463","line":"        match ExpiryTime::from_duration(expiry_time) {","class":"lineCov","hits":"2","order":"5115","possible_hits":"2",},
{"lineNum":"  464","line":"            Ok(t) => self.tagged_fields.push(TaggedField::ExpiryTime(t)),","class":"lineCov","hits":"2","order":"5120","possible_hits":"2",},
{"lineNum":"  465","line":"            Err(e) => self.error = Some(e),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  466","line":"        };"},
{"lineNum":"  467","line":"\t\tself","class":"lineCov","hits":"1","order":"5121","possible_hits":"1",},
{"lineNum":"  468","line":"\t}","class":"linePartCov","hits":"1","order":"5122","possible_hits":"2",},
{"lineNum":"  469","line":""},
{"lineNum":"  470","line":"\t/// Sets `min_final_cltv_expiry`."},
{"lineNum":"  471","line":"\tpub fn min_final_cltv_expiry(mut self, min_final_cltv_expiry: u64) -> Self {","class":"linePartCov","hits":"1","order":"5123","possible_hits":"2",},
{"lineNum":"  472","line":"\t\tself.tagged_fields.push(TaggedField::MinFinalCltvExpiry(MinFinalCltvExpiry(min_final_cltv_expiry)));","class":"lineCov","hits":"1","order":"5124","possible_hits":"1",},
{"lineNum":"  473","line":"\t\tself","class":"lineCov","hits":"1","order":"5125","possible_hits":"1",},
{"lineNum":"  474","line":"\t}","class":"linePartCov","hits":"1","order":"5126","possible_hits":"2",},
{"lineNum":"  475","line":""},
{"lineNum":"  476","line":"\t/// Adds a fallback address."},
{"lineNum":"  477","line":"\tpub fn fallback(mut self, fallback: Fallback) -> Self {","class":"linePartCov","hits":"1","order":"5128","possible_hits":"2",},
{"lineNum":"  478","line":"\t\tself.tagged_fields.push(TaggedField::Fallback(fallback));","class":"lineCov","hits":"1","order":"5129","possible_hits":"1",},
{"lineNum":"  479","line":"\t\tself","class":"lineCov","hits":"1","order":"5130","possible_hits":"1",},
{"lineNum":"  480","line":"\t}","class":"linePartCov","hits":"1","order":"5131","possible_hits":"2",},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"\t/// Adds a private route."},
{"lineNum":"  483","line":"\tpub fn route(mut self, route: Vec<RouteHop>) -> Self {","class":"linePartCov","hits":"2","order":"4292","possible_hits":"4",},
{"lineNum":"  484","line":"\t\tmatch Route::new(route) {","class":"linePartCov","hits":"5","order":"4294","possible_hits":"6",},
{"lineNum":"  485","line":"\t\t\tOk(r) => self.tagged_fields.push(TaggedField::Route(r)),","class":"linePartCov","hits":"3","order":"4305","possible_hits":"4",},
{"lineNum":"  486","line":"\t\t\tErr(e) => self.error = Some(e),","class":"linePartCov","hits":"1","order":"4307","possible_hits":"2",},
{"lineNum":"  487","line":"\t\t}","class":"linePartCov","hits":"3","order":"4309","possible_hits":"6",},
{"lineNum":"  488","line":"\t\tself","class":"lineCov","hits":"2","order":"4311","possible_hits":"2",},
{"lineNum":"  489","line":"\t}","class":"linePartCov","hits":"2","order":"4313","possible_hits":"4",},
{"lineNum":"  490","line":"}"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"impl<D: tb::Bool, H: tb::Bool> InvoiceBuilder<D, H, tb::True> {"},
{"lineNum":"  493","line":"\t/// Builds a `RawInvoice` if no `CreationError` occurred while construction any of the fields."},
{"lineNum":"  494","line":"\tpub fn build_raw(self) -> Result<RawInvoice, CreationError> {","class":"linePartCov","hits":"1","order":"3942","possible_hits":"2",},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"\t\t// If an error occurred at any time before, return it now"},
{"lineNum":"  497","line":"\t\tif let Some(e) = self.error {","class":"lineCov","hits":"2","order":"3943","possible_hits":"2",},
{"lineNum":"  498","line":"\t\t\treturn Err(e);","class":"lineCov","hits":"1","order":"4155","possible_hits":"1",},
{"lineNum":"  499","line":"\t\t}"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"\t\tlet hrp = RawHrp {","class":"lineCov","hits":"1","order":"3947","possible_hits":"1",},
{"lineNum":"  502","line":"\t\t\tcurrency: self.currency,","class":"lineCov","hits":"1","order":"3944","possible_hits":"1",},
{"lineNum":"  503","line":"\t\t\traw_amount: self.amount,","class":"lineCov","hits":"1","order":"3945","possible_hits":"1",},
{"lineNum":"  504","line":"\t\t\tsi_prefix: self.si_prefix,","class":"lineCov","hits":"1","order":"3946","possible_hits":"1",},
{"lineNum":"  505","line":"\t\t};"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"\t\tlet timestamp = self.timestamp.expect(\"ensured to be Some(t) by type T\");","class":"lineCov","hits":"1","order":"3948","possible_hits":"1",},
{"lineNum":"  508","line":""},
{"lineNum":"  509","line":"\t\tlet tagged_fields = self.tagged_fields.into_iter().map(|tf| {","class":"lineCov","hits":"2","order":"3949","possible_hits":"2",},
{"lineNum":"  510","line":"\t\t\tRawTaggedField::KnownSemantics(tf)","class":"lineCov","hits":"1","order":"3968","possible_hits":"1",},
{"lineNum":"  511","line":"\t\t}).collect::<Vec<_>>();","class":"linePartCov","hits":"1","order":"3969","possible_hits":"2",},
{"lineNum":"  512","line":""},
{"lineNum":"  513","line":"\t\tlet data = RawDataPart {","class":"lineCov","hits":"1","order":"3975","possible_hits":"1",},
{"lineNum":"  514","line":"\t\t\ttimestamp: timestamp,","class":"lineCov","hits":"1","order":"3973","possible_hits":"1",},
{"lineNum":"  515","line":"\t\t\ttagged_fields: tagged_fields,","class":"lineCov","hits":"1","order":"3974","possible_hits":"1",},
{"lineNum":"  516","line":"\t\t};"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"\t\tOk(RawInvoice {","class":"lineCov","hits":"1","order":"3978","possible_hits":"1",},
{"lineNum":"  519","line":"\t\t\thrp: hrp,","class":"lineCov","hits":"1","order":"3976","possible_hits":"1",},
{"lineNum":"  520","line":"\t\t\tdata: data,","class":"lineCov","hits":"1","order":"3977","possible_hits":"1",},
{"lineNum":"  521","line":"\t\t})"},
{"lineNum":"  522","line":"\t}","class":"lineCov","hits":"2","order":"3979","possible_hits":"2",},
{"lineNum":"  523","line":"}"},
{"lineNum":"  524","line":""},
{"lineNum":"  525","line":"impl<H: tb::Bool, T: tb::Bool> InvoiceBuilder<tb::False, H, T> {"},
{"lineNum":"  526","line":"\t/// Set the description. This function is only available if no description (hash) was set."},
{"lineNum":"  527","line":"\tpub fn description(mut self, description: String) -> InvoiceBuilder<tb::True, H, T> {","class":"linePartCov","hits":"2","order":"3802","possible_hits":"4",},
{"lineNum":"  528","line":"\t\tmatch Description::new(description) {","class":"lineCov","hits":"4","order":"3804","possible_hits":"4",},
{"lineNum":"  529","line":"\t\t\tOk(d) => self.tagged_fields.push(TaggedField::Description(d)),","class":"lineCov","hits":"4","order":"3805","possible_hits":"4",},
{"lineNum":"  530","line":"\t\t\tErr(e) => self.error = Some(e),","class":"linePartCov","hits":"1","order":"4140","possible_hits":"2",},
{"lineNum":"  531","line":"\t\t}","class":"linePartCov","hits":"6","order":"3840","possible_hits":"8",},
{"lineNum":"  532","line":"\t\tself.set_flags()","class":"lineCov","hits":"2","order":"3841","possible_hits":"2",},
{"lineNum":"  533","line":"\t}","class":"linePartCov","hits":"2","order":"3851","possible_hits":"4",},
{"lineNum":"  534","line":""},
{"lineNum":"  535","line":"\t/// Set the description hash. This function is only available if no description (hash) was set."},
{"lineNum":"  536","line":"\tpub fn description_hash(mut self, description_hash: sha256::Hash) -> InvoiceBuilder<tb::True, H, T> {","class":"linePartCov","hits":"1","order":"5136","possible_hits":"2",},
{"lineNum":"  537","line":"\t\tself.tagged_fields.push(TaggedField::DescriptionHash(Sha256(description_hash)));","class":"lineCov","hits":"1","order":"5137","possible_hits":"1",},
{"lineNum":"  538","line":"\t\tself.set_flags()","class":"lineCov","hits":"1","order":"5138","possible_hits":"1",},
{"lineNum":"  539","line":"\t}","class":"lineCov","hits":"1","order":"5139","possible_hits":"1",},
{"lineNum":"  540","line":"}"},
{"lineNum":"  541","line":""},
{"lineNum":"  542","line":"impl<D: tb::Bool, T: tb::Bool> InvoiceBuilder<D, tb::False, T> {"},
{"lineNum":"  543","line":"\t/// Set the payment hash. This function is only available if no payment hash was set."},
{"lineNum":"  544","line":"\tpub fn payment_hash(mut self, hash: sha256::Hash) -> InvoiceBuilder<D, tb::True, T> {","class":"linePartCov","hits":"3","order":"3853","possible_hits":"6",},
{"lineNum":"  545","line":"\t\tself.tagged_fields.push(TaggedField::PaymentHash(Sha256(hash)));","class":"lineCov","hits":"3","order":"3854","possible_hits":"3",},
{"lineNum":"  546","line":"\t\tself.set_flags()","class":"lineCov","hits":"3","order":"3855","possible_hits":"3",},
{"lineNum":"  547","line":"\t}","class":"lineCov","hits":"3","order":"3856","possible_hits":"3",},
{"lineNum":"  548","line":"}"},
{"lineNum":"  549","line":""},
{"lineNum":"  550","line":"impl<D: tb::Bool, H: tb::Bool> InvoiceBuilder<D, H, tb::False> {"},
{"lineNum":"  551","line":"\t/// Sets the timestamp."},
{"lineNum":"  552","line":"\tpub fn timestamp(mut self, time: SystemTime) -> InvoiceBuilder<D, H, tb::True> {","class":"linePartCov","hits":"1","order":"5103","possible_hits":"2",},
{"lineNum":"  553","line":"\t\tmatch PositiveTimestamp::from_system_time(time) {","class":"lineCov","hits":"2","order":"5104","possible_hits":"2",},
{"lineNum":"  554","line":"\t\t\tOk(t) => self.timestamp = Some(t),","class":"lineCov","hits":"2","order":"5105","possible_hits":"2",},
{"lineNum":"  555","line":"\t\t\tErr(e) => self.error = Some(e),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  556","line":"\t\t}"},
{"lineNum":"  557","line":""},
{"lineNum":"  558","line":"\t\tself.set_flags()","class":"lineCov","hits":"1","order":"5106","possible_hits":"1",},
{"lineNum":"  559","line":"\t}","class":"linePartCov","hits":"1","order":"5107","possible_hits":"2",},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"\t/// Sets the timestamp to the current UNIX timestamp."},
{"lineNum":"  562","line":"\tpub fn current_timestamp(mut self) -> InvoiceBuilder<D, H, tb::True> {","class":"linePartCov","hits":"2","order":"3857","possible_hits":"4",},
{"lineNum":"  563","line":"\t\tlet now = PositiveTimestamp::from_system_time(SystemTime::now());","class":"lineCov","hits":"2","order":"3858","possible_hits":"2",},
{"lineNum":"  564","line":"\t\tself.timestamp = Some(now.expect(\"for the foreseeable future this shouldn\'t happen\"));","class":"lineCov","hits":"2","order":"3875","possible_hits":"2",},
{"lineNum":"  565","line":"\t\tself.set_flags()","class":"lineCov","hits":"2","order":"3876","possible_hits":"2",},
{"lineNum":"  566","line":"\t}","class":"lineCov","hits":"2","order":"3877","possible_hits":"2",},
{"lineNum":"  567","line":"}"},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"impl InvoiceBuilder<tb::True, tb::True, tb::True> {"},
{"lineNum":"  570","line":"\t/// Builds and signs an invoice using the supplied `sign_function`. This function MAY NOT fail"},
{"lineNum":"  571","line":"\t/// and MUST produce a recoverable signature valid for the given hash and if applicable also for"},
{"lineNum":"  572","line":"\t/// the included payee public key."},
{"lineNum":"  573","line":"\tpub fn build_signed<F>(self, sign_function: F) -> Result<Invoice, CreationError>","class":"linePartCov","hits":"1","order":"5148","possible_hits":"2",},
{"lineNum":"  574","line":"\t\twhere F: FnOnce(&Message) -> RecoverableSignature"},
{"lineNum":"  575","line":"\t{"},
{"lineNum":"  576","line":"\t\tlet invoice = self.try_build_signed::<_, ()>(|hash| {","class":"lineCov","hits":"2","order":"5149","possible_hits":"2",},
{"lineNum":"  577","line":"\t\t\tOk(sign_function(hash))","class":"lineCov","hits":"1","order":"5290","possible_hits":"1",},
{"lineNum":"  578","line":"\t\t});","class":"linePartCov","hits":"2","order":"5603","possible_hits":"3",},
{"lineNum":"  579","line":""},
{"lineNum":"  580","line":"\t\tmatch invoice {","class":"linePartCov","hits":"1","order":"5655","possible_hits":"2",},
{"lineNum":"  581","line":"\t\t\tOk(i) => Ok(i),","class":"lineCov","hits":"2","order":"5654","possible_hits":"2",},
{"lineNum":"  582","line":"\t\t\tErr(SignOrCreationError::CreationError(e)) => Err(e),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  583","line":"\t\t\tErr(SignOrCreationError::SignError(())) => unreachable!(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  584","line":"\t\t}"},
{"lineNum":"  585","line":"\t}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  586","line":""},
{"lineNum":"  587","line":"\t/// Builds and signs an invoice using the supplied `sign_function`. This function MAY fail with"},
{"lineNum":"  588","line":"\t/// an error of type `E` and MUST produce a recoverable signature valid for the given hash and"},
{"lineNum":"  589","line":"\t/// if applicable also for the included payee public key."},
{"lineNum":"  590","line":"\tpub fn try_build_signed<F, E>(self, sign_function: F) -> Result<Invoice, SignOrCreationError<E>>","class":"linePartCov","hits":"2","order":"4323","possible_hits":"4",},
{"lineNum":"  591","line":"\t\twhere F: FnOnce(&Message) -> Result<RecoverableSignature, E>"},
{"lineNum":"  592","line":"\t{"},
{"lineNum":"  593","line":"\t\tlet raw = match self.build_raw() {","class":"lineCov","hits":"2","order":"4324","possible_hits":"2",},
{"lineNum":"  594","line":"\t\t\tOk(r) => r,","class":"lineCov","hits":"4","order":"4326","possible_hits":"4",},
{"lineNum":"  595","line":"\t\t\tErr(e) => return Err(SignOrCreationError::CreationError(e)),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  596","line":"\t\t};","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"\t\tlet signed = match raw.sign(sign_function) {","class":"lineCov","hits":"2","order":"4329","possible_hits":"2",},
{"lineNum":"  599","line":"\t\t\tOk(s) => s,","class":"lineCov","hits":"2","order":"4913","possible_hits":"2",},
{"lineNum":"  600","line":"\t\t\tErr(e) => return Err(SignOrCreationError::SignError(e)),","class":"linePartCov","hits":"1","order":"4914","possible_hits":"2",},
{"lineNum":"  601","line":"\t\t};","class":"linePartCov","hits":"2","order":"4915","possible_hits":"8",},
{"lineNum":"  602","line":""},
{"lineNum":"  603","line":"\t\tlet invoice = Invoice {","class":"linePartCov","hits":"1","order":"5609","possible_hits":"2",},
{"lineNum":"  604","line":"\t\t\tsigned_invoice: signed,","class":"linePartCov","hits":"1","order":"5608","possible_hits":"2",},
{"lineNum":"  605","line":"\t\t};"},
{"lineNum":"  606","line":""},
{"lineNum":"  607","line":"\t\tinvoice.check_field_counts().expect(\"should be ensured by type signature of builder\");","class":"linePartCov","hits":"2","order":"5610","possible_hits":"4",},
{"lineNum":"  608","line":""},
{"lineNum":"  609","line":"\t\tOk(invoice)","class":"linePartCov","hits":"1","order":"5653","possible_hits":"2",},
{"lineNum":"  610","line":"\t}","class":"linePartCov","hits":"3","order":"4916","possible_hits":"14",},
{"lineNum":"  611","line":"}"},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":""},
{"lineNum":"  614","line":"impl SignedRawInvoice {"},
{"lineNum":"  615","line":"\t/// Disassembles the `SignedRawInvoice` into its three parts:"},
{"lineNum":"  616","line":"\t///  1. raw invoice"},
{"lineNum":"  617","line":"\t///  2. hash of the raw invoice"},
{"lineNum":"  618","line":"\t///  3. signature"},
{"lineNum":"  619","line":"\tpub fn into_parts(self) -> (RawInvoice, [u8; 32], Signature) {","class":"lineCov","hits":"1","order":"6145","possible_hits":"1",},
{"lineNum":"  620","line":"\t\t(self.raw_invoice, self.hash, self.signature)","class":"lineCov","hits":"1","order":"6146","possible_hits":"1",},
{"lineNum":"  621","line":"\t}","class":"linePartCov","hits":"1","order":"6147","possible_hits":"2",},
{"lineNum":"  622","line":""},
{"lineNum":"  623","line":"\t/// The `RawInvoice` which was signed."},
{"lineNum":"  624","line":"\tpub fn raw_invoice(&self) -> &RawInvoice {","class":"lineCov","hits":"1","order":"5615","possible_hits":"1",},
{"lineNum":"  625","line":"\t\t&self.raw_invoice","class":"lineCov","hits":"1","order":"5616","possible_hits":"1",},
{"lineNum":"  626","line":"\t}","class":"linePartCov","hits":"1","order":"5617","possible_hits":"2",},
{"lineNum":"  627","line":""},
{"lineNum":"  628","line":"\t/// The hash of the `RawInvoice` that was signed."},
{"lineNum":"  629","line":"\tpub fn hash(&self) -> &[u8; 32] {"},
{"lineNum":"  630","line":"\t\t&self.hash"},
{"lineNum":"  631","line":"\t}"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"\t/// Signature for the invoice."},
{"lineNum":"  634","line":"\tpub fn signature(&self) -> &Signature {"},
{"lineNum":"  635","line":"\t\t&self.signature"},
{"lineNum":"  636","line":"\t}"},
{"lineNum":"  637","line":""},
{"lineNum":"  638","line":"\t/// Recovers the public key used for signing the invoice from the recoverable signature."},
{"lineNum":"  639","line":"\tpub fn recover_payee_pub_key(&self) -> Result<PayeePubKey, secp256k1::Error> {","class":"linePartCov","hits":"1","order":"5016","possible_hits":"2",},
{"lineNum":"  640","line":"\t\tlet hash = Message::from_slice(&self.hash[..])","class":"lineCov","hits":"2","order":"5017","possible_hits":"2",},
{"lineNum":"  641","line":"\t\t\t.expect(\"Hash is 32 bytes long, same as MESSAGE_SIZE\");"},
{"lineNum":"  642","line":""},
{"lineNum":"  643","line":"\t\tOk(PayeePubKey(Secp256k1::new().recover(","class":"lineCov","hits":"4","order":"5018","possible_hits":"4",},
{"lineNum":"  644","line":"\t\t\t&hash,"},
{"lineNum":"  645","line":"\t\t\t&self.signature","class":"lineCov","hits":"1","order":"5659","possible_hits":"1",},
{"lineNum":"  646","line":"\t\t)?))","class":"linePartCov","hits":"1","order":"5861","possible_hits":"3",},
{"lineNum":"  647","line":"\t}","class":"linePartCov","hits":"1","order":"5862","possible_hits":"4",},
{"lineNum":"  648","line":""},
{"lineNum":"  649","line":"\t/// Checks if the signature is valid for the included payee public key or if none exists if it\'s"},
{"lineNum":"  650","line":"\t/// valid for the recovered signature (which should always be true?)."},
{"lineNum":"  651","line":"\tpub fn check_signature(&self) -> bool {","class":"linePartCov","hits":"1","order":"4976","possible_hits":"2",},
{"lineNum":"  652","line":"\t\tlet included_pub_key = self.raw_invoice.payee_pub_key();","class":"lineCov","hits":"1","order":"4977","possible_hits":"1",},
{"lineNum":"  653","line":""},
{"lineNum":"  654","line":"\t\tlet mut recovered_pub_key = Option::None;","class":"lineCov","hits":"1","order":"5012","possible_hits":"1",},
{"lineNum":"  655","line":"\t\tif recovered_pub_key.is_none() {","class":"lineCov","hits":"2","order":"5013","possible_hits":"2",},
{"lineNum":"  656","line":"\t\t\tlet recovered = match self.recover_payee_pub_key() {","class":"lineCov","hits":"1","order":"5015","possible_hits":"1",},
{"lineNum":"  657","line":"\t\t\t\tOk(pk) => pk,","class":"lineCov","hits":"2","order":"5889","possible_hits":"2",},
{"lineNum":"  658","line":"\t\t\t\tErr(_) => return false,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  659","line":"\t\t\t};"},
{"lineNum":"  660","line":"\t\t\trecovered_pub_key = Some(recovered);","class":"lineCov","hits":"1","order":"5890","possible_hits":"1",},
{"lineNum":"  661","line":"\t\t}"},
{"lineNum":"  662","line":""},
{"lineNum":"  663","line":"\t\tlet pub_key = included_pub_key.or_else(|| recovered_pub_key.as_ref())","class":"lineCov","hits":"3","order":"5891","possible_hits":"3",},
{"lineNum":"  664","line":"\t\t\t.expect(\"One is always present\");"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"\t\tlet hash = Message::from_slice(&self.hash[..])","class":"lineCov","hits":"1","order":"5898","possible_hits":"1",},
{"lineNum":"  667","line":"\t\t\t.expect(\"Hash is 32 bytes long, same as MESSAGE_SIZE\");"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"\t\tlet secp_context = Secp256k1::new();","class":"lineCov","hits":"1","order":"5899","possible_hits":"1",},
{"lineNum":"  670","line":"\t\tlet verification_result = secp_context.verify(","class":"lineCov","hits":"1","order":"5926","possible_hits":"1",},
{"lineNum":"  671","line":"\t\t\t&hash,"},
{"lineNum":"  672","line":"\t\t\t&self.signature.to_standard(),","class":"lineCov","hits":"1","order":"5904","possible_hits":"1",},
{"lineNum":"  673","line":"\t\t\tpub_key","class":"lineCov","hits":"1","order":"5925","possible_hits":"1",},
{"lineNum":"  674","line":"\t\t);"},
{"lineNum":"  675","line":""},
{"lineNum":"  676","line":"\t\tmatch verification_result {","class":"lineCov","hits":"1","order":"5991","possible_hits":"1",},
{"lineNum":"  677","line":"\t\t\tOk(()) => true,","class":"lineCov","hits":"1","order":"5990","possible_hits":"1",},
{"lineNum":"  678","line":"\t\t\tErr(_) => false,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  679","line":"\t\t}"},
{"lineNum":"  680","line":"\t}","class":"linePartCov","hits":"2","order":"5992","possible_hits":"4",},
{"lineNum":"  681","line":"}"},
{"lineNum":"  682","line":""},
{"lineNum":"  683","line":"/// Finds the first element of an enum stream of a given variant and extracts one member of the"},
{"lineNum":"  684","line":"/// variant. If no element was found `None` gets returned."},
{"lineNum":"  685","line":"///"},
{"lineNum":"  686","line":"/// The following example would extract the first"},
{"lineNum":"  687","line":"/// ```"},
{"lineNum":"  688","line":"/// use Enum::*"},
{"lineNum":"  689","line":"///"},
{"lineNum":"  690","line":"/// enum Enum {"},
{"lineNum":"  691","line":"/// \tA(u8),"},
{"lineNum":"  692","line":"/// \tB(u16)"},
{"lineNum":"  693","line":"/// }"},
{"lineNum":"  694","line":"///"},
{"lineNum":"  695","line":"/// let elements = vec![A(1), A(2), B(3), A(4)]"},
{"lineNum":"  696","line":"///"},
{"lineNum":"  697","line":"/// assert_eq!(find_extract!(elements.iter(), Enum::B(ref x), x), Some(3u16))"},
{"lineNum":"  698","line":"/// ```"},
{"lineNum":"  699","line":"macro_rules! find_extract {"},
{"lineNum":"  700","line":"    ($iter:expr, $enm:pat, $enm_var:ident) => {"},
{"lineNum":"  701","line":"    \t$iter.filter_map(|tf| match *tf {","class":"linePartCov","hits":"11","order":"4999","possible_hits":"12",},
{"lineNum":"  702","line":"\t\t\t$enm => Some($enm_var),","class":"linePartCov","hits":"5","order":"5902","possible_hits":"6",},
{"lineNum":"  703","line":"\t\t\t_ => None,","class":"lineCov","hits":"6","order":"5000","possible_hits":"6",},
{"lineNum":"  704","line":"\t\t}).next()","class":"linePartCov","hits":"6","order":"5001","possible_hits":"12",},
{"lineNum":"  705","line":"    };"},
{"lineNum":"  706","line":"}"},
{"lineNum":"  707","line":""},
{"lineNum":"  708","line":"#[allow(missing_docs)]"},
{"lineNum":"  709","line":"impl RawInvoice {"},
{"lineNum":"  710","line":"\t/// Hash the HRP as bytes and signatureless data part."},
{"lineNum":"  711","line":"\tfn hash_from_parts(hrp_bytes: &[u8], data_without_signature: &[u5]) -> [u8; 32] {","class":"linePartCov","hits":"1","order":"3446","possible_hits":"2",},
{"lineNum":"  712","line":"\t\tuse bech32::FromBase32;"},
{"lineNum":"  713","line":""},
{"lineNum":"  714","line":"\t\tlet mut preimage = Vec::<u8>::from(hrp_bytes);","class":"lineCov","hits":"1","order":"3447","possible_hits":"1",},
{"lineNum":"  715","line":""},
{"lineNum":"  716","line":"\t\tlet mut data_part = Vec::from(data_without_signature);","class":"lineCov","hits":"1","order":"3448","possible_hits":"1",},
{"lineNum":"  717","line":"\t\tlet overhang = (data_part.len() * 5) % 8;","class":"linePartCov","hits":"3","order":"3449","possible_hits":"4",},
{"lineNum":"  718","line":"\t\tif overhang > 0 {","class":"linePartCov","hits":"1","order":"3450","possible_hits":"2",},
{"lineNum":"  719","line":"\t\t\t// add padding if data does not end at a byte boundary"},
{"lineNum":"  720","line":"\t\t\tdata_part.push(u5::try_from_u8(0).unwrap());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  721","line":""},
{"lineNum":"  722","line":"\t\t\t// if overhang is in (1..3) we need to add u5(0) padding two times"},
{"lineNum":"  723","line":"\t\t\tif overhang < 3 {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  724","line":"\t\t\t\tdata_part.push(u5::try_from_u8(0).unwrap());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  725","line":"\t\t\t}"},
{"lineNum":"  726","line":"\t\t}"},
{"lineNum":"  727","line":""},
{"lineNum":"  728","line":"\t\tpreimage.extend_from_slice(&Vec::<u8>::from_base32(&data_part)","class":"lineCov","hits":"2","order":"3451","possible_hits":"2",},
{"lineNum":"  729","line":"\t\t\t.expect(\"No padding error may occur due to appended zero above.\"));","class":"linePartCov","hits":"1","order":"3452","possible_hits":"2",},
{"lineNum":"  730","line":""},
{"lineNum":"  731","line":"\t\tlet mut hash: [u8; 32] = Default::default();","class":"lineCov","hits":"1","order":"3453","possible_hits":"1",},
{"lineNum":"  732","line":"\t\thash.copy_from_slice(&sha256::Hash::hash(&preimage)[..]);","class":"lineCov","hits":"1","order":"3455","possible_hits":"1",},
{"lineNum":"  733","line":"\t\thash","class":"lineCov","hits":"1","order":"3715","possible_hits":"1",},
{"lineNum":"  734","line":"\t}","class":"linePartCov","hits":"1","order":"3716","possible_hits":"3",},
{"lineNum":"  735","line":""},
{"lineNum":"  736","line":"\t/// Calculate the hash of the encoded `RawInvoice`"},
{"lineNum":"  737","line":"\tpub fn hash(&self) -> [u8; 32] {","class":"linePartCov","hits":"1","order":"4335","possible_hits":"2",},
{"lineNum":"  738","line":"\t\tuse bech32::ToBase32;"},
{"lineNum":"  739","line":""},
{"lineNum":"  740","line":"\t\tRawInvoice::hash_from_parts(","class":"lineCov","hits":"1","order":"4895","possible_hits":"1",},
{"lineNum":"  741","line":"\t\t\tself.hrp.to_string().as_bytes(),","class":"lineCov","hits":"2","order":"4337","possible_hits":"2",},
{"lineNum":"  742","line":"\t\t\t&self.data.to_base32()","class":"lineCov","hits":"2","order":"4344","possible_hits":"2",},
{"lineNum":"  743","line":"\t\t)"},
{"lineNum":"  744","line":"\t}","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  745","line":""},
{"lineNum":"  746","line":"\t/// Signs the invoice using the supplied `sign_function`. This function MAY fail with an error"},
{"lineNum":"  747","line":"\t/// of type `E`. Since the signature of a `SignedRawInvoice` is not required to be valid there"},
{"lineNum":"  748","line":"\t/// are no constraints regarding the validity of the produced signature."},
{"lineNum":"  749","line":"\tpub fn sign<F, E>(self, sign_method: F) -> Result<SignedRawInvoice, E>","class":"linePartCov","hits":"3","order":"4331","possible_hits":"6",},
{"lineNum":"  750","line":"\t\twhere F: FnOnce(&Message) -> Result<RecoverableSignature, E>"},
{"lineNum":"  751","line":"\t{"},
{"lineNum":"  752","line":"\t\tlet raw_hash = self.hash();","class":"lineCov","hits":"3","order":"4333","possible_hits":"3",},
{"lineNum":"  753","line":"\t\tlet hash = Message::from_slice(&raw_hash[..])","class":"lineCov","hits":"6","order":"4896","possible_hits":"6",},
{"lineNum":"  754","line":"\t\t\t.expect(\"Hash is 32 bytes long, same as MESSAGE_SIZE\");"},
{"lineNum":"  755","line":"\t\tlet signature = sign_method(&hash)?;","class":"linePartCov","hits":"6","order":"4906","possible_hits":"15",},
{"lineNum":"  756","line":""},
{"lineNum":"  757","line":"\t\tOk(SignedRawInvoice {","class":"linePartCov","hits":"2","order":"5607","possible_hits":"3",},
{"lineNum":"  758","line":"\t\t\traw_invoice: self,","class":"linePartCov","hits":"2","order":"5604","possible_hits":"3",},
{"lineNum":"  759","line":"\t\t\thash: raw_hash,","class":"linePartCov","hits":"2","order":"5605","possible_hits":"3",},
{"lineNum":"  760","line":"\t\t\tsignature: Signature(signature),","class":"linePartCov","hits":"2","order":"5606","possible_hits":"3",},
{"lineNum":"  761","line":"\t\t})"},
{"lineNum":"  762","line":"\t}","class":"linePartCov","hits":"6","order":"4912","possible_hits":"15",},
{"lineNum":"  763","line":""},
{"lineNum":"  764","line":"\t/// Returns an iterator over all tagged fields with known semantics."},
{"lineNum":"  765","line":"\tpub fn known_tagged_fields(&self)","class":"lineCov","hits":"1","order":"4980","possible_hits":"1",},
{"lineNum":"  766","line":"\t\t-> FilterMap<Iter<RawTaggedField>, fn(&RawTaggedField) -> Option<&TaggedField>>"},
{"lineNum":"  767","line":"\t{"},
{"lineNum":"  768","line":"\t\t// For 1.14.0 compatibility: closures\' types can\'t be written an fn()->() in the"},
{"lineNum":"  769","line":"\t\t// function\'s type signature."},
{"lineNum":"  770","line":"\t\t// TODO: refactor once impl Trait is available"},
{"lineNum":"  771","line":"\t\tfn match_raw(raw: &RawTaggedField) -> Option<&TaggedField> {","class":"lineCov","hits":"1","order":"4994","possible_hits":"1",},
{"lineNum":"  772","line":"\t\t\tmatch *raw {","class":"lineCov","hits":"1","order":"4996","possible_hits":"1",},
{"lineNum":"  773","line":"\t\t\t\tRawTaggedField::KnownSemantics(ref tf) => Some(tf),","class":"lineCov","hits":"1","order":"4995","possible_hits":"1",},
{"lineNum":"  774","line":"\t\t\t\t_ => None,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  775","line":"\t\t\t}"},
{"lineNum":"  776","line":"\t\t}","class":"linePartCov","hits":"1","order":"4997","possible_hits":"2",},
{"lineNum":"  777","line":""},
{"lineNum":"  778","line":"\t\tself.data.tagged_fields.iter().filter_map(match_raw )","class":"lineCov","hits":"1","order":"4981","possible_hits":"1",},
{"lineNum":"  779","line":"\t}","class":"linePartCov","hits":"1","order":"4988","possible_hits":"2",},
{"lineNum":"  780","line":""},
{"lineNum":"  781","line":"\tpub fn payment_hash(&self) -> Option<&Sha256> {","class":"lineCov","hits":"1","order":"6100","possible_hits":"1",},
{"lineNum":"  782","line":"\t\tfind_extract!(self.known_tagged_fields(), TaggedField::PaymentHash(ref x), x)","class":"lineCov","hits":"2","order":"6101","possible_hits":"2",},
{"lineNum":"  783","line":"\t}","class":"linePartCov","hits":"1","order":"6102","possible_hits":"2",},
{"lineNum":"  784","line":""},
{"lineNum":"  785","line":"\tpub fn description(&self) -> Option<&Description> {","class":"lineCov","hits":"1","order":"6084","possible_hits":"1",},
{"lineNum":"  786","line":"\t\tfind_extract!(self.known_tagged_fields(), TaggedField::Description(ref x), x)","class":"lineCov","hits":"2","order":"6085","possible_hits":"2",},
{"lineNum":"  787","line":"\t}","class":"linePartCov","hits":"1","order":"6086","possible_hits":"2",},
{"lineNum":"  788","line":""},
{"lineNum":"  789","line":"\tpub fn payee_pub_key(&self) -> Option<&PayeePubKey> {","class":"lineCov","hits":"1","order":"4978","possible_hits":"1",},
{"lineNum":"  790","line":"\t\tfind_extract!(self.known_tagged_fields(), TaggedField::PayeePubKey(ref x), x)","class":"lineCov","hits":"2","order":"4979","possible_hits":"2",},
{"lineNum":"  791","line":"\t}","class":"linePartCov","hits":"1","order":"5011","possible_hits":"2",},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"\tpub fn description_hash(&self) -> Option<&Sha256> {","class":"lineCov","hits":"1","order":"6088","possible_hits":"1",},
{"lineNum":"  794","line":"\t\tfind_extract!(self.known_tagged_fields(), TaggedField::DescriptionHash(ref x), x)","class":"lineCov","hits":"2","order":"6089","possible_hits":"2",},
{"lineNum":"  795","line":"\t}","class":"linePartCov","hits":"1","order":"6090","possible_hits":"2",},
{"lineNum":"  796","line":""},
{"lineNum":"  797","line":"\tpub fn expiry_time(&self) -> Option<&ExpiryTime> {","class":"lineCov","hits":"1","order":"6044","possible_hits":"1",},
{"lineNum":"  798","line":"\t\tfind_extract!(self.known_tagged_fields(), TaggedField::ExpiryTime(ref x), x)","class":"lineCov","hits":"2","order":"6045","possible_hits":"2",},
{"lineNum":"  799","line":"\t}","class":"linePartCov","hits":"1","order":"6046","possible_hits":"2",},
{"lineNum":"  800","line":""},
{"lineNum":"  801","line":"\tpub fn min_final_cltv_expiry(&self) -> Option<&MinFinalCltvExpiry> {","class":"lineCov","hits":"1","order":"6053","possible_hits":"1",},
{"lineNum":"  802","line":"\t\tfind_extract!(self.known_tagged_fields(), TaggedField::MinFinalCltvExpiry(ref x), x)","class":"lineCov","hits":"2","order":"6054","possible_hits":"2",},
{"lineNum":"  803","line":"\t}","class":"linePartCov","hits":"1","order":"6055","possible_hits":"2",},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"\tpub fn fallbacks(&self) -> Vec<&Fallback> {","class":"lineCov","hits":"1","order":"6060","possible_hits":"1",},
{"lineNum":"  806","line":"\t\tself.known_tagged_fields().filter_map(|tf| match tf {","class":"lineCov","hits":"3","order":"6061","possible_hits":"3",},
{"lineNum":"  807","line":"\t\t\t&TaggedField::Fallback(ref f) => Some(f),","class":"lineCov","hits":"1","order":"6062","possible_hits":"1",},
{"lineNum":"  808","line":"\t\t\t_ => None,","class":"lineCov","hits":"1","order":"6063","possible_hits":"1",},
{"lineNum":"  809","line":"\t\t}).collect::<Vec<&Fallback>>()","class":"linePartCov","hits":"1","order":"6064","possible_hits":"2",},
{"lineNum":"  810","line":"\t}","class":"linePartCov","hits":"1","order":"6069","possible_hits":"2",},
{"lineNum":"  811","line":""},
{"lineNum":"  812","line":"\tpub fn routes(&self) -> Vec<&Route> {","class":"lineCov","hits":"1","order":"6074","possible_hits":"1",},
{"lineNum":"  813","line":"\t\tself.known_tagged_fields().filter_map(|tf| match tf {","class":"lineCov","hits":"3","order":"6075","possible_hits":"3",},
{"lineNum":"  814","line":"\t\t\t&TaggedField::Route(ref r) => Some(r),","class":"lineCov","hits":"1","order":"6076","possible_hits":"1",},
{"lineNum":"  815","line":"\t\t\t_ => None,","class":"lineCov","hits":"1","order":"6077","possible_hits":"1",},
{"lineNum":"  816","line":"\t\t}).collect::<Vec<&Route>>()","class":"linePartCov","hits":"1","order":"6078","possible_hits":"2",},
{"lineNum":"  817","line":"\t}","class":"linePartCov","hits":"1","order":"6079","possible_hits":"2",},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":"\tpub fn amount_pico_btc(&self) -> Option<u64> {","class":"lineCov","hits":"1","order":"6013","possible_hits":"1",},
{"lineNum":"  820","line":"\t\tself.hrp.raw_amount.map(|v| {","class":"lineCov","hits":"2","order":"6014","possible_hits":"2",},
{"lineNum":"  821","line":"\t\t\tv * self.hrp.si_prefix.as_ref().map_or(1_000_000_000_000, |si| { si.multiplier() })","class":"linePartCov","hits":"3","order":"6015","possible_hits":"5",},
{"lineNum":"  822","line":"\t\t})","class":"lineCov","hits":"1","order":"6019","possible_hits":"1",},
{"lineNum":"  823","line":"\t}","class":"linePartCov","hits":"1","order":"6020","possible_hits":"2",},
{"lineNum":"  824","line":""},
{"lineNum":"  825","line":"\tpub fn currency(&self) -> Currency {","class":"lineCov","hits":"1","order":"6025","possible_hits":"1",},
{"lineNum":"  826","line":"\t\tself.hrp.currency.clone()","class":"lineCov","hits":"1","order":"6026","possible_hits":"1",},
{"lineNum":"  827","line":"\t}","class":"linePartCov","hits":"1","order":"6027","possible_hits":"2",},
{"lineNum":"  828","line":"}"},
{"lineNum":"  829","line":""},
{"lineNum":"  830","line":"impl PositiveTimestamp {"},
{"lineNum":"  831","line":"\t/// Create a new `PositiveTimestamp` from a unix timestamp in the Range"},
{"lineNum":"  832","line":"\t/// `0...SYSTEM_TIME_MAX_UNIX_TIMESTAMP - MAX_EXPIRY_TIME`, otherwise return a"},
{"lineNum":"  833","line":"\t/// `CreationError::TimestampOutOfBounds`."},
{"lineNum":"  834","line":"\tpub fn from_unix_timestamp(unix_seconds: u64) -> Result<Self, CreationError> {","class":"lineCov","hits":"1","order":"3401","possible_hits":"1",},
{"lineNum":"  835","line":"\t\tif unix_seconds > SYSTEM_TIME_MAX_UNIX_TIMESTAMP - MAX_EXPIRY_TIME {","class":"linePartCov","hits":"2","order":"3402","possible_hits":"4",},
{"lineNum":"  836","line":"\t\t\tErr(CreationError::TimestampOutOfBounds)","class":"lineCov","hits":"1","order":"6138","possible_hits":"1",},
{"lineNum":"  837","line":"\t\t} else {"},
{"lineNum":"  838","line":"\t\t\tOk(PositiveTimestamp(UNIX_EPOCH + Duration::from_secs(unix_seconds)))","class":"lineCov","hits":"1","order":"3403","possible_hits":"1",},
{"lineNum":"  839","line":"\t\t}"},
{"lineNum":"  840","line":"\t}","class":"lineCov","hits":"1","order":"3404","possible_hits":"1",},
{"lineNum":"  841","line":""},
{"lineNum":"  842","line":"\t/// Create a new `PositiveTimestamp` from a `SystemTime` with a corresponding unix timestamp in"},
{"lineNum":"  843","line":"\t/// the Range `0...SYSTEM_TIME_MAX_UNIX_TIMESTAMP - MAX_EXPIRY_TIME`, otherwise return a"},
{"lineNum":"  844","line":"\t/// `CreationError::TimestampOutOfBounds`."},
{"lineNum":"  845","line":"\tpub fn from_system_time(time: SystemTime) -> Result<Self, CreationError> {","class":"lineCov","hits":"1","order":"3861","possible_hits":"1",},
{"lineNum":"  846","line":"\t\tif time","class":"lineCov","hits":"2","order":"3862","possible_hits":"2",},
{"lineNum":"  847","line":"\t\t\t.duration_since(UNIX_EPOCH)"},
{"lineNum":"  848","line":"\t\t\t.map(|t| t.as_secs() <= SYSTEM_TIME_MAX_UNIX_TIMESTAMP - MAX_EXPIRY_TIME)","class":"lineCov","hits":"2","order":"3867","possible_hits":"2",},
{"lineNum":"  849","line":"\t\t\t.unwrap_or(true)"},
{"lineNum":"  850","line":"\t\t\t{"},
{"lineNum":"  851","line":"\t\t\t\tOk(PositiveTimestamp(time))","class":"lineCov","hits":"1","order":"3873","possible_hits":"1",},
{"lineNum":"  852","line":"\t\t\t} else {"},
{"lineNum":"  853","line":"\t\t\tErr(CreationError::TimestampOutOfBounds)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  854","line":"\t\t}"},
{"lineNum":"  855","line":"\t}","class":"linePartCov","hits":"1","order":"3874","possible_hits":"2",},
{"lineNum":"  856","line":""},
{"lineNum":"  857","line":"\t/// Returns the UNIX timestamp representing the stored time"},
{"lineNum":"  858","line":"\tpub fn as_unix_timestamp(&self) -> u64 {","class":"lineCov","hits":"1","order":"4354","possible_hits":"1",},
{"lineNum":"  859","line":"\t\tself.0.duration_since(UNIX_EPOCH)","class":"lineCov","hits":"1","order":"4356","possible_hits":"1",},
{"lineNum":"  860","line":"\t\t\t.expect(\"ensured by type contract/constructors\")"},
{"lineNum":"  861","line":"\t\t\t.as_secs()"},
{"lineNum":"  862","line":"\t}","class":"linePartCov","hits":"1","order":"4361","possible_hits":"2",},
{"lineNum":"  863","line":""},
{"lineNum":"  864","line":"\t/// Returns a reference to the internal `SystemTime` time representation"},
{"lineNum":"  865","line":"\tpub fn as_time(&self) -> &SystemTime {","class":"lineCov","hits":"1","order":"6032","possible_hits":"1",},
{"lineNum":"  866","line":"\t\t&self.0","class":"lineCov","hits":"1","order":"6033","possible_hits":"1",},
{"lineNum":"  867","line":"\t}","class":"linePartCov","hits":"1","order":"6034","possible_hits":"2",},
{"lineNum":"  868","line":"}"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"impl Into<SystemTime> for PositiveTimestamp {"},
{"lineNum":"  871","line":"\tfn into(self) -> SystemTime {"},
{"lineNum":"  872","line":"\t\tself.0"},
{"lineNum":"  873","line":"\t}"},
{"lineNum":"  874","line":"}"},
{"lineNum":"  875","line":""},
{"lineNum":"  876","line":"impl Deref for PositiveTimestamp {"},
{"lineNum":"  877","line":"\ttype Target = SystemTime;"},
{"lineNum":"  878","line":""},
{"lineNum":"  879","line":"\tfn deref(&self) -> &Self::Target {"},
{"lineNum":"  880","line":"\t\t&self.0"},
{"lineNum":"  881","line":"\t}"},
{"lineNum":"  882","line":"}"},
{"lineNum":"  883","line":""},
{"lineNum":"  884","line":"impl Invoice {"},
{"lineNum":"  885","line":"\t/// Transform the `Invoice` into it\'s unchecked version"},
{"lineNum":"  886","line":"\tpub fn into_signed_raw(self) -> SignedRawInvoice {","class":"lineCov","hits":"1","order":"6106","possible_hits":"1",},
{"lineNum":"  887","line":"\t\tself.signed_invoice","class":"lineCov","hits":"1","order":"6107","possible_hits":"1",},
{"lineNum":"  888","line":"\t}","class":"linePartCov","hits":"1","order":"6108","possible_hits":"2",},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"\t/// Check that all mandatory fields are present"},
{"lineNum":"  891","line":"\tfn check_field_counts(&self) -> Result<(), SemanticError> {","class":"lineCov","hits":"1","order":"5611","possible_hits":"1",},
{"lineNum":"  892","line":"\t\t// \"A writer MUST include exactly one p field […].\""},
{"lineNum":"  893","line":"\t\tlet payment_hash_cnt = self.tagged_fields().filter(|&tf| match *tf {","class":"lineCov","hits":"4","order":"5612","possible_hits":"4",},
{"lineNum":"  894","line":"\t\t\tTaggedField::PaymentHash(_) => true,","class":"lineCov","hits":"1","order":"5636","possible_hits":"1",},
{"lineNum":"  895","line":"\t\t\t_ => false,","class":"lineCov","hits":"1","order":"5637","possible_hits":"1",},
{"lineNum":"  896","line":"\t\t}).count();","class":"linePartCov","hits":"1","order":"5638","possible_hits":"2",},
{"lineNum":"  897","line":"\t\tif payment_hash_cnt < 1 {","class":"lineCov","hits":"1","order":"5643","possible_hits":"1",},
{"lineNum":"  898","line":"\t\t\treturn Err(SemanticError::NoPaymentHash);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  899","line":"\t\t} else if payment_hash_cnt > 1 {","class":"lineCov","hits":"1","order":"5644","possible_hits":"1",},
{"lineNum":"  900","line":"\t\t\treturn Err(SemanticError::MultiplePaymentHashes);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  901","line":"\t\t}"},
{"lineNum":"  902","line":""},
{"lineNum":"  903","line":"\t\t// \"A writer MUST include either exactly one d or exactly one h field.\""},
{"lineNum":"  904","line":"\t\tlet description_cnt = self.tagged_fields().filter(|&tf| match *tf {","class":"lineCov","hits":"4","order":"5645","possible_hits":"4",},
{"lineNum":"  905","line":"\t\t\tTaggedField::Description(_) | TaggedField::DescriptionHash(_) => true,","class":"lineCov","hits":"1","order":"5646","possible_hits":"1",},
{"lineNum":"  906","line":"\t\t\t_ => false,","class":"lineCov","hits":"1","order":"5647","possible_hits":"1",},
{"lineNum":"  907","line":"\t\t}).count();","class":"linePartCov","hits":"1","order":"5648","possible_hits":"2",},
{"lineNum":"  908","line":"\t\tif  description_cnt < 1 {","class":"lineCov","hits":"1","order":"5649","possible_hits":"1",},
{"lineNum":"  909","line":"\t\t\treturn Err(SemanticError::NoDescription);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  910","line":"\t\t} else if description_cnt > 1 {","class":"lineCov","hits":"1","order":"5650","possible_hits":"1",},
{"lineNum":"  911","line":"\t\t\treturn  Err(SemanticError::MultipleDescriptions);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  912","line":"\t\t}"},
{"lineNum":"  913","line":""},
{"lineNum":"  914","line":"\t\tOk(())","class":"lineCov","hits":"1","order":"5651","possible_hits":"1",},
{"lineNum":"  915","line":"\t}","class":"linePartCov","hits":"2","order":"5652","possible_hits":"3",},
{"lineNum":"  916","line":""},
{"lineNum":"  917","line":"\t/// Check that the invoice is signed correctly and that key recovery works"},
{"lineNum":"  918","line":"\tpub fn check_signature(&self) -> Result<(), SemanticError> {","class":"lineCov","hits":"1","order":"5657","possible_hits":"1",},
{"lineNum":"  919","line":"\t\tmatch self.signed_invoice.recover_payee_pub_key() {","class":"lineCov","hits":"1","order":"5658","possible_hits":"1",},
{"lineNum":"  920","line":"\t\t\tErr(secp256k1::Error::InvalidRecoveryId) =>","class":"linePartCov","hits":"1","order":"5900","possible_hits":"2",},
{"lineNum":"  921","line":"\t\t\t\treturn Err(SemanticError::InvalidRecoveryId),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  922","line":"\t\t\tErr(_) => panic!(\"no other error may occur\"),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  923","line":"\t\t\tOk(_) => {},"},
{"lineNum":"  924","line":"\t\t}"},
{"lineNum":"  925","line":""},
{"lineNum":"  926","line":"\t\tif !self.signed_invoice.check_signature() {","class":"lineCov","hits":"1","order":"5901","possible_hits":"1",},
{"lineNum":"  927","line":"\t\t\treturn Err(SemanticError::InvalidSignature);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  928","line":"\t\t}"},
{"lineNum":"  929","line":""},
{"lineNum":"  930","line":"\t\tOk(())","class":"lineCov","hits":"1","order":"5998","possible_hits":"1",},
{"lineNum":"  931","line":"\t}","class":"linePartCov","hits":"1","order":"5999","possible_hits":"3",},
{"lineNum":"  932","line":""},
{"lineNum":"  933","line":"\t/// Constructs an `Invoice` from a `SignedInvoice` by checking all its invariants."},
{"lineNum":"  934","line":"\t/// ```"},
{"lineNum":"  935","line":"\t/// use lightning_invoice::*;"},
{"lineNum":"  936","line":"\t///"},
{"lineNum":"  937","line":"\t/// let invoice = \"lnbc1pvjluezpp5qqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqqqsyqcyq5rqwzqfqypqdp\\"},
{"lineNum":"  938","line":"\t/// \tl2pkx2ctnv5sxxmmwwd5kgetjypeh2ursdae8g6twvus8g6rfwvs8qun0dfjkxaq8rkx3yf5tcsyz3d7\\"},
{"lineNum":"  939","line":"\t/// \t3gafnh3cax9rn449d9p5uxz9ezhhypd0elx87sjle52x86fux2ypatgddc6k63n7erqz25le42c4u4ec\\"},
{"lineNum":"  940","line":"\t/// \tky03ylcqca784w\";"},
{"lineNum":"  941","line":"\t///"},
{"lineNum":"  942","line":"\t/// let signed = invoice.parse::<SignedRawInvoice>().unwrap();"},
{"lineNum":"  943","line":"\t///"},
{"lineNum":"  944","line":"\t/// assert!(Invoice::from_signed(signed).is_ok());"},
{"lineNum":"  945","line":"\t/// ```"},
{"lineNum":"  946","line":"\tpub fn from_signed(signed_invoice: SignedRawInvoice) -> Result<Self, SemanticError> {"},
{"lineNum":"  947","line":"\t\tlet invoice = Invoice {"},
{"lineNum":"  948","line":"\t\t\tsigned_invoice: signed_invoice,"},
{"lineNum":"  949","line":"\t\t};"},
{"lineNum":"  950","line":"\t\tinvoice.check_field_counts()?;"},
{"lineNum":"  951","line":"\t\tinvoice.check_signature()?;"},
{"lineNum":"  952","line":""},
{"lineNum":"  953","line":"\t\tOk(invoice)"},
{"lineNum":"  954","line":"\t}"},
{"lineNum":"  955","line":""},
{"lineNum":"  956","line":"\t/// Returns the `Invoice`\'s timestamp (should equal it\'s creation time)"},
{"lineNum":"  957","line":"\tpub fn timestamp(&self) -> &SystemTime {","class":"lineCov","hits":"1","order":"6030","possible_hits":"1",},
{"lineNum":"  958","line":"\t\tself.signed_invoice.raw_invoice().data.timestamp.as_time()","class":"lineCov","hits":"1","order":"6031","possible_hits":"1",},
{"lineNum":"  959","line":"\t}","class":"linePartCov","hits":"1","order":"6035","possible_hits":"2",},
{"lineNum":"  960","line":""},
{"lineNum":"  961","line":"\t/// Returns an iterator over all tagged fields of this Invoice."},
{"lineNum":"  962","line":"\tpub fn tagged_fields(&self)","class":"lineCov","hits":"1","order":"5613","possible_hits":"1",},
{"lineNum":"  963","line":"\t\t-> FilterMap<Iter<RawTaggedField>, fn(&RawTaggedField) -> Option<&TaggedField>> {"},
{"lineNum":"  964","line":"\t\tself.signed_invoice.raw_invoice().known_tagged_fields()","class":"lineCov","hits":"1","order":"5614","possible_hits":"1",},
{"lineNum":"  965","line":"\t}","class":"linePartCov","hits":"1","order":"5618","possible_hits":"2",},
{"lineNum":"  966","line":""},
{"lineNum":"  967","line":"\t/// Returns the hash to which we will receive the preimage on completion of the payment"},
{"lineNum":"  968","line":"\tpub fn payment_hash(&self) -> &sha256::Hash {","class":"lineCov","hits":"1","order":"6098","possible_hits":"1",},
{"lineNum":"  969","line":"\t\t&self.signed_invoice.payment_hash().expect(\"checked by constructor\").0","class":"lineCov","hits":"1","order":"6099","possible_hits":"1",},
{"lineNum":"  970","line":"\t}","class":"linePartCov","hits":"1","order":"6103","possible_hits":"2",},
{"lineNum":"  971","line":""},
{"lineNum":"  972","line":"\t/// Return the description or a hash of it for longer ones"},
{"lineNum":"  973","line":"\tpub fn description(&self) -> InvoiceDescription {","class":"lineCov","hits":"1","order":"6082","possible_hits":"1",},
{"lineNum":"  974","line":"\t\tif let Some(ref direct) = self.signed_invoice.description() {","class":"lineCov","hits":"1","order":"6083","possible_hits":"1",},
{"lineNum":"  975","line":"\t\t\treturn InvoiceDescription::Direct(direct);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  976","line":"\t\t} else if let Some(ref hash) = self.signed_invoice.description_hash() {","class":"lineCov","hits":"1","order":"6087","possible_hits":"1",},
{"lineNum":"  977","line":"\t\t\treturn InvoiceDescription::Hash(hash);","class":"lineCov","hits":"1","order":"6091","possible_hits":"1",},
{"lineNum":"  978","line":"\t\t}"},
{"lineNum":"  979","line":"\t\tunreachable!(\"ensured by constructor\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  980","line":"\t}","class":"lineCov","hits":"1","order":"6092","possible_hits":"1",},
{"lineNum":"  981","line":""},
{"lineNum":"  982","line":"\t/// Get the payee\'s public key if one was included in the invoice"},
{"lineNum":"  983","line":"\tpub fn payee_pub_key(&self) -> Option<&PublicKey> {","class":"lineCov","hits":"1","order":"6038","possible_hits":"1",},
{"lineNum":"  984","line":"\t\tself.signed_invoice.payee_pub_key().map(|x| &x.0)","class":"lineCov","hits":"3","order":"6039","possible_hits":"3",},
{"lineNum":"  985","line":"\t}","class":"linePartCov","hits":"1","order":"6040","possible_hits":"2",},
{"lineNum":"  986","line":""},
{"lineNum":"  987","line":"\t/// Recover the payee\'s public key (only to be used if none was included in the invoice)"},
{"lineNum":"  988","line":"\tpub fn recover_payee_pub_key(&self) -> PublicKey {"},
{"lineNum":"  989","line":"\t\tself.signed_invoice.recover_payee_pub_key().expect(\"was checked by constructor\").0"},
{"lineNum":"  990","line":"\t}"},
{"lineNum":"  991","line":""},
{"lineNum":"  992","line":"\t/// Returns the invoice\'s expiry time if present"},
{"lineNum":"  993","line":"\tpub fn expiry_time(&self) -> Duration {","class":"lineCov","hits":"1","order":"6042","possible_hits":"1",},
{"lineNum":"  994","line":"\t\tself.signed_invoice.expiry_time()","class":"lineCov","hits":"2","order":"6043","possible_hits":"2",},
{"lineNum":"  995","line":"\t\t\t.map(|x| x.0)","class":"lineCov","hits":"2","order":"6047","possible_hits":"2",},
{"lineNum":"  996","line":"\t\t\t.unwrap_or(Duration::from_secs(3600))","class":"lineCov","hits":"1","order":"6048","possible_hits":"1",},
{"lineNum":"  997","line":"\t}","class":"linePartCov","hits":"1","order":"6049","possible_hits":"2",},
{"lineNum":"  998","line":""},
{"lineNum":"  999","line":"\t/// Returns the invoice\'s `min_cltv_expiry` time if present"},
{"lineNum":" 1000","line":"\tpub fn min_final_cltv_expiry(&self) -> Option<&u64> {","class":"lineCov","hits":"1","order":"6051","possible_hits":"1",},
{"lineNum":" 1001","line":"\t\tself.signed_invoice.min_final_cltv_expiry().map(|x| &x.0)","class":"lineCov","hits":"3","order":"6052","possible_hits":"3",},
{"lineNum":" 1002","line":"\t}","class":"linePartCov","hits":"1","order":"6056","possible_hits":"2",},
{"lineNum":" 1003","line":""},
{"lineNum":" 1004","line":"\t/// Returns a list of all fallback addresses"},
{"lineNum":" 1005","line":"\tpub fn fallbacks(&self) -> Vec<&Fallback> {","class":"lineCov","hits":"1","order":"6058","possible_hits":"1",},
{"lineNum":" 1006","line":"\t\tself.signed_invoice.fallbacks()","class":"lineCov","hits":"1","order":"6059","possible_hits":"1",},
{"lineNum":" 1007","line":"\t}","class":"linePartCov","hits":"1","order":"6070","possible_hits":"2",},
{"lineNum":" 1008","line":""},
{"lineNum":" 1009","line":"\t/// Returns a list of all routes included in the invoice"},
{"lineNum":" 1010","line":"\tpub fn routes(&self) -> Vec<&Route> {","class":"lineCov","hits":"1","order":"6072","possible_hits":"1",},
{"lineNum":" 1011","line":"\t\tself.signed_invoice.routes()","class":"lineCov","hits":"1","order":"6073","possible_hits":"1",},
{"lineNum":" 1012","line":"\t}","class":"linePartCov","hits":"1","order":"6080","possible_hits":"2",},
{"lineNum":" 1013","line":""},
{"lineNum":" 1014","line":"\t/// Returns the currency for which the invoice was issued"},
{"lineNum":" 1015","line":"\tpub fn currency(&self) -> Currency {","class":"lineCov","hits":"1","order":"6023","possible_hits":"1",},
{"lineNum":" 1016","line":"\t\tself.signed_invoice.currency()","class":"lineCov","hits":"1","order":"6024","possible_hits":"1",},
{"lineNum":" 1017","line":"\t}","class":"linePartCov","hits":"1","order":"6028","possible_hits":"2",},
{"lineNum":" 1018","line":""},
{"lineNum":" 1019","line":"\t/// Returns the amount if specified in the invoice as pico <currency>."},
{"lineNum":" 1020","line":"\tpub fn amount_pico_btc(&self) -> Option<u64> {","class":"lineCov","hits":"1","order":"6008","possible_hits":"1",},
{"lineNum":" 1021","line":"\t\tself.signed_invoice.amount_pico_btc()","class":"lineCov","hits":"1","order":"6009","possible_hits":"1",},
{"lineNum":" 1022","line":"\t}","class":"linePartCov","hits":"1","order":"6021","possible_hits":"2",},
{"lineNum":" 1023","line":"}"},
{"lineNum":" 1024","line":""},
{"lineNum":" 1025","line":"impl From<TaggedField> for RawTaggedField {"},
{"lineNum":" 1026","line":"\tfn from(tf: TaggedField) -> Self {","class":"lineCov","hits":"1","order":"3816","possible_hits":"1",},
{"lineNum":" 1027","line":"\t\tRawTaggedField::KnownSemantics(tf)","class":"lineCov","hits":"1","order":"3817","possible_hits":"1",},
{"lineNum":" 1028","line":"\t}","class":"linePartCov","hits":"1","order":"3818","possible_hits":"2",},
{"lineNum":" 1029","line":"}"},
{"lineNum":" 1030","line":""},
{"lineNum":" 1031","line":"impl TaggedField {"},
{"lineNum":" 1032","line":"\t/// Numeric representation of the field\'s tag"},
{"lineNum":" 1033","line":"\tpub fn tag(&self) -> u5 {"},
{"lineNum":" 1034","line":"\t\tlet tag = match *self {"},
{"lineNum":" 1035","line":"\t\t\tTaggedField::PaymentHash(_) => constants::TAG_PAYMENT_HASH,"},
{"lineNum":" 1036","line":"\t\t\tTaggedField::Description(_) => constants::TAG_DESCRIPTION,"},
{"lineNum":" 1037","line":"\t\t\tTaggedField::PayeePubKey(_) => constants::TAG_PAYEE_PUB_KEY,"},
{"lineNum":" 1038","line":"\t\t\tTaggedField::DescriptionHash(_) => constants::TAG_DESCRIPTION_HASH,"},
{"lineNum":" 1039","line":"\t\t\tTaggedField::ExpiryTime(_) => constants::TAG_EXPIRY_TIME,"},
{"lineNum":" 1040","line":"\t\t\tTaggedField::MinFinalCltvExpiry(_) => constants::TAG_MIN_FINAL_CLTV_EXPIRY,"},
{"lineNum":" 1041","line":"\t\t\tTaggedField::Fallback(_) => constants::TAG_FALLBACK,"},
{"lineNum":" 1042","line":"\t\t\tTaggedField::Route(_) => constants::TAG_ROUTE,"},
{"lineNum":" 1043","line":"\t\t};"},
{"lineNum":" 1044","line":""},
{"lineNum":" 1045","line":"\t\tu5::try_from_u8(tag).expect(\"all tags defined are <32\")"},
{"lineNum":" 1046","line":"\t}"},
{"lineNum":" 1047","line":"}"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"impl Description {"},
{"lineNum":" 1050","line":""},
{"lineNum":" 1051","line":"\t/// Creates a new `Description` if `description` is at most 1023 __bytes__ long,"},
{"lineNum":" 1052","line":"\t/// returns `CreationError::DescriptionTooLong` otherwise"},
{"lineNum":" 1053","line":"\t///"},
{"lineNum":" 1054","line":"\t/// Please note that single characters may use more than one byte due to UTF8 encoding."},
{"lineNum":" 1055","line":"\tpub fn new(description: String) -> Result<Description, CreationError> {","class":"linePartCov","hits":"1","order":"1848","possible_hits":"2",},
{"lineNum":" 1056","line":"\t\tif description.len() > 639 {","class":"lineCov","hits":"3","order":"1849","possible_hits":"3",},
{"lineNum":" 1057","line":"\t\t\tErr(CreationError::DescriptionTooLong)","class":"lineCov","hits":"1","order":"4136","possible_hits":"1",},
{"lineNum":" 1058","line":"\t\t} else {"},
{"lineNum":" 1059","line":"\t\t\tOk(Description(description))","class":"lineCov","hits":"1","order":"1853","possible_hits":"1",},
{"lineNum":" 1060","line":"\t\t}"},
{"lineNum":" 1061","line":"\t}","class":"linePartCov","hits":"1","order":"1854","possible_hits":"2",},
{"lineNum":" 1062","line":""},
{"lineNum":" 1063","line":"\t/// Returns the underlying description `String`"},
{"lineNum":" 1064","line":"\tpub fn into_inner(self) -> String {"},
{"lineNum":" 1065","line":"\t\tself.0"},
{"lineNum":" 1066","line":"\t}"},
{"lineNum":" 1067","line":"}"},
{"lineNum":" 1068","line":""},
{"lineNum":" 1069","line":"impl Into<String> for Description {"},
{"lineNum":" 1070","line":"\tfn into(self) -> String {"},
{"lineNum":" 1071","line":"\t\tself.into_inner()"},
{"lineNum":" 1072","line":"\t}"},
{"lineNum":" 1073","line":"}"},
{"lineNum":" 1074","line":""},
{"lineNum":" 1075","line":"impl Deref for Description {"},
{"lineNum":" 1076","line":"\ttype Target = str;"},
{"lineNum":" 1077","line":""},
{"lineNum":" 1078","line":"\tfn deref(&self) -> &str {","class":"lineCov","hits":"1","order":"4881","possible_hits":"1",},
{"lineNum":" 1079","line":"\t\t&self.0","class":"lineCov","hits":"1","order":"4882","possible_hits":"1",},
{"lineNum":" 1080","line":"\t}","class":"linePartCov","hits":"1","order":"4883","possible_hits":"2",},
{"lineNum":" 1081","line":"}"},
{"lineNum":" 1082","line":""},
{"lineNum":" 1083","line":"impl From<PublicKey> for PayeePubKey {"},
{"lineNum":" 1084","line":"\tfn from(pk: PublicKey) -> Self {","class":"lineCov","hits":"1","order":"2671","possible_hits":"1",},
{"lineNum":" 1085","line":"\t\tPayeePubKey(pk)","class":"lineCov","hits":"1","order":"2672","possible_hits":"1",},
{"lineNum":" 1086","line":"\t}","class":"linePartCov","hits":"1","order":"2673","possible_hits":"2",},
{"lineNum":" 1087","line":"}"},
{"lineNum":" 1088","line":""},
{"lineNum":" 1089","line":"impl Deref for PayeePubKey {"},
{"lineNum":" 1090","line":"\ttype Target = PublicKey;"},
{"lineNum":" 1091","line":""},
{"lineNum":" 1092","line":"\tfn deref(&self) -> &PublicKey {","class":"lineCov","hits":"1","order":"5155","possible_hits":"1",},
{"lineNum":" 1093","line":"\t\t&self.0","class":"lineCov","hits":"1","order":"5156","possible_hits":"1",},
{"lineNum":" 1094","line":"\t}","class":"linePartCov","hits":"1","order":"5157","possible_hits":"2",},
{"lineNum":" 1095","line":"}"},
{"lineNum":" 1096","line":""},
{"lineNum":" 1097","line":"impl ExpiryTime {"},
{"lineNum":" 1098","line":"\t/// Construct an `ExpiryTime` from seconds. If there exists a `PositiveTimestamp` which would"},
{"lineNum":" 1099","line":"\t/// overflow on adding the `EpiryTime` to it then this function will return a"},
{"lineNum":" 1100","line":"\t/// `CreationError::ExpiryTimeOutOfBounds`."},
{"lineNum":" 1101","line":"\tpub fn from_seconds(seconds: u64) -> Result<ExpiryTime, CreationError> {","class":"lineCov","hits":"1","order":"2217","possible_hits":"1",},
{"lineNum":" 1102","line":"\t\tif seconds <= MAX_EXPIRY_TIME {","class":"lineCov","hits":"2","order":"2219","possible_hits":"2",},
{"lineNum":" 1103","line":"\t\t\tOk(ExpiryTime(Duration::from_secs(seconds)))","class":"lineCov","hits":"1","order":"2220","possible_hits":"1",},
{"lineNum":" 1104","line":"\t\t} else {"},
{"lineNum":" 1105","line":"\t\t\tErr(CreationError::ExpiryTimeOutOfBounds)","class":"lineCov","hits":"1","order":"6141","possible_hits":"1",},
{"lineNum":" 1106","line":"\t\t}"},
{"lineNum":" 1107","line":"\t}","class":"linePartCov","hits":"1","order":"2226","possible_hits":"2",},
{"lineNum":" 1108","line":""},
{"lineNum":" 1109","line":"\t/// Construct an `ExpiryTime` from a `Duration`. If there exists a `PositiveTimestamp` which"},
{"lineNum":" 1110","line":"\t/// would overflow on adding the `EpiryTime` to it then this function will return a"},
{"lineNum":" 1111","line":"\t/// `CreationError::ExpiryTimeOutOfBounds`."},
{"lineNum":" 1112","line":"\tpub fn from_duration(duration: Duration) -> Result<ExpiryTime, CreationError> {","class":"lineCov","hits":"1","order":"5116","possible_hits":"1",},
{"lineNum":" 1113","line":"\t\tif duration.as_secs() <= MAX_EXPIRY_TIME {","class":"lineCov","hits":"2","order":"5117","possible_hits":"2",},
{"lineNum":" 1114","line":"\t\t\tOk(ExpiryTime(duration))","class":"lineCov","hits":"1","order":"5118","possible_hits":"1",},
{"lineNum":" 1115","line":"\t\t} else {"},
{"lineNum":" 1116","line":"\t\t\tErr(CreationError::ExpiryTimeOutOfBounds)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1117","line":"\t\t}"},
{"lineNum":" 1118","line":"\t}","class":"linePartCov","hits":"1","order":"5119","possible_hits":"2",},
{"lineNum":" 1119","line":""},
{"lineNum":" 1120","line":"\t/// Returns the expiry time in seconds"},
{"lineNum":" 1121","line":"\tpub fn as_seconds(&self) -> u64 {","class":"lineCov","hits":"1","order":"5245","possible_hits":"1",},
{"lineNum":" 1122","line":"\t\tself.0.as_secs()","class":"lineCov","hits":"1","order":"5246","possible_hits":"1",},
{"lineNum":" 1123","line":"\t}","class":"linePartCov","hits":"1","order":"5247","possible_hits":"2",},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":"\t/// Returns a reference to the underlying `Duration` (=expiry time)"},
{"lineNum":" 1126","line":"\tpub fn as_duration(&self) -> &Duration {","class":"lineCov","hits":"1","order":"6132","possible_hits":"1",},
{"lineNum":" 1127","line":"\t\t&self.0","class":"lineCov","hits":"1","order":"6133","possible_hits":"1",},
{"lineNum":" 1128","line":"\t}","class":"linePartCov","hits":"1","order":"6134","possible_hits":"2",},
{"lineNum":" 1129","line":"}"},
{"lineNum":" 1130","line":""},
{"lineNum":" 1131","line":"impl Route {"},
{"lineNum":" 1132","line":"\t/// Create a new (partial) route from a list of hops"},
{"lineNum":" 1133","line":"\tpub fn new(hops: Vec<RouteHop>) -> Result<Route, CreationError> {","class":"linePartCov","hits":"1","order":"4296","possible_hits":"2",},
{"lineNum":" 1134","line":"\t\tif hops.len() <= 12 {","class":"lineCov","hits":"3","order":"4298","possible_hits":"3",},
{"lineNum":" 1135","line":"\t\t\tOk(Route(hops))","class":"lineCov","hits":"1","order":"5133","possible_hits":"1",},
{"lineNum":" 1136","line":"\t\t} else {"},
{"lineNum":" 1137","line":"\t\t\tErr(CreationError::RouteTooLong)","class":"lineCov","hits":"1","order":"4301","possible_hits":"1",},
{"lineNum":" 1138","line":"\t\t}"},
{"lineNum":" 1139","line":"\t}","class":"linePartCov","hits":"1","order":"4302","possible_hits":"2",},
{"lineNum":" 1140","line":""},
{"lineNum":" 1141","line":"\t/// Returrn the underlying vector of hops"},
{"lineNum":" 1142","line":"\tpub fn into_inner(self) -> Vec<RouteHop> {"},
{"lineNum":" 1143","line":"\t\tself.0"},
{"lineNum":" 1144","line":"\t}"},
{"lineNum":" 1145","line":"}"},
{"lineNum":" 1146","line":""},
{"lineNum":" 1147","line":"impl Into<Vec<RouteHop>> for Route {"},
{"lineNum":" 1148","line":"\tfn into(self) -> Vec<RouteHop> {"},
{"lineNum":" 1149","line":"\t\tself.into_inner()"},
{"lineNum":" 1150","line":"\t}"},
{"lineNum":" 1151","line":"}"},
{"lineNum":" 1152","line":""},
{"lineNum":" 1153","line":"impl Deref for Route {"},
{"lineNum":" 1154","line":"\ttype Target = Vec<RouteHop>;"},
{"lineNum":" 1155","line":""},
{"lineNum":" 1156","line":"\tfn deref(&self) -> &Vec<RouteHop> {","class":"lineCov","hits":"1","order":"5270","possible_hits":"1",},
{"lineNum":" 1157","line":"\t\t&self.0","class":"lineCov","hits":"1","order":"5271","possible_hits":"1",},
{"lineNum":" 1158","line":"\t}","class":"linePartCov","hits":"1","order":"5272","possible_hits":"2",},
{"lineNum":" 1159","line":"}"},
{"lineNum":" 1160","line":""},
{"lineNum":" 1161","line":"impl Deref for Signature {"},
{"lineNum":" 1162","line":"\ttype Target = RecoverableSignature;"},
{"lineNum":" 1163","line":""},
{"lineNum":" 1164","line":"\tfn deref(&self) -> &RecoverableSignature {","class":"lineCov","hits":"1","order":"5660","possible_hits":"1",},
{"lineNum":" 1165","line":"\t\t&self.0","class":"lineCov","hits":"1","order":"5661","possible_hits":"1",},
{"lineNum":" 1166","line":"\t}","class":"linePartCov","hits":"1","order":"5662","possible_hits":"2",},
{"lineNum":" 1167","line":"}"},
{"lineNum":" 1168","line":""},
{"lineNum":" 1169","line":"impl Deref for SignedRawInvoice {"},
{"lineNum":" 1170","line":"\ttype Target = RawInvoice;"},
{"lineNum":" 1171","line":""},
{"lineNum":" 1172","line":"\tfn deref(&self) -> &RawInvoice {","class":"lineCov","hits":"1","order":"6010","possible_hits":"1",},
{"lineNum":" 1173","line":"\t\t&self.raw_invoice","class":"lineCov","hits":"1","order":"6011","possible_hits":"1",},
{"lineNum":" 1174","line":"\t}","class":"linePartCov","hits":"1","order":"6012","possible_hits":"2",},
{"lineNum":" 1175","line":"}"},
{"lineNum":" 1176","line":""},
{"lineNum":" 1177","line":"/// Errors that may occur when constructing a new `RawInvoice` or `Invoice`"},
{"lineNum":" 1178","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"2","order":"4163","possible_hits":"6",},
{"lineNum":" 1179","line":"pub enum CreationError {"},
{"lineNum":" 1180","line":"\t/// The supplied description string was longer than 639 __bytes__ (see [`Description::new(…)`](./struct.Description.html#method.new))"},
{"lineNum":" 1181","line":"\tDescriptionTooLong,"},
{"lineNum":" 1182","line":""},
{"lineNum":" 1183","line":"\t/// The specified route has too many hops and can\'t be encoded"},
{"lineNum":" 1184","line":"\tRouteTooLong,"},
{"lineNum":" 1185","line":""},
{"lineNum":" 1186","line":"\t/// The unix timestamp of the supplied date is <0 or can\'t be represented as `SystemTime`"},
{"lineNum":" 1187","line":"\tTimestampOutOfBounds,"},
{"lineNum":" 1188","line":""},
{"lineNum":" 1189","line":"\t/// The supplied expiry time could cause an overflow if added to a `PositiveTimestamp`"},
{"lineNum":" 1190","line":"\tExpiryTimeOutOfBounds,"},
{"lineNum":" 1191","line":"}"},
{"lineNum":" 1192","line":""},
{"lineNum":" 1193","line":"/// Errors that may occur when converting a `RawInvoice` to an `Invoice`. They relate to the"},
{"lineNum":" 1194","line":"/// requirements sections in BOLT #11"},
{"lineNum":" 1195","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1196","line":"pub enum SemanticError {"},
{"lineNum":" 1197","line":"\t/// The invoice is missing the mandatory payment hash"},
{"lineNum":" 1198","line":"\tNoPaymentHash,"},
{"lineNum":" 1199","line":""},
{"lineNum":" 1200","line":"\t/// The invoice has multiple payment hashes which isn\'t allowed"},
{"lineNum":" 1201","line":"\tMultiplePaymentHashes,"},
{"lineNum":" 1202","line":""},
{"lineNum":" 1203","line":"\t/// No description or description hash are part of the invoice"},
{"lineNum":" 1204","line":"\tNoDescription,"},
{"lineNum":" 1205","line":""},
{"lineNum":" 1206","line":"\t/// The invoice contains multiple descriptions and/or description hashes which isn\'t allowed"},
{"lineNum":" 1207","line":"\tMultipleDescriptions,"},
{"lineNum":" 1208","line":""},
{"lineNum":" 1209","line":"\t/// The recovery id doesn\'t fit the signature/pub key"},
{"lineNum":" 1210","line":"\tInvalidRecoveryId,"},
{"lineNum":" 1211","line":""},
{"lineNum":" 1212","line":"\t/// The invoice\'s signature is invalid"},
{"lineNum":" 1213","line":"\tInvalidSignature,"},
{"lineNum":" 1214","line":"}"},
{"lineNum":" 1215","line":""},
{"lineNum":" 1216","line":"/// When signing using a fallible method either an user-supplied `SignError` or a `CreationError`"},
{"lineNum":" 1217","line":"/// may occur."},
{"lineNum":" 1218","line":"#[derive(Eq, PartialEq, Debug, Clone)]","class":"linePartCov","hits":"2","order":"4918","possible_hits":"9",},
{"lineNum":" 1219","line":"pub enum SignOrCreationError<S> {"},
{"lineNum":" 1220","line":"\t/// An error occurred during signing"},
{"lineNum":" 1221","line":"\tSignError(S),","class":"linePartCov","hits":"1","order":"4919","possible_hits":"3",},
{"lineNum":" 1222","line":""},
{"lineNum":" 1223","line":"\t/// An error occurred while building the transaction"},
{"lineNum":" 1224","line":"\tCreationError(CreationError),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1225","line":"}"},
{"lineNum":" 1226","line":""},
{"lineNum":" 1227","line":"#[cfg(test)]"},
{"lineNum":" 1228","line":"mod test {"},
{"lineNum":" 1229","line":"\tuse bitcoin_hashes::hex::FromHex;"},
{"lineNum":" 1230","line":"\tuse bitcoin_hashes::{Hash, sha256};"},
{"lineNum":" 1231","line":""},
{"lineNum":" 1232","line":"\t#[test]"},
{"lineNum":" 1233","line":"\tfn test_system_time_bounds_assumptions() {","class":"lineCov","hits":"3","order":"6110","possible_hits":"3",},
{"lineNum":" 1234","line":"\t\t::check_platform();","class":"lineCov","hits":"1","order":"6111","possible_hits":"1",},
{"lineNum":" 1235","line":""},
{"lineNum":" 1236","line":"        assert_eq!(","class":"lineCov","hits":"1","order":"6139","possible_hits":"1",},
{"lineNum":" 1237","line":"            ::PositiveTimestamp::from_unix_timestamp(::SYSTEM_TIME_MAX_UNIX_TIMESTAMP + 1),","class":"linePartCov","hits":"1","order":"6137","possible_hits":"2",},
{"lineNum":" 1238","line":"            Err(::CreationError::TimestampOutOfBounds)"},
{"lineNum":" 1239","line":"        );"},
{"lineNum":" 1240","line":""},
{"lineNum":" 1241","line":"        assert_eq!(","class":"lineCov","hits":"1","order":"6142","possible_hits":"1",},
{"lineNum":" 1242","line":"            ::ExpiryTime::from_seconds(::MAX_EXPIRY_TIME + 1),","class":"linePartCov","hits":"1","order":"6140","possible_hits":"3",},
{"lineNum":" 1243","line":"            Err(::CreationError::ExpiryTimeOutOfBounds)"},
{"lineNum":" 1244","line":"        );"},
{"lineNum":" 1245","line":"\t}","class":"linePartCov","hits":"2","order":"6143","possible_hits":"3",},
{"lineNum":" 1246","line":""},
{"lineNum":" 1247","line":"\t#[test]"},
{"lineNum":" 1248","line":"\tfn test_calc_invoice_hash() {","class":"linePartCov","hits":"3","order":"4923","possible_hits":"4",},
{"lineNum":" 1249","line":"\t\tuse ::{RawInvoice, RawHrp, RawDataPart, Currency, PositiveTimestamp};"},
{"lineNum":" 1250","line":"\t\tuse ::TaggedField::*;"},
{"lineNum":" 1251","line":""},
{"lineNum":" 1252","line":"\t\tlet invoice = RawInvoice {","class":"lineCov","hits":"1","order":"4934","possible_hits":"1",},
{"lineNum":" 1253","line":"\t\t\thrp: RawHrp {","class":"lineCov","hits":"1","order":"4927","possible_hits":"1",},
{"lineNum":" 1254","line":"\t\t\t\tcurrency: Currency::Bitcoin,","class":"lineCov","hits":"1","order":"4924","possible_hits":"1",},
{"lineNum":" 1255","line":"\t\t\t\traw_amount: None,","class":"lineCov","hits":"1","order":"4925","possible_hits":"1",},
{"lineNum":" 1256","line":"\t\t\t\tsi_prefix: None,","class":"lineCov","hits":"1","order":"4926","possible_hits":"1",},
{"lineNum":" 1257","line":"\t\t\t},"},
{"lineNum":" 1258","line":"\t\t\tdata: RawDataPart {","class":"lineCov","hits":"1","order":"4933","possible_hits":"1",},
{"lineNum":" 1259","line":"\t\t\t\ttimestamp: PositiveTimestamp::from_unix_timestamp(1496314658).unwrap(),","class":"lineCov","hits":"2","order":"4928","possible_hits":"2",},
{"lineNum":" 1260","line":"\t\t\t\ttagged_fields: vec![","class":"linePartCov","hits":"2","order":"4929","possible_hits":"4",},
{"lineNum":" 1261","line":"\t\t\t\t\tPaymentHash(::Sha256(sha256::Hash::from_hex(","class":"lineCov","hits":"1","order":"4930","possible_hits":"1",},
{"lineNum":" 1262","line":"\t\t\t\t\t\t\"0001020304050607080900010203040506070809000102030405060708090102\""},
{"lineNum":" 1263","line":"\t\t\t\t\t).unwrap())).into(),"},
{"lineNum":" 1264","line":"\t\t\t\t\tDescription(::Description::new(","class":"lineCov","hits":"1","order":"4932","possible_hits":"1",},
{"lineNum":" 1265","line":"\t\t\t\t\t\t\"Please consider supporting this project\".to_owned()","class":"lineCov","hits":"1","order":"4931","possible_hits":"1",},
{"lineNum":" 1266","line":"\t\t\t\t\t).unwrap()).into(),"},
{"lineNum":" 1267","line":"\t\t\t\t],"},
{"lineNum":" 1268","line":"\t\t\t},"},
{"lineNum":" 1269","line":"\t\t};"},
{"lineNum":" 1270","line":""},
{"lineNum":" 1271","line":"\t\tlet expected_hash = [","class":"lineCov","hits":"1","order":"4935","possible_hits":"1",},
{"lineNum":" 1272","line":"\t\t\t0xc3, 0xd4, 0xe8, 0x3f, 0x64, 0x6f, 0xa7, 0x9a, 0x39, 0x3d, 0x75, 0x27, 0x7b, 0x1d,"},
{"lineNum":" 1273","line":"\t\t\t0x85, 0x8d, 0xb1, 0xd1, 0xf7, 0xab, 0x71, 0x37, 0xdc, 0xb7, 0x83, 0x5d, 0xb2, 0xec,"},
{"lineNum":" 1274","line":"\t\t\t0xd5, 0x18, 0xe1, 0xc9"},
{"lineNum":" 1275","line":"\t\t];"},
{"lineNum":" 1276","line":""},
{"lineNum":" 1277","line":"\t\tassert_eq!(invoice.hash(), expected_hash)","class":"lineCov","hits":"2","order":"4936","possible_hits":"2",},
{"lineNum":" 1278","line":"\t}","class":"linePartCov","hits":"2","order":"4937","possible_hits":"4",},
{"lineNum":" 1279","line":""},
{"lineNum":" 1280","line":"\t#[test]"},
{"lineNum":" 1281","line":"\tfn test_check_signature() {","class":"linePartCov","hits":"3","order":"4958","possible_hits":"4",},
{"lineNum":" 1282","line":"\t\tuse TaggedField::*;"},
{"lineNum":" 1283","line":"\t\tuse secp256k1::Secp256k1;"},
{"lineNum":" 1284","line":"\t\tuse secp256k1::recovery::{RecoveryId, RecoverableSignature};"},
{"lineNum":" 1285","line":"\t\tuse secp256k1::key::{SecretKey, PublicKey};"},
{"lineNum":" 1286","line":"\t\tuse {SignedRawInvoice, Signature, RawInvoice, RawHrp, RawDataPart, Currency, Sha256,"},
{"lineNum":" 1287","line":"\t\t\t PositiveTimestamp};"},
{"lineNum":" 1288","line":""},
{"lineNum":" 1289","line":"\t\tlet invoice = SignedRawInvoice {","class":"lineCov","hits":"2","order":"4959","possible_hits":"2",},
{"lineNum":" 1290","line":"\t\t\traw_invoice: RawInvoice {","class":"lineCov","hits":"1","order":"4971","possible_hits":"1",},
{"lineNum":" 1291","line":"\t\t\t\thrp: RawHrp {","class":"lineCov","hits":"1","order":"4963","possible_hits":"1",},
{"lineNum":" 1292","line":"\t\t\t\t\tcurrency: Currency::Bitcoin,","class":"lineCov","hits":"1","order":"4960","possible_hits":"1",},
{"lineNum":" 1293","line":"\t\t\t\t\traw_amount: None,","class":"lineCov","hits":"1","order":"4961","possible_hits":"1",},
{"lineNum":" 1294","line":"\t\t\t\t\tsi_prefix: None,","class":"lineCov","hits":"1","order":"4962","possible_hits":"1",},
{"lineNum":" 1295","line":"\t\t\t\t},"},
{"lineNum":" 1296","line":"\t\t\t\tdata: RawDataPart {","class":"lineCov","hits":"1","order":"4970","possible_hits":"1",},
{"lineNum":" 1297","line":"\t\t\t\t\ttimestamp: PositiveTimestamp::from_unix_timestamp(1496314658).unwrap(),","class":"lineCov","hits":"2","order":"4964","possible_hits":"2",},
{"lineNum":" 1298","line":"\t\t\t\t\ttagged_fields: vec ! [","class":"linePartCov","hits":"2","order":"4965","possible_hits":"4",},
{"lineNum":" 1299","line":"\t\t\t\t\t\tPaymentHash(Sha256(sha256::Hash::from_hex(","class":"lineCov","hits":"1","order":"4966","possible_hits":"1",},
{"lineNum":" 1300","line":"\t\t\t\t\t\t\t\"0001020304050607080900010203040506070809000102030405060708090102\""},
{"lineNum":" 1301","line":"\t\t\t\t\t\t).unwrap())).into(),"},
{"lineNum":" 1302","line":"\t\t\t\t\t\tDescription(","class":"lineCov","hits":"1","order":"4969","possible_hits":"1",},
{"lineNum":" 1303","line":"\t\t\t\t\t\t\t::Description::new(","class":"lineCov","hits":"1","order":"4968","possible_hits":"1",},
{"lineNum":" 1304","line":"\t\t\t\t\t\t\t\t\"Please consider supporting this project\".to_owned()","class":"lineCov","hits":"1","order":"4967","possible_hits":"1",},
{"lineNum":" 1305","line":"\t\t\t\t\t\t\t).unwrap()"},
{"lineNum":" 1306","line":"\t\t\t\t\t\t).into(),"},
{"lineNum":" 1307","line":"\t\t\t\t\t],"},
{"lineNum":" 1308","line":"\t\t\t\t},"},
{"lineNum":" 1309","line":"\t\t\t},"},
{"lineNum":" 1310","line":"\t\t\thash: [","class":"lineCov","hits":"1","order":"4972","possible_hits":"1",},
{"lineNum":" 1311","line":"\t\t\t\t0xc3, 0xd4, 0xe8, 0x3f, 0x64, 0x6f, 0xa7, 0x9a, 0x39, 0x3d, 0x75, 0x27,"},
{"lineNum":" 1312","line":"\t\t\t\t0x7b, 0x1d, 0x85, 0x8d, 0xb1, 0xd1, 0xf7, 0xab, 0x71, 0x37, 0xdc, 0xb7,"},
{"lineNum":" 1313","line":"\t\t\t\t0x83, 0x5d, 0xb2, 0xec, 0xd5, 0x18, 0xe1, 0xc9"},
{"lineNum":" 1314","line":"\t\t\t],"},
{"lineNum":" 1315","line":"\t\t\tsignature: Signature(RecoverableSignature::from_compact(","class":"lineCov","hits":"1","order":"4974","possible_hits":"1",},
{"lineNum":" 1316","line":"\t\t\t\t& ["},
{"lineNum":" 1317","line":"\t\t\t\t\t0x38u8, 0xec, 0x68, 0x91, 0x34, 0x5e, 0x20, 0x41, 0x45, 0xbe, 0x8a,"},
{"lineNum":" 1318","line":"\t\t\t\t\t0x3a, 0x99, 0xde, 0x38, 0xe9, 0x8a, 0x39, 0xd6, 0xa5, 0x69, 0x43,"},
{"lineNum":" 1319","line":"\t\t\t\t\t0x4e, 0x18, 0x45, 0xc8, 0xaf, 0x72, 0x05, 0xaf, 0xcf, 0xcc, 0x7f,"},
{"lineNum":" 1320","line":"\t\t\t\t\t0x42, 0x5f, 0xcd, 0x14, 0x63, 0xe9, 0x3c, 0x32, 0x88, 0x1e, 0xad,"},
{"lineNum":" 1321","line":"\t\t\t\t\t0x0d, 0x6e, 0x35, 0x6d, 0x46, 0x7e, 0xc8, 0xc0, 0x25, 0x53, 0xf9,"},
{"lineNum":" 1322","line":"\t\t\t\t\t0xaa, 0xb1, 0x5e, 0x57, 0x38, 0xb1, 0x1f, 0x12, 0x7f"},
{"lineNum":" 1323","line":"\t\t\t\t],"},
{"lineNum":" 1324","line":"\t\t\t\tRecoveryId::from_i32(0).unwrap()","class":"lineCov","hits":"2","order":"4973","possible_hits":"2",},
{"lineNum":" 1325","line":"\t\t\t).unwrap()),"},
{"lineNum":" 1326","line":"\t\t};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1327","line":""},
{"lineNum":" 1328","line":"\t\tassert!(invoice.check_signature());","class":"linePartCov","hits":"1","order":"4975","possible_hits":"2",},
{"lineNum":" 1329","line":""},
{"lineNum":" 1330","line":"\t\tlet private_key = SecretKey::from_slice(","class":"lineCov","hits":"1","order":"5994","possible_hits":"1",},
{"lineNum":" 1331","line":"\t\t\t&[","class":"lineCov","hits":"1","order":"5993","possible_hits":"1",},
{"lineNum":" 1332","line":"\t\t\t\t0xe1, 0x26, 0xf6, 0x8f, 0x7e, 0xaf, 0xcc, 0x8b, 0x74, 0xf5, 0x4d, 0x26, 0x9f, 0xe2,"},
{"lineNum":" 1333","line":"\t\t\t\t0x06, 0xbe, 0x71, 0x50, 0x00, 0xf9, 0x4d, 0xac, 0x06, 0x7d, 0x1c, 0x04, 0xa8, 0xca,"},
{"lineNum":" 1334","line":"\t\t\t\t0x3b, 0x2d, 0xb7, 0x34"},
{"lineNum":" 1335","line":"\t\t\t][..]"},
{"lineNum":" 1336","line":"\t\t).unwrap();"},
{"lineNum":" 1337","line":"\t\tlet public_key = PublicKey::from_secret_key(&Secp256k1::new(), &private_key);","class":"lineCov","hits":"1","order":"5995","possible_hits":"1",},
{"lineNum":" 1338","line":""},
{"lineNum":" 1339","line":"\t\tassert_eq!(invoice.recover_payee_pub_key(), Ok(::PayeePubKey(public_key)));","class":"lineCov","hits":"1","order":"5997","possible_hits":"1",},
{"lineNum":" 1340","line":""},
{"lineNum":" 1341","line":"\t\tlet (raw_invoice, _, _) = invoice.into_parts();","class":"lineCov","hits":"1","order":"6144","possible_hits":"1",},
{"lineNum":" 1342","line":"\t\tlet new_signed = raw_invoice.sign::<_, ()>(|hash| {","class":"linePartCov","hits":"3","order":"6148","possible_hits":"4",},
{"lineNum":" 1343","line":"\t\t\tOk(Secp256k1::new().sign_recoverable(hash, &private_key))","class":"lineCov","hits":"2","order":"6149","possible_hits":"2",},
{"lineNum":" 1344","line":"\t\t}).unwrap();","class":"lineCov","hits":"1","order":"6150","possible_hits":"1",},
{"lineNum":" 1345","line":""},
{"lineNum":" 1346","line":"\t\tassert!(new_signed.check_signature());","class":"linePartCov","hits":"1","order":"6151","possible_hits":"2",},
{"lineNum":" 1347","line":"\t}","class":"linePartCov","hits":"2","order":"6152","possible_hits":"7",},
{"lineNum":" 1348","line":""},
{"lineNum":" 1349","line":"\t#[test]"},
{"lineNum":" 1350","line":"\tfn test_builder_amount() {","class":"linePartCov","hits":"3","order":"3752","possible_hits":"4",},
{"lineNum":" 1351","line":"\t\tuse ::*;"},
{"lineNum":" 1352","line":""},
{"lineNum":" 1353","line":"\t\tlet builder = InvoiceBuilder::new(Currency::Bitcoin)","class":"lineCov","hits":"4","order":"3756","possible_hits":"4",},
{"lineNum":" 1354","line":"\t\t\t.description(\"Test\".into())","class":"linePartCov","hits":"2","order":"3800","possible_hits":"3",},
{"lineNum":" 1355","line":"\t\t\t.payment_hash(sha256::Hash::from_slice(&[0;32][..]).unwrap())","class":"linePartCov","hits":"2","order":"3852","possible_hits":"3",},
{"lineNum":" 1356","line":"\t\t\t.current_timestamp();"},
{"lineNum":" 1357","line":""},
{"lineNum":" 1358","line":"\t\tlet invoice = builder.clone()","class":"lineCov","hits":"2","order":"3878","possible_hits":"2",},
{"lineNum":" 1359","line":"\t\t\t.amount_pico_btc(15000)"},
{"lineNum":" 1360","line":"\t\t\t.build_raw()"},
{"lineNum":" 1361","line":"\t\t\t.unwrap();"},
{"lineNum":" 1362","line":""},
{"lineNum":" 1363","line":"\t\tassert_eq!(invoice.hrp.si_prefix, Some(SiPrefix::Nano));","class":"linePartCov","hits":"1","order":"3980","possible_hits":"2",},
{"lineNum":" 1364","line":"\t\tassert_eq!(invoice.hrp.raw_amount, Some(15));","class":"lineCov","hits":"1","order":"3982","possible_hits":"1",},
{"lineNum":" 1365","line":""},
{"lineNum":" 1366","line":""},
{"lineNum":" 1367","line":"\t\tlet invoice = builder.clone()","class":"lineCov","hits":"1","order":"3983","possible_hits":"1",},
{"lineNum":" 1368","line":"\t\t\t.amount_pico_btc(1500)"},
{"lineNum":" 1369","line":"\t\t\t.build_raw()"},
{"lineNum":" 1370","line":"\t\t\t.unwrap();"},
{"lineNum":" 1371","line":""},
{"lineNum":" 1372","line":"\t\tassert_eq!(invoice.hrp.si_prefix, Some(SiPrefix::Pico));","class":"linePartCov","hits":"1","order":"3985","possible_hits":"2",},
{"lineNum":" 1373","line":"\t\tassert_eq!(invoice.hrp.raw_amount, Some(1500));","class":"lineCov","hits":"1","order":"3986","possible_hits":"1",},
{"lineNum":" 1374","line":"\t}","class":"linePartCov","hits":"2","order":"3987","possible_hits":"6",},
{"lineNum":" 1375","line":""},
{"lineNum":" 1376","line":"\t#[test]"},
{"lineNum":" 1377","line":"\tfn test_builder_fail() {","class":"linePartCov","hits":"3","order":"4003","possible_hits":"4",},
{"lineNum":" 1378","line":"\t\tuse ::*;"},
{"lineNum":" 1379","line":"\t\tuse std::iter::FromIterator;"},
{"lineNum":" 1380","line":"\t\tuse secp256k1::key::PublicKey;"},
{"lineNum":" 1381","line":""},
{"lineNum":" 1382","line":"\t\tlet builder = InvoiceBuilder::new(Currency::Bitcoin)","class":"lineCov","hits":"3","order":"4004","possible_hits":"3",},
{"lineNum":" 1383","line":"\t\t\t.payment_hash(sha256::Hash::from_slice(&[0;32][..]).unwrap())","class":"linePartCov","hits":"2","order":"4005","possible_hits":"3",},
{"lineNum":" 1384","line":"\t\t\t.current_timestamp();"},
{"lineNum":" 1385","line":""},
{"lineNum":" 1386","line":"\t\tlet too_long_string = String::from_iter(","class":"lineCov","hits":"1","order":"4030","possible_hits":"1",},
{"lineNum":" 1387","line":"\t\t\t(0..1024).map(|_| \'?\')","class":"linePartCov","hits":"3","order":"4024","possible_hits":"4",},
{"lineNum":" 1388","line":"\t\t);","class":"lineCov","hits":"1","order":"4114","possible_hits":"1",},
{"lineNum":" 1389","line":""},
{"lineNum":" 1390","line":"\t\tlet long_desc_res = builder.clone()","class":"lineCov","hits":"2","order":"4116","possible_hits":"2",},
{"lineNum":" 1391","line":"\t\t\t.description(too_long_string)","class":"lineCov","hits":"1","order":"4131","possible_hits":"1",},
{"lineNum":" 1392","line":"\t\t\t.build_raw();"},
{"lineNum":" 1393","line":"\t\tassert_eq!(long_desc_res, Err(CreationError::DescriptionTooLong));","class":"linePartCov","hits":"1","order":"4158","possible_hits":"2",},
{"lineNum":" 1394","line":""},
{"lineNum":" 1395","line":"\t\tlet route_hop = RouteHop {","class":"lineCov","hits":"1","order":"4171","possible_hits":"1",},
{"lineNum":" 1396","line":"\t\t\tpubkey: PublicKey::from_slice(","class":"lineCov","hits":"1","order":"4168","possible_hits":"1",},
{"lineNum":" 1397","line":"\t\t\t\t\t&[","class":"lineCov","hits":"1","order":"4166","possible_hits":"1",},
{"lineNum":" 1398","line":"\t\t\t\t\t\t0x03, 0x9e, 0x03, 0xa9, 0x01, 0xb8, 0x55, 0x34, 0xff, 0x1e, 0x92, 0xc4,"},
{"lineNum":" 1399","line":"\t\t\t\t\t\t0x3c, 0x74, 0x43, 0x1f, 0x7c, 0xe7, 0x20, 0x46, 0x06, 0x0f, 0xcf, 0x7a,"},
{"lineNum":" 1400","line":"\t\t\t\t\t\t0x95, 0xc3, 0x7e, 0x14, 0x8f, 0x78, 0xc7, 0x72, 0x55"},
{"lineNum":" 1401","line":"\t\t\t\t\t][..]"},
{"lineNum":" 1402","line":"\t\t\t\t).unwrap(),"},
{"lineNum":" 1403","line":"\t\t\tshort_channel_id: [0; 8],","class":"lineCov","hits":"1","order":"4169","possible_hits":"1",},
{"lineNum":" 1404","line":"\t\t\tfee_base_msat: 0,"},
{"lineNum":" 1405","line":"\t\t\tfee_proportional_millionths: 0,"},
{"lineNum":" 1406","line":"\t\t\tcltv_expiry_delta: 0,"},
{"lineNum":" 1407","line":"\t\t};"},
{"lineNum":" 1408","line":"\t\tlet too_long_route = vec![route_hop; 13];","class":"lineCov","hits":"1","order":"4173","possible_hits":"1",},
{"lineNum":" 1409","line":"\t\tlet long_route_res = builder.clone()","class":"lineCov","hits":"3","order":"4264","possible_hits":"3",},
{"lineNum":" 1410","line":"\t\t\t.description(\"Test\".into())","class":"linePartCov","hits":"2","order":"4266","possible_hits":"3",},
{"lineNum":" 1411","line":"\t\t\t.route(too_long_route)","class":"lineCov","hits":"1","order":"4289","possible_hits":"1",},
{"lineNum":" 1412","line":"\t\t\t.build_raw();"},
{"lineNum":" 1413","line":"\t\tassert_eq!(long_route_res, Err(CreationError::RouteTooLong));","class":"linePartCov","hits":"1","order":"4314","possible_hits":"2",},
{"lineNum":" 1414","line":""},
{"lineNum":" 1415","line":"\t\tlet sign_error_res = builder.clone()","class":"lineCov","hits":"3","order":"4316","possible_hits":"3",},
{"lineNum":" 1416","line":"\t\t\t.description(\"Test\".into())","class":"linePartCov","hits":"2","order":"4318","possible_hits":"3",},
{"lineNum":" 1417","line":"\t\t\t.try_build_signed(|_| {","class":"lineCov","hits":"1","order":"4907","possible_hits":"1",},
{"lineNum":" 1418","line":"\t\t\t\tErr(\"ImaginaryError\")","class":"lineCov","hits":"1","order":"4908","possible_hits":"1",},
{"lineNum":" 1419","line":"\t\t\t});","class":"linePartCov","hits":"1","order":"4909","possible_hits":"2",},
{"lineNum":" 1420","line":"\t\tassert_eq!(sign_error_res, Err(SignOrCreationError::SignError(\"ImaginaryError\")));","class":"linePartCov","hits":"1","order":"4917","possible_hits":"2",},
{"lineNum":" 1421","line":"\t}","class":"linePartCov","hits":"2","order":"4920","possible_hits":"8",},
{"lineNum":" 1422","line":""},
{"lineNum":" 1423","line":"\t#[test]"},
{"lineNum":" 1424","line":"\tfn test_builder_ok() {","class":"linePartCov","hits":"3","order":"4006","possible_hits":"4",},
{"lineNum":" 1425","line":"\t\tuse ::*;"},
{"lineNum":" 1426","line":"\t\tuse secp256k1::Secp256k1;"},
{"lineNum":" 1427","line":"\t\tuse secp256k1::key::{SecretKey, PublicKey};"},
{"lineNum":" 1428","line":"\t\tuse std::time::{UNIX_EPOCH, Duration};"},
{"lineNum":" 1429","line":""},
{"lineNum":" 1430","line":"\t\tlet secp_ctx = Secp256k1::new();","class":"lineCov","hits":"1","order":"4007","possible_hits":"1",},
{"lineNum":" 1431","line":""},
{"lineNum":" 1432","line":"\t\tlet private_key = SecretKey::from_slice(","class":"lineCov","hits":"2","order":"5026","possible_hits":"2",},
{"lineNum":" 1433","line":"\t\t\t&[","class":"lineCov","hits":"1","order":"5025","possible_hits":"1",},
{"lineNum":" 1434","line":"\t\t\t\t0xe1, 0x26, 0xf6, 0x8f, 0x7e, 0xaf, 0xcc, 0x8b, 0x74, 0xf5, 0x4d, 0x26, 0x9f, 0xe2,"},
{"lineNum":" 1435","line":"\t\t\t\t0x06, 0xbe, 0x71, 0x50, 0x00, 0xf9, 0x4d, 0xac, 0x06, 0x7d, 0x1c, 0x04, 0xa8, 0xca,"},
{"lineNum":" 1436","line":"\t\t\t\t0x3b, 0x2d, 0xb7, 0x34"},
{"lineNum":" 1437","line":"\t\t\t][..]"},
{"lineNum":" 1438","line":"\t\t).unwrap();"},
{"lineNum":" 1439","line":"\t\tlet public_key = PublicKey::from_secret_key(&secp_ctx, &private_key);","class":"lineCov","hits":"1","order":"5044","possible_hits":"1",},
{"lineNum":" 1440","line":""},
{"lineNum":" 1441","line":"\t\tlet route_1 = vec![","class":"lineCov","hits":"2","order":"5086","possible_hits":"2",},
{"lineNum":" 1442","line":"\t\t\tRouteHop {","class":"lineCov","hits":"1","order":"5089","possible_hits":"1",},
{"lineNum":" 1443","line":"\t\t\t\tpubkey: public_key.clone(),","class":"lineCov","hits":"1","order":"5087","possible_hits":"1",},
{"lineNum":" 1444","line":"\t\t\t\tshort_channel_id: [123; 8],","class":"lineCov","hits":"1","order":"5088","possible_hits":"1",},
{"lineNum":" 1445","line":"\t\t\t\tfee_base_msat: 2,"},
{"lineNum":" 1446","line":"\t\t\t\tfee_proportional_millionths: 1,"},
{"lineNum":" 1447","line":"\t\t\t\tcltv_expiry_delta: 145,"},
{"lineNum":" 1448","line":"\t\t\t},"},
{"lineNum":" 1449","line":"\t\t\tRouteHop {","class":"lineCov","hits":"1","order":"5092","possible_hits":"1",},
{"lineNum":" 1450","line":"\t\t\t\tpubkey: public_key.clone(),","class":"lineCov","hits":"1","order":"5090","possible_hits":"1",},
{"lineNum":" 1451","line":"\t\t\t\tshort_channel_id: [42; 8],","class":"lineCov","hits":"1","order":"5091","possible_hits":"1",},
{"lineNum":" 1452","line":"\t\t\t\tfee_base_msat: 3,"},
{"lineNum":" 1453","line":"\t\t\t\tfee_proportional_millionths: 2,"},
{"lineNum":" 1454","line":"\t\t\t\tcltv_expiry_delta: 146,"},
{"lineNum":" 1455","line":"\t\t\t}"},
{"lineNum":" 1456","line":"\t\t];"},
{"lineNum":" 1457","line":""},
{"lineNum":" 1458","line":"\t\tlet route_2 = vec![","class":"lineCov","hits":"2","order":"5093","possible_hits":"2",},
{"lineNum":" 1459","line":"\t\t\tRouteHop {","class":"lineCov","hits":"1","order":"5096","possible_hits":"1",},
{"lineNum":" 1460","line":"\t\t\t\tpubkey: public_key.clone(),","class":"lineCov","hits":"1","order":"5094","possible_hits":"1",},
{"lineNum":" 1461","line":"\t\t\t\tshort_channel_id: [0; 8],","class":"lineCov","hits":"1","order":"5095","possible_hits":"1",},
{"lineNum":" 1462","line":"\t\t\t\tfee_base_msat: 4,"},
{"lineNum":" 1463","line":"\t\t\t\tfee_proportional_millionths: 3,"},
{"lineNum":" 1464","line":"\t\t\t\tcltv_expiry_delta: 147,"},
{"lineNum":" 1465","line":"\t\t\t},"},
{"lineNum":" 1466","line":"\t\t\tRouteHop {","class":"lineCov","hits":"1","order":"5099","possible_hits":"1",},
{"lineNum":" 1467","line":"\t\t\t\tpubkey: public_key.clone(),","class":"lineCov","hits":"1","order":"5097","possible_hits":"1",},
{"lineNum":" 1468","line":"\t\t\t\tshort_channel_id: [1; 8],","class":"lineCov","hits":"1","order":"5098","possible_hits":"1",},
{"lineNum":" 1469","line":"\t\t\t\tfee_base_msat: 5,"},
{"lineNum":" 1470","line":"\t\t\t\tfee_proportional_millionths: 4,"},
{"lineNum":" 1471","line":"\t\t\t\tcltv_expiry_delta: 148,"},
{"lineNum":" 1472","line":"\t\t\t}"},
{"lineNum":" 1473","line":"\t\t];"},
{"lineNum":" 1474","line":""},
{"lineNum":" 1475","line":"\t\tlet builder = InvoiceBuilder::new(Currency::BitcoinTestnet)","class":"lineCov","hits":"10","order":"5100","possible_hits":"10",},
{"lineNum":" 1476","line":"\t\t\t.amount_pico_btc(123)","class":"lineCov","hits":"1","order":"5101","possible_hits":"1",},
{"lineNum":" 1477","line":"\t\t\t.timestamp(UNIX_EPOCH + Duration::from_secs(1234567))","class":"linePartCov","hits":"2","order":"5102","possible_hits":"3",},
{"lineNum":" 1478","line":"\t\t\t.payee_pub_key(public_key.clone())","class":"linePartCov","hits":"2","order":"5108","possible_hits":"3",},
{"lineNum":" 1479","line":"\t\t\t.expiry_time(Duration::from_secs(54321))","class":"linePartCov","hits":"2","order":"5113","possible_hits":"3",},
{"lineNum":" 1480","line":"\t\t\t.min_final_cltv_expiry(144)"},
{"lineNum":" 1481","line":"\t\t\t.min_final_cltv_expiry(143)"},
{"lineNum":" 1482","line":"\t\t\t.fallback(Fallback::PubKeyHash([0;20]))","class":"lineCov","hits":"2","order":"5127","possible_hits":"2",},
{"lineNum":" 1483","line":"\t\t\t.route(route_1.clone())","class":"linePartCov","hits":"2","order":"5132","possible_hits":"3",},
{"lineNum":" 1484","line":"\t\t\t.route(route_2.clone())","class":"linePartCov","hits":"2","order":"5134","possible_hits":"3",},
{"lineNum":" 1485","line":"\t\t\t.description_hash(sha256::Hash::from_slice(&[3;32][..]).unwrap())","class":"linePartCov","hits":"2","order":"5135","possible_hits":"3",},
{"lineNum":" 1486","line":"\t\t\t.payment_hash(sha256::Hash::from_slice(&[21;32][..]).unwrap());","class":"linePartCov","hits":"2","order":"5140","possible_hits":"3",},
{"lineNum":" 1487","line":""},
{"lineNum":" 1488","line":"\t\tlet invoice = builder.clone().build_signed(|hash| {","class":"lineCov","hits":"2","order":"5141","possible_hits":"2",},
{"lineNum":" 1489","line":"\t\t\tsecp_ctx.sign_recoverable(hash, &private_key)","class":"lineCov","hits":"1","order":"5291","possible_hits":"1",},
{"lineNum":" 1490","line":"\t\t}).unwrap();","class":"linePartCov","hits":"2","order":"5602","possible_hits":"3",},
{"lineNum":" 1491","line":""},
{"lineNum":" 1492","line":"\t\tassert!(invoice.check_signature().is_ok());","class":"lineCov","hits":"1","order":"5656","possible_hits":"1",},
{"lineNum":" 1493","line":"\t\tassert_eq!(invoice.tagged_fields().count(), 9);","class":"linePartCov","hits":"1","order":"6003","possible_hits":"2",},
{"lineNum":" 1494","line":""},
{"lineNum":" 1495","line":"\t\tassert_eq!(invoice.amount_pico_btc(), Some(123));","class":"lineCov","hits":"2","order":"6007","possible_hits":"2",},
{"lineNum":" 1496","line":"\t\tassert_eq!(invoice.currency(), Currency::BitcoinTestnet);","class":"lineCov","hits":"1","order":"6022","possible_hits":"1",},
{"lineNum":" 1497","line":"\t\tassert_eq!(","class":"linePartCov","hits":"1","order":"6036","possible_hits":"2",},
{"lineNum":" 1498","line":"\t\t\tinvoice.timestamp().duration_since(UNIX_EPOCH).unwrap().as_secs(),","class":"lineCov","hits":"1","order":"6029","possible_hits":"1",},
{"lineNum":" 1499","line":"\t\t\t1234567"},
{"lineNum":" 1500","line":"\t\t);"},
{"lineNum":" 1501","line":"\t\tassert_eq!(invoice.payee_pub_key(), Some(&public_key));","class":"lineCov","hits":"2","order":"6037","possible_hits":"2",},
{"lineNum":" 1502","line":"\t\tassert_eq!(invoice.expiry_time(), Duration::from_secs(54321));","class":"lineCov","hits":"1","order":"6041","possible_hits":"1",},
{"lineNum":" 1503","line":"\t\tassert_eq!(invoice.min_final_cltv_expiry(), Some(&144));","class":"lineCov","hits":"1","order":"6050","possible_hits":"1",},
{"lineNum":" 1504","line":"\t\tassert_eq!(invoice.fallbacks(), vec![&Fallback::PubKeyHash([0;20])]);","class":"lineCov","hits":"1","order":"6057","possible_hits":"1",},
{"lineNum":" 1505","line":"\t\tassert_eq!(invoice.routes(), vec![&Route(route_1), &Route(route_2)]);","class":"lineCov","hits":"1","order":"6071","possible_hits":"1",},
{"lineNum":" 1506","line":"\t\tassert_eq!(","class":"lineCov","hits":"1","order":"6094","possible_hits":"1",},
{"lineNum":" 1507","line":"\t\t\tinvoice.description(),","class":"lineCov","hits":"1","order":"6081","possible_hits":"1",},
{"lineNum":" 1508","line":"\t\t\tInvoiceDescription::Hash(&Sha256(sha256::Hash::from_slice(&[3;32][..]).unwrap()))","class":"lineCov","hits":"1","order":"6093","possible_hits":"1",},
{"lineNum":" 1509","line":"\t\t);"},
{"lineNum":" 1510","line":"\t\tassert_eq!(invoice.payment_hash(), &sha256::Hash::from_slice(&[21;32][..]).unwrap());","class":"lineCov","hits":"1","order":"6097","possible_hits":"1",},
{"lineNum":" 1511","line":""},
{"lineNum":" 1512","line":"\t\tlet raw_invoice = builder.build_raw().unwrap();","class":"lineCov","hits":"1","order":"6104","possible_hits":"1",},
{"lineNum":" 1513","line":"\t\tassert_eq!(raw_invoice, *invoice.into_signed_raw().raw_invoice())","class":"lineCov","hits":"2","order":"6105","possible_hits":"2",},
{"lineNum":" 1514","line":"\t}","class":"linePartCov","hits":"2","order":"6109","possible_hits":"6",},
{"lineNum":" 1515","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "lightning_invoice-99c93907235ac8b4", "date" : "2019-08-31 07:54:49", "instrumented" : 591, "covered" : 558,};
var merged_data = [];
